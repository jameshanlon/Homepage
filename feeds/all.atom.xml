<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>James W. Hanlon</title><link href="http://jameswhanlon.com/" rel="alternate"></link><link href="http://jameswhanlon.com/feeds/all.atom.xml" rel="self"></link><id>http://jameswhanlon.com/</id><updated>2020-05-02T00:00:00+02:00</updated><entry><title>Error-correctingÂ codes</title><link href="http://jameswhanlon.com/error-correcting-codes.html" rel="alternate"></link><published>2020-05-02T00:00:00+02:00</published><updated>2020-05-02T00:00:00+02:00</updated><author><name>James W. Hanlon</name></author><id>tag:jameswhanlon.com,2020-05-02:/error-correcting-codes.html</id><summary type="html">&lt;p&gt;Using Hamming Codes for single error correction and double error&amp;nbsp;detection.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Error correcting codes (ECCs) are used in computer and communication systems to
improve resiliency to bit flips caused by permanent hardware faults or
transient conditions, such as neutron particles from cosmic rays, known
generally as &lt;a href="https://en.wikipedia.org/wiki/Soft_error"&gt;soft errors&lt;/a&gt;. This note
describes the principles of Hamming codes that underpin &lt;span class="caps"&gt;ECC&lt;/span&gt; schemes, &lt;span class="caps"&gt;ECC&lt;/span&gt; codes
are constructed, focusing on single-error correction and double error
detection, and how they are&amp;nbsp;implemented.&lt;/p&gt;
&lt;p&gt;ECCs work by adding additional redundant bits to be stored or transported with
data. The bits are encoded as a function of the data in such a way that it is
possible to detect erroneous bit flips and to correct them. The ratio of the
number of data bits to the total number of bits encoded is called the &lt;em&gt;code
rate&lt;/em&gt;, with a rate of 1 being a an impossible encoding with no&amp;nbsp;overhead.&lt;/p&gt;
&lt;h2&gt;Simple&amp;nbsp;ECCs&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Parity coding&lt;/strong&gt; adds a single bit that indicates whether the number of set
bits in the data is odd or even. When the data and parity bit is accessed or
received, the parity can be recomputed and compared. This is sufficient to
detect any odd number of bit flips but not to correct them. For applications
where the error rate is low, so that only single bit flips are likely and
double bit flips are rare enough to be ignored, parity error detection is
sufficient and desirable due to it&amp;#8217;s low overhead (just a single bit) and
simple&amp;nbsp;implementation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Repetition coding&lt;/strong&gt; simply repeats each data bit a fixed number of times. When
the encoded data is received, if each of the repeated bits are non identical,
an error has occurred. With a repetition of two, single-bit errors can be
detected but not corrected. With a repetition of three, single bit flips can be
corrected by determining each data bit as the majority value in each triple,
but double bit flips are undetectable and will cause an erroneous correction.
Repetition codes are simple to implement but have a high&amp;nbsp;overhead.&lt;/p&gt;
&lt;h2&gt;Hamming&amp;nbsp;codes&lt;/h2&gt;
&lt;p&gt;Hamming codes are an efficient family of codes using additional redundant bits to
detect up to two-bit errors and correct single-bit errors (technically, they are
&lt;em&gt;&lt;a href="https://en.wikipedia.org/wiki/Linear_code"&gt;linear error-correcting codes&lt;/a&gt;&lt;/em&gt;).
In them, &lt;em&gt;check bits&lt;/em&gt; are added to data bits to form a &lt;em&gt;codeword&lt;/em&gt;, and the
codeword is &lt;em&gt;valid&lt;/em&gt; only when the check bits have been generated from the data
bits, according to the Hamming code. The check bits are chosen so that there is
a fixed &lt;em&gt;Hamming distance&lt;/em&gt; between any two valid codewords (the number of
positions in which bits&amp;nbsp;differ).&lt;/p&gt;
&lt;p&gt;When valid codewords have a Hamming distance of two, any single bit flip will
invalidate the word and allow the error to be detected. For example, the valid
codewords &lt;code&gt;00&lt;/code&gt; and &lt;code&gt;11&lt;/code&gt; are separated for single bit flips by the invalid
codewords &lt;code&gt;01&lt;/code&gt; and &lt;code&gt;10&lt;/code&gt;. If either of the invalid words is obtained an error
has occurred, but neither can be associated with a valid codeword. Two bit
flips are undetectable since they always map to a valid codeword. Note that
parity encoding is an example of a distance-two Hamming&amp;nbsp;code.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mf"&gt;00&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Val&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;codeword&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;
&lt;span class="mf"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Invalid&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;codeword&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obtained&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;exactly&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;flip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;
&lt;span class="mf"&gt;11&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Val&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;codeword&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With Hamming distance three, any single bit flip in a valid codeword makes an
invalid one, and the invalid codeword is Hamming distance one from exactly one
valid codeword. Using this, the valid codeword can be restored, enabling single
error correction. Any two bit flips map to an invalid codeword, which would
cause correction to the wrong valid&amp;nbsp;codeword.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mf"&gt;000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Val&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;codeword&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;
&lt;span class="mf"&gt;001&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;
&lt;span class="mf"&gt;011&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;
&lt;span class="mf"&gt;111&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Val&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;codeword&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With Hamming distance four, two bit flips moves any valid codeword Hamming
distance two from exactly two valid codewords, allowing detection of two flips
but not correction. Single bit flips can be corrected as they were for distance
three. Distance-four codes are widely used in computing, where is it often the
case where single errors are frequent, double errors are rare and triple errors
occur so rarely they can be ignored. These codes are referred to as &amp;#8216;&lt;span class="caps"&gt;SECDED&lt;/span&gt;
&lt;span class="caps"&gt;ECC&lt;/span&gt;&amp;#8217; (single error correction, double error&amp;nbsp;detection).&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mf"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Val&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;codeword&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;
&lt;span class="mf"&gt;0001&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;
&lt;span class="mf"&gt;0011&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Two&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;flips&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;either&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;codeword&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;
&lt;span class="mf"&gt;0111&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;
&lt;span class="mf"&gt;1111&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Val&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;codeword&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Double errors can be corrected with a distance-five code, as well as enabling
the detection of triple errors. In general, if a Hamming code can detect $d$
errors, it must have a minimum distance of $d+1$ so there is no way $d$ errors
can change one valid codeword into another one. If a code can correct $d$
errors, it must have a minimum distance of $2d+1$ so that the originating code
is always the closest one. The following table summarises Hamming&amp;nbsp;codes.&lt;/p&gt;
&lt;table class="table table-sm"&gt;
&lt;thead&gt;
  &lt;tr&gt;
    &lt;th scope="col"&gt;Distance&lt;/th&gt;
    &lt;th scope="col"&gt;Max bits corrected&lt;/th&gt;
    &lt;th scope="col"&gt;Max bits detected&lt;/th&gt;
    &lt;th scope="col"&gt;&lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
  &lt;tr&gt;
    &lt;td&gt;2&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;td&gt;Single error detection (eg parity code)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;3&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;Single error correction (eg triple repetition code)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;4&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;2&lt;/td&gt;
    &lt;td&gt;Single error correction, double error detection (a &amp;#8216;&lt;span class="caps"&gt;SECDED&lt;/span&gt;&amp;#8217; code)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;5&lt;/td&gt;
    &lt;td&gt;2&lt;/td&gt;
    &lt;td&gt;2&lt;/td&gt;
    &lt;td&gt;Double error correction&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;6&lt;/td&gt;
    &lt;td&gt;2&lt;/td&gt;
    &lt;td&gt;3&lt;/td&gt;
    &lt;td&gt;Double error correction, triple error detection&lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2&gt;Creating a Hamming&amp;nbsp;code&lt;/h2&gt;
&lt;p&gt;A codeword includes the data bits and checkbits. Each check bit corresponds to
a subset of the data bits and it is set when the parity of those data bits is
odd. To obtain a code with a particular Hamming distance, the number of check
bits and their mapping to data bits must be chosen&amp;nbsp;carefully.&lt;/p&gt;
&lt;p&gt;To build a single-error correcting (&lt;span class="caps"&gt;SEC&lt;/span&gt;) code that requires Hamming distance
three between valid codewords, it is necessary&amp;nbsp;for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The mapping of each data bit to check bits is&amp;nbsp;unique.&lt;/li&gt;
&lt;li&gt;Each data bit to map to at least two check&amp;nbsp;bits.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To see why this works, consider two distinct codewords that necessarily
must have different data bits. If the data bits differ&amp;nbsp;by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;1 bit&lt;/strong&gt;, at least two check bits are flipped, giving a total of three
  different&amp;nbsp;bits.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;2 bits&lt;/strong&gt;, these will cause at least one flip in the check bits since any two
  data bits cannot share the same check-bit mapping (ie by taking the &lt;span class="caps"&gt;XOR&lt;/span&gt; of
  the two check bit patterns). This also gives a total of three different bits as&amp;nbsp;required.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;3 bits&lt;/strong&gt;, this is already sufficient to give a Hamming distance of&amp;nbsp;three.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To build a &lt;span class="caps"&gt;SECDED&lt;/span&gt; code that requires Hamming distance of four between valid
codewords, it is necessary&amp;nbsp;for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The mapping of each data bit to check bits is&amp;nbsp;unique.&lt;/li&gt;
&lt;li&gt;Each data bit to map to at least three check&amp;nbsp;bits.&lt;/li&gt;
&lt;li&gt;Each check bit pattern to have an odd number of bits&amp;nbsp;set.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Following a similar argument, consider two distinct codewords, data differing&amp;nbsp;by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;1 bit&lt;/strong&gt; flips three check bits, giving a total of four different&amp;nbsp;bits.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;2 bits&lt;/strong&gt; flip check bits in two patterns, and since any two odd-length patterns
  must have at least two non-overlapping bits, the results is at least two
  flipped bits, giving a total of four different bits. For&amp;nbsp;example:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;Check&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="o"&gt;-----------&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;--------&lt;/span&gt;
&lt;span class="n"&gt;Flips&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;

&lt;span class="k"&gt;Check&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="o"&gt;----------&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;---------&lt;/span&gt;
&lt;span class="n"&gt;Flips&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;3 bits&lt;/strong&gt; flip check bits in three patterns, and this time it is possible to
  overlap odd-length patterns in such a way that a minimum of 1 bit is flipped.
  For&amp;nbsp;example:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;Check&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="o"&gt;-----------&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;---------&lt;/span&gt;
&lt;span class="n"&gt;Flips&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;

&lt;span class="k"&gt;Check&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="o"&gt;-----------&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;---------&lt;/span&gt;
&lt;span class="n"&gt;Flips&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;4 bits&lt;/strong&gt; is already sufficient to provide a Hamming distance of&amp;nbsp;four.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An example &lt;span class="caps"&gt;SEC&lt;/span&gt; code for eight data bits with four parity&amp;nbsp;bits:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Check bits:  0 1 2 3
data[0]      x x x
data[1]        x x x
data[2]      x   x x
data[3]      x x   x
data[4]      x x
data[5]        x x
data[6]          x x
data[7]      x     x
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;An example &lt;span class="caps"&gt;SECDED&lt;/span&gt; code for eight data bits with five parity&amp;nbsp;bits:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Check bits:  0 1 2 3 4
data[0]      x x x
data[1]      x x   x
data[2]      x   x x
data[3]        x x x
data[4]      x x     x
data[5]      x   x   x
data[6]        x x   x
data[7]      x     x x
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that mappings of data bits to check bits can be chosen flexibly, providing
they maintain the rules that set the Hamming distance. This flexibility is
useful when implementing &lt;span class="caps"&gt;ECC&lt;/span&gt; to reduce the cost of calculating the check bits.
In contrast, many descriptions of &lt;span class="caps"&gt;ECC&lt;/span&gt; that I have found in text books and on
&lt;a href="https://en.wikipedia.org/wiki/Hamming_code"&gt;Wikipedia&lt;/a&gt; describe a specific
encoding that does not acknowledge this freedom. The encoding they describe
allows the syndrome to be interpreted as the bit index of the single bit error,
by the check bit in position $i$ covering data bits in position $i$.
Additionally, they specify that parity bits are positioned in the codeword at
power-of-two positions, for no apparent&amp;nbsp;benefit.&lt;/p&gt;
&lt;h2&gt;Implementing &lt;span class="caps"&gt;ECC&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Given data bits and check bits, and mapping of data bits to check bits, &lt;span class="caps"&gt;ECC&lt;/span&gt;
encoding works by calculating the check bits from the data bits, then combining
data bits and check bits to form the codeword. Decoding works by taking the
data bits from a codeword, recalculating the check bits, then calculating the
bitwise &lt;span class="caps"&gt;XOR&lt;/span&gt; between the original check bits and the recalculated ones. This
value is called the &lt;em&gt;syndrome&lt;/em&gt;. By inspecting the number of bits set in the
syndrome, it is possible to determine whether there has been an error,
whether it is correctable, and how to correct&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Using the &lt;span class="caps"&gt;SEC&lt;/span&gt; check-bit encoding above, creating a codeword from &lt;code&gt;data[7:0]&lt;/code&gt;,
the check bits are calculated as follows (using Verilog&amp;nbsp;syntax):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;check_word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;7&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;check_word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;check_word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;6&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;check_word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;7&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the codeword formed by concatenating the check bits and&amp;nbsp;data:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;codeword&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;7&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Decoding of a codeword, splits it into the checkword and data bits, recomputes
the check bits and calculates the&amp;nbsp;syndrome:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;old_check_word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;old_data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;codeword&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;new_check_word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...;&lt;/span&gt;
&lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;new_check_word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...;&lt;/span&gt;
&lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;new_check_word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...;&lt;/span&gt;
&lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;new_check_word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...;&lt;/span&gt;
&lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;syndrome&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;new_check_word&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;old_check_word&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When single bit errors occur, the syndrome will have the bit pattern
corresponding to a particular data bit, so a correction can be applied by
creating a mask to flip the bit in that&amp;nbsp;position:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;unique&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;case&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;syndrome&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;4&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b1110: correction = 1&amp;lt;&amp;lt;0;&lt;/span&gt;
&lt;span class="s1"&gt;  4&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;b0111&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;correction&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;4&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b1011: correction = 1&amp;lt;&amp;lt;2;&lt;/span&gt;
&lt;span class="s1"&gt;  4&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;b1101&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;correction&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;4&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b1100: correction = 1&amp;lt;&amp;lt;4;&lt;/span&gt;
&lt;span class="s1"&gt;  4&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;b0110&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;correction&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;5&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;4&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b0011: correction = 1&amp;lt;&amp;lt;6;&lt;/span&gt;
&lt;span class="s1"&gt;  4&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;b1001&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;correction&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;7&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;correction&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;endcase&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And using it to generate the corrected&amp;nbsp;data:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;corrected_data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;correction&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The value of the syndrome can be further inspected to signal what action has
been taken. If the syndrome&amp;nbsp;is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Equal to zero, no error&amp;nbsp;occurred.&lt;/li&gt;
&lt;li&gt;Has one bit set, then this is a flip of a check bit and can be&amp;nbsp;ignored.&lt;/li&gt;
&lt;li&gt;Has a value matching a pattern (three bits set or two bits in the adjacent positions), a correctable error&amp;nbsp;occurred.&lt;/li&gt;
&lt;li&gt;Has a value not matching a pattern (two bits set in the other non-adjacent positions: &lt;code&gt;4'b1010&lt;/code&gt;, &lt;code&gt;4'b0101&lt;/code&gt;), or four bits set, a multi-bit uncorrectable error&amp;nbsp;occurred.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The above &lt;span class="caps"&gt;SECDED&lt;/span&gt; check-bit encoding can be implemented in a similar way, but
since it uses only three-bit patterns, mapping syndromes to correction masks
can be done with three-input &lt;span class="caps"&gt;AND&lt;/span&gt;&amp;nbsp;gates:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;unique&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;case&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;syndrome&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;syndrome&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;syndrome&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;syndrome&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;correction&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;syndrome&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;syndrome&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;syndrome&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;correction&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;syndrome&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;syndrome&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;syndrome&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;correction&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;syndrome&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;syndrome&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;syndrome&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;correction&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;syndrome&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;syndrome&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;syndrome&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;correction&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;4&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;syndrome&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;syndrome&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;syndrome&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;correction&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;5&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;syndrome&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;syndrome&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;syndrome&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;correction&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;6&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;syndrome&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;syndrome&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;syndrome&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;correction&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;7&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                                   &lt;/span&gt;&lt;span class="nt"&gt;correction&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;endcase&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And any syndromes with one or two bits set are correctable, and otherwise&amp;nbsp;uncorrectable.&lt;/p&gt;
&lt;h2&gt;References / further&amp;nbsp;reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Error_correction_code"&gt;Error correction code&lt;/a&gt;,&amp;nbsp;Wikipedia.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Hamming_code"&gt;Hamming code&lt;/a&gt;,&amp;nbsp;Wikipedia.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/ECC_memory"&gt;&lt;span class="caps"&gt;ECC&lt;/span&gt; memory&lt;/a&gt;,&amp;nbsp;Wikipedia.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://signallake.com/innovation/hamming.pdf"&gt;Error detecting and error correcting codes (&lt;span class="caps"&gt;PDF&lt;/span&gt;)&lt;/a&gt;,
  &lt;span class="caps"&gt;R. W.&lt;/span&gt; Hamming, in The Bell System Technical Journal, vol. 29, no. 2, pp. 147-160, April&amp;nbsp;1950.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pages.cs.wisc.edu/~david/courses/cs552/S12/handouts/ecc-phelps.pdf"&gt;Constructing an Error Correcting Code (&lt;span class="caps"&gt;PDF&lt;/span&gt;)&lt;/a&gt;,
  Andrew E. Phelps, University of Wisconsin, Madison, November&amp;nbsp;2006.&lt;/li&gt;
&lt;/ul&gt;</content><category term="notes"></category><category term="computing"></category></entry><entry><title>Testing silicon logic with scanÂ structures</title><link href="http://jameswhanlon.com/testing-silicon-logic-with-scan-structures.html" rel="alternate"></link><published>2019-04-18T00:00:00+02:00</published><updated>2019-04-18T00:00:00+02:00</updated><author><name>James W. Hanlon</name></author><id>tag:jameswhanlon.com,2019-04-18:/testing-silicon-logic-with-scan-structures.html</id><summary type="html">&lt;p&gt;A description of how digital circuits are modified to allow scan
testing to be&amp;nbsp;performed.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Design for test (&lt;span class="caps"&gt;DFT&lt;/span&gt;) is a methodology for silicon integrated-circuit chips to
enable devices to be tested during and after manufacture. Such testability
permits the detection of faults due to problems in the manufacturing processes
that would adversely affect the functional behaviour of the device. This note
explains the concepts of a particular &lt;span class="caps"&gt;DFT&lt;/span&gt; methodology called &lt;em&gt;scan test&lt;/em&gt;, which
modifies the logic of a design in such a way that the functional behaviour is
preserved but classes of faults become&amp;nbsp;detectable.&lt;/p&gt;
&lt;h2&gt;Scan&amp;nbsp;chains&lt;/h2&gt;
&lt;p&gt;A chip can be viewed as a set of input ports that feed into a series of
combinatorial and sequential cells, and arrive at a set of output ports. To
test that the function of the chip is correct, it would suffice to check that a
particular output is generated for a particular input, or sequence of inputs
and outputs. However, if the intervening logic contains sequential elements, is
computationally difficult to setup inputs each clock cycle to observe desired
values on all outputs. Doing so requires sequencing of state transitions
through the logic, but the size of the state space grows exponentially with the
number of&amp;nbsp;states.&lt;/p&gt;
&lt;figure class="figure d-block text-center"&gt;
  &lt;img src="https://jwh.ams3.digitaloceanspaces.com/homepage/DFT/chip.png" class="figure-img img-fluid rounded"&gt;
  &lt;figcaption class="figure-caption"&gt;
    Conceptually, a silicon chip is a set of input ports driving logic with
sequential elements, in turn driving output ports.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;To avoid an intractable state space, the design is changed so that inputs and
observable outputs are separated only by combinatorial logic. This is done by
adding new controllable &lt;strong&gt;primary inputs&lt;/strong&gt; and &lt;strong&gt;observable outputs&lt;/strong&gt;, called
&lt;strong&gt;scan chains&lt;/strong&gt;. A scan chain adds three ports to the chip: a scan chain input,
&lt;code&gt;scan_in&lt;/code&gt;, a scan chain output &lt;code&gt;scan_out&lt;/code&gt; and an enable &lt;code&gt;scan_enable&lt;/code&gt;.
All registers are converted by adding a multiplexer on the D pin, with one
input connected to the data signal. The first scan-chain register has itâs
other multiplexer input connected to &lt;code&gt;scan_in&lt;/code&gt;. Subsequent scan registers
take their other multiplexer inputs from the output of the previous register in
the chain. The final register in the chain drives &lt;code&gt;scan_out&lt;/code&gt; from itâs D pin.
All multiplexers are controlled by &lt;code&gt;scan_enable&lt;/code&gt;.&lt;/p&gt;
&lt;figure class="figure d-block text-center"&gt;
  &lt;img src="https://jwh.ams3.digitaloceanspaces.com/homepage/DFT/scan-flop.png" class="figure-img img-fluid rounded"&gt;
  &lt;figcaption class="figure-caption"&gt;
    A standard flip flop (left) and a scanned flip flop with scan-in and
scan-enable inputs (right).
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure class="figure d-block text-center"&gt;
  &lt;img src="https://jwh.ams3.digitaloceanspaces.com/homepage/DFT/scan-chains.png" class="figure-img img-fluid rounded"&gt;
  &lt;figcaption class="figure-caption"&gt;
    Scan chain topology providing a set of controllable primary inputs and a set of observable outputs.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;When &lt;code&gt;scan_enable&lt;/code&gt; is pulled high, and the clock pulsed, data is shifted into
each register in the chain. Each bit of a chain of N registers can be set in N
clock cycles. When pulled low, the chip is in normal functional mode. These
inputs allow a simple test procedure to be&amp;nbsp;implemented:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set &lt;code&gt;scan_enable&lt;/code&gt; high (scan&amp;nbsp;mode).&lt;/li&gt;
&lt;li&gt;Shift in N bits of input&amp;nbsp;data.&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;scan_enable&lt;/code&gt; low (functional&amp;nbsp;mode).&lt;/li&gt;
&lt;li&gt;Tick the clock once to propagate input vector though combinatorial logic into&amp;nbsp;outputs.&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;scan_enable&lt;/code&gt; high (scan&amp;nbsp;mode).&lt;/li&gt;
&lt;li&gt;Shift out N bits of output&amp;nbsp;data.&lt;/li&gt;
&lt;li&gt;Check that the output data equals the input data transformed by the same logic&amp;nbsp;function.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since typical tests will contain large numbers of patterns, the time to test
one pattern is critical. It is determined by the length of the chain, to shift
in and out data. To reduce test time, additional scan chains can be introduced
to allow shifting to be performed in parallel. Each chain adds &lt;code&gt;scan_in&lt;/code&gt; and
&lt;code&gt;scan_out&lt;/code&gt; ports to the chip. The number of scan chains is chosen to trade
off the physical requirements of the additional ports and routing with test
time and coverage. To avoid many additional ports at the top level, a set of
parallel scan chains can be driven by &lt;span class="caps"&gt;DFT&lt;/span&gt; logic that supplies compressed
patterns to the inputs and compresses results from the&amp;nbsp;outputs.&lt;/p&gt;
&lt;figure class="figure d-block text-center"&gt;
  &lt;img src="https://jwh.ams3.digitaloceanspaces.com/homepage/DFT/parallel-scan-chains.png" class="figure-img img-fluid rounded"&gt;
  &lt;figcaption class="figure-caption"&gt;
    Parallel scan chains to reduce test time.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2&gt;Wrapper&amp;nbsp;chains&lt;/h2&gt;
&lt;p&gt;Typically, a chip is too complex to test with a single set of scan chains. Even
with only combinatorial logic between primary inputs and observable outputs, it
becomes computationally difficult to analyse to generate patterns that can
effectively exercise it to achieve good coverage and fault isolation. Instead,
a chip is divided into sub components, each of which is amenable to testing (an
approach known as hierarchical &lt;span class="caps"&gt;DFT&lt;/span&gt;). The components are referred to as &lt;strong&gt;test
cores&lt;/strong&gt; and typically naturally correspond to functional blocks of the chip&amp;nbsp;design.&lt;/p&gt;
&lt;p&gt;It is necessary for a test core to be isolated from the rest of the design. At
a chip-level primary inputs are controllable in that their values are always
known. However, the values of an input to a test core are unknown and likely to
be Xs. If X values propagate into a test core, coverage can be reduced, or
worse, the testing methodology may be invalidated altogether. Isolation is
achieved with &lt;strong&gt;wrapper chains&lt;/strong&gt; that are inserted between the &lt;span class="caps"&gt;IO&lt;/span&gt; ports and the
core logic of the design. A bypass multiplexer is inserted on the output of the
wrapper scan register to control whether the input or output is used or driven
respectively. If the input or output is directly connected to a register, then
a bypass is not&amp;nbsp;necessary.&lt;/p&gt;
&lt;figure class="figure d-block text-center"&gt;
  &lt;img src="https://jwh.ams3.digitaloceanspaces.com/homepage/DFT/wrapper-flop.png" class="figure-img img-fluid rounded"&gt;
  &lt;figcaption class="figure-caption"&gt;
    Wrapper flops inserted on input and output ports.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure class="figure d-block text-center"&gt;
  &lt;img src="https://jwh.ams3.digitaloceanspaces.com/homepage/DFT/test-core.png" class="figure-img img-fluid rounded"&gt;
  &lt;figcaption class="figure-caption"&gt;
    A test core isolated with input and output wrapper chains. One or more
additional scan chains may be connected to sequential elements of the core logic.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;An &lt;strong&gt;input wrapper chain&lt;/strong&gt; is the chain of registers that capture the primary
inputs to the core, with their D inputs corresponding to each input of the test
core. Some inputs may be omitted from the wrapper chain, such as clock, reset
and test-related signals. Input wrapper chains are different to regular scan
chains only in the way that their &lt;code&gt;scan_enable&lt;/code&gt; is controlled. During test mode,
the scan enable of the input wrapper is held high when the regular &lt;code&gt;scan_enable&lt;/code&gt;
is low and all other registers are in functional mode. The effect of this is
that the input wrapper chain continues to shift in known values, rather than Xs
from outside of the test core. When the input wrapper registers are not shared
with any other test core, the captured values can be shifted out with the other
test pattern results to ensure all of the registers are functioning&amp;nbsp;correctly.&lt;/p&gt;
&lt;p&gt;An &lt;strong&gt;output wrapper chain&lt;/strong&gt; behaves exactly as an internal scan chain during test
mode. However, when they are shared with an adjacent test core, their
&lt;code&gt;scan_enable&lt;/code&gt; is controlled differently since they will function as an input
wrapper chain for that core, with the behaviour described&amp;nbsp;above.&lt;/p&gt;
&lt;figure class="figure d-block text-center"&gt;
  &lt;img src="https://jwh.ams3.digitaloceanspaces.com/homepage/DFT/adjacent-test-cores.png" class="figure-img img-fluid rounded"&gt;
  &lt;figcaption class="figure-caption"&gt;
    Test core B shares core B&amp;#8217;s output wrapper chain, using it as an input wrapper chain in test mode.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2&gt;X&amp;nbsp;bounding&lt;/h2&gt;
&lt;p&gt;It may not be possible to add all registers into the scan chains for a design.
In this case, to prevent Xs from propagating into the logic during test, all
sources of Xs must be masked with known values. This is done by inserting a
multiplexer to take the Q pin as input, with the other input as an alternative
known value, typically from a register on a scan chain. The multiplexer is
controlled by an &lt;code&gt;xbnd_enable&lt;/code&gt; signal, which when set high will prevent X
propagation during test mode, and otherwise maintains the functional behaviour
of the&amp;nbsp;circuit.&lt;/p&gt;
&lt;figure class="figure d-block text-center"&gt;
  &lt;img src="https://jwh.ams3.digitaloceanspaces.com/homepage/DFT/xbnd-flop.png" class="figure-img img-fluid rounded"&gt;
  &lt;figcaption class="figure-caption"&gt;
    A X-source flop with bypass multiplexing of a known value.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2&gt;References / further&amp;nbsp;reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Design_for_testing"&gt;Design for testing&amp;nbsp;(Wikipedia)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vlsitutorials.com/dft-scan-and-atpg/"&gt;&lt;span class="caps"&gt;DFT&lt;/span&gt;, Scan and &lt;span class="caps"&gt;ATPG&lt;/span&gt; (&lt;span class="caps"&gt;VLSI&lt;/span&gt;&amp;nbsp;Tutorials)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Automatic_test_pattern_generation"&gt;Automatic test pattern generation&amp;nbsp;(Wikipedia)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://web.stanford.edu/class/archive/ee/ee371/ee371.1066/lectures.html"&gt;Stanford &lt;span class="caps"&gt;EE371&lt;/span&gt;, lecture 14: Design for&amp;nbsp;testability&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Acknowledgements&lt;/h2&gt;
&lt;p&gt;Thanks to Evan Griffiths for his detailed explanations of &lt;span class="caps"&gt;DFT&lt;/span&gt; insertion, upon
which this note is&amp;nbsp;based.&lt;/p&gt;</content><category term="notes"></category><category term="microelectronics"></category></entry><entry><title>Querying logical paths in a VerilogÂ design</title><link href="http://jameswhanlon.com/querying-logical-paths-in-a-verilog-design.html" rel="alternate"></link><published>2018-11-20T00:00:00+01:00</published><updated>2018-11-20T00:00:00+01:00</updated><author><name>James W. Hanlon</name></author><id>tag:jameswhanlon.com,2018-11-20:/querying-logical-paths-in-a-verilog-design.html</id><summary type="html">&lt;p&gt;A description of a command-line tool I created for tracing timing
paths from a flattened netlist back through the &lt;span class="caps"&gt;RTL&lt;/span&gt;.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I wrote a simple command-line tool for querying logical paths in a Verilog
design. My motivation for doing this is that it&amp;#8217;s easy to create complex logic
in Verilog, particularly between modules, but more difficult to understand
exactly what is driving a particular net, just from inspecting the code. It is
the complex cones of logic that lead to timing problems in a synthesised
design, but having to push a design through a synthesis flow takes time, making
speculative timing fixes a lengthy process. A command-line tool is useful as it
can be integrated into more complex workflows, in contrast with using more
complex and usually graphical &lt;span class="caps"&gt;EDA&lt;/span&gt;&amp;nbsp;tooling.&lt;/p&gt;
&lt;p&gt;The tool addresses high-level structural problems in a design, such as
incorrect dependencies when a signal including logic that is not necessary to
its function. It does not deal with other timing issues that are a product of
the synthesis and physical build of the design. As such, all the structural
information required is contained within the Verilog source&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;This note briefly explains how the tool works and records some ideas on how it
could be&amp;nbsp;extended.&lt;/p&gt;
&lt;h2&gt;Use&lt;/h2&gt;
&lt;p&gt;Instructions to build the tool are in the &lt;span class="caps"&gt;README&lt;/span&gt; in the &lt;a href="https://github.com/jameshanlon/netlist-paths/blob/master/README.md"&gt;GitHub
repository&lt;/a&gt;.
Assuming the &lt;code&gt;netlist-paths&lt;/code&gt; install &lt;code&gt;bin&lt;/code&gt; directory is available in your
&lt;code&gt;PATH&lt;/code&gt;, then using the &lt;a href="https://github.com/cliffordwolf/picorv32"&gt;PicoRV32 processor
implementation&lt;/a&gt; as an example, its
netlist can be generated as&amp;nbsp;follows:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;https://github.com/cliffordwolf/picorv32.git
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;picorv32
$&lt;span class="w"&gt; &lt;/span&gt;verilator&lt;span class="w"&gt; &lt;/span&gt;--dump-netlist-graph&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;netlist.graph&lt;span class="w"&gt; &lt;/span&gt;picorv32.v&lt;span class="w"&gt; &lt;/span&gt;--top-module&lt;span class="w"&gt; &lt;/span&gt;picorv32_axi
...&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# lots of warnings&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here a modified version of &lt;a href="https://www.veripool.org/wiki/verilator"&gt;Verilator&lt;/a&gt;
is used to generate the netlist. (Note that &lt;code&gt;netlist-paths&lt;/code&gt; can invoke
Verilator but with the &lt;code&gt;--compile&lt;/code&gt; option, but PicoRV32 requires Verilator&amp;#8217;s
&lt;code&gt;--top-module&lt;/code&gt; option. It may be useful to extend the command line arguments to
allow arbitrary arguments to be passed to Verilator.) Verilator performs the
generation by traversing the abstract syntax tree of the design and constructs
a graph of dependencies between variables and combinatorial logical constructs,
and identifies variables corresponding to sequential elements (flip&amp;nbsp;flops).&lt;/p&gt;
&lt;p&gt;The graph structure/netlist is written to file in &lt;a href="https://graphviz.gitlab.io/_pages/doc/info/lang.html"&gt;Graphviz dot
format&lt;/a&gt;, and specifies
the vertices, with their type and source code location information, and the
edges between them. The analysis tool reads this file and reports on the
connectivity between&amp;nbsp;points.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;digraph&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;netlist&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;n0&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ASSIGNW&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;picorv32.v:2539&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;n1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;PORT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;OUTPUT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;picorv32_axi.trace_data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;picorv32.v:2539&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;PORT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;OUTPUT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;trace_data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;picorv32.v:2539&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;n3&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ASSIGNW&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;picorv32.v:2538&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;n4&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;PORT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;OUTPUT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;picorv32_axi.trace_valid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;picorv32.v:2538&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;n0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;n1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;n0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;n3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;n5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;n4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;n3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;n6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;n8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A vertex in this netlist corresponds to the occurrence of a variable (ie a
symbolic name). A given symbolic name can appear in different vertices,
corresponding to its different uses. To see this, the option &lt;code&gt;--dumpnames&lt;/code&gt;
prints the names, types and directions of all the vertices in the graph. This
output can be piped through &lt;code&gt;grep&lt;/code&gt; to locate particular signals. For example,
to see all the output&amp;nbsp;variables:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;netlist-paths&lt;span class="w"&gt; &lt;/span&gt;netlist.graph&lt;span class="w"&gt; &lt;/span&gt;--dumpnames&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;OUTPUT
PORT&lt;span class="w"&gt; &lt;/span&gt;OUTPUT&lt;span class="w"&gt; &lt;/span&gt;eoi
PORT&lt;span class="w"&gt; &lt;/span&gt;OUTPUT&lt;span class="w"&gt; &lt;/span&gt;mem_axi_araddr
PORT&lt;span class="w"&gt; &lt;/span&gt;OUTPUT&lt;span class="w"&gt; &lt;/span&gt;mem_axi_arprot
PORT&lt;span class="w"&gt; &lt;/span&gt;OUTPUT&lt;span class="w"&gt; &lt;/span&gt;mem_axi_arvalid
PORT&lt;span class="w"&gt; &lt;/span&gt;OUTPUT&lt;span class="w"&gt; &lt;/span&gt;mem_axi_awaddr
PORT&lt;span class="w"&gt; &lt;/span&gt;OUTPUT&lt;span class="w"&gt; &lt;/span&gt;mem_axi_awprot
PORT&lt;span class="w"&gt; &lt;/span&gt;OUTPUT&lt;span class="w"&gt; &lt;/span&gt;mem_axi_awvalid
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or all the&amp;nbsp;registers:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;netlist-paths&lt;span class="w"&gt; &lt;/span&gt;netlist.graph&lt;span class="w"&gt; &lt;/span&gt;--dumpnames&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;REG_DST
REG_DST&lt;span class="w"&gt; &lt;/span&gt;picorv32_axi.axi_adapter.ack_arvalid
REG_DST&lt;span class="w"&gt; &lt;/span&gt;picorv32_axi.axi_adapter.ack_awvalid
REG_DST&lt;span class="w"&gt; &lt;/span&gt;picorv32_axi.axi_adapter.ack_wvalid
REG_DST&lt;span class="w"&gt; &lt;/span&gt;picorv32_axi.axi_adapter.xfer_done
REG_DST&lt;span class="w"&gt; &lt;/span&gt;picorv32_axi.picorv32_core.alu_out_0_q
REG_DST&lt;span class="w"&gt; &lt;/span&gt;picorv32_axi.picorv32_core.alu_out_q
REG_DST&lt;span class="w"&gt; &lt;/span&gt;picorv32_axi.picorv32_core.alu_wait
REG_DST&lt;span class="w"&gt; &lt;/span&gt;picorv32_axi.picorv32_core.alu_wait_2
REG_DST&lt;span class="w"&gt; &lt;/span&gt;picorv32_axi.picorv32_core.cached_ascii_instr
REG_DST&lt;span class="w"&gt; &lt;/span&gt;picorv32_axi.picorv32_core.cached_insn_imm
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, the &lt;code&gt;REG_DST&lt;/code&gt; type corresponds to a variable that is the left-hand side
of a non-blocking assignment &lt;code&gt;&amp;lt;=&lt;/code&gt;. Conversely, the &lt;code&gt;REG_SRC&lt;/code&gt; type is where the
same variable appears in an expression on the right-hand side. In general,
there can only be a single &lt;code&gt;REG_DST&lt;/code&gt; node with a specific name, whereas there
can be multiple &lt;code&gt;REG_SRC&lt;/code&gt; nodes with a specific names. The same is true with
&lt;code&gt;VAR&lt;/code&gt;, &lt;code&gt;WIRE&lt;/code&gt; and &lt;code&gt;PORT&lt;/code&gt; types. When using this tool, I&amp;#8217;ve found it
straight forward to locate the variables I need using &lt;code&gt;grep&lt;/code&gt; with
&lt;code&gt;--dumpnames&lt;/code&gt;, but there may be more sophisticated approaches that could be&amp;nbsp;implemented.&lt;/p&gt;
&lt;p&gt;A start or end point can be specified as any named vertex, which is anything
except logic statements. You can query if a path exists between two&amp;nbsp;points:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;netlist-paths&lt;span class="w"&gt; &lt;/span&gt;netlist.graph&lt;span class="w"&gt; &lt;/span&gt;--start&lt;span class="w"&gt; &lt;/span&gt;picorv32_axi.picorv32_core.cpu_state&lt;span class="w"&gt; &lt;/span&gt;--end&lt;span class="w"&gt; &lt;/span&gt;picorv32_axi.picorv32_core.dbg_valid_insn
&lt;span class="w"&gt;  &lt;/span&gt;picorv32_axi.picorv32_core.cpu_state&lt;span class="w"&gt;        &lt;/span&gt;REG_SRC&lt;span class="w"&gt;         &lt;/span&gt;picorv32.v:1160
&lt;span class="w"&gt;  &lt;/span&gt;ASSIGNW&lt;span class="w"&gt;                                     &lt;/span&gt;LOGIC&lt;span class="w"&gt;           &lt;/span&gt;picorv32.v:1373
&lt;span class="w"&gt;  &lt;/span&gt;picorv32_axi.picorv32_core.launch_next_insn&lt;span class="w"&gt; &lt;/span&gt;WIRE&lt;span class="w"&gt;            &lt;/span&gt;picorv32.v:750
&lt;span class="w"&gt;  &lt;/span&gt;ALWAYS&lt;span class="w"&gt;                                      &lt;/span&gt;LOGIC&lt;span class="w"&gt;           &lt;/span&gt;picorv32.v:760
&lt;span class="w"&gt;  &lt;/span&gt;picorv32_axi.picorv32_core.dbg_valid_insn&lt;span class="w"&gt;   &lt;/span&gt;REG_DST&lt;span class="w"&gt;         &lt;/span&gt;picorv32.v:751
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this path report, it lists the sequential dependencies from the start point
to the end point, through a sequence of zero or more combinatorial logic
statements/blocks, with each dependency corresponding to a variable.
Importantly, the filenames and line numbers given reference the original source&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;Since there may be multiple vertices with a name matching the specified start
and end points, the register version is preferentially located (&lt;code&gt;SRC&lt;/code&gt; for a
start point and &lt;code&gt;DST&lt;/code&gt; for an end point), followed by &lt;code&gt;VAR&lt;/code&gt;, &lt;code&gt;WIRE&lt;/code&gt; and
&lt;code&gt;PORT&lt;/code&gt; types.&lt;/p&gt;
&lt;p&gt;You can also query all the paths that fan out from a particular start&amp;nbsp;point:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;netlist-paths netlist.graph --start picorv32_axi.picorv32_core.cpu_state
Path 1
  picorv32_axi.picorv32_core.cpu_state        REG_SRC         picorv32.v:1160
  ASSIGNW                                     LOGIC           picorv32.v:1373
  picorv32_axi.picorv32_core.launch_next_insn WIRE            picorv32.v:750
  ALWAYS                                      LOGIC           picorv32.v:760
  picorv32_axi.picorv32_core.q_ascii_instr    REG_DST         picorv32.v:742

Path 2
  picorv32_axi.picorv32_core.cpu_state        REG_SRC         picorv32.v:1160
  ASSIGNW                                     LOGIC           picorv32.v:1373
  picorv32_axi.picorv32_core.launch_next_insn WIRE            picorv32.v:750
  ALWAYS                                      LOGIC           picorv32.v:760
  picorv32_axi.picorv32_core.q_insn_imm       REG_DST         picorv32.v:743

Path 3
  picorv32_axi.picorv32_core.cpu_state        REG_SRC         picorv32.v:1160
  ASSIGNW                                     LOGIC           picorv32.v:1373
  picorv32_axi.picorv32_core.launch_next_insn WIRE            picorv32.v:750
  ALWAYS                                      LOGIC           picorv32.v:760
  picorv32_axi.picorv32_core.q_insn_opcode    REG_DST         picorv32.v:744
...
Found 223 path(s)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or query all the paths that fan in to a particular end&amp;nbsp;point:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;netlist-paths&lt;span class="w"&gt; &lt;/span&gt;netlist.graph&lt;span class="w"&gt; &lt;/span&gt;--end&lt;span class="w"&gt; &lt;/span&gt;picorv32_axi.picorv32_core.dbg_valid_insn
Path&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;picorv32_axi.picorv32_core.trap&lt;span class="w"&gt;           &lt;/span&gt;REG_SRC&lt;span class="w"&gt;         &lt;/span&gt;picorv32.v:86
&lt;span class="w"&gt;  &lt;/span&gt;ALWAYS&lt;span class="w"&gt;                                    &lt;/span&gt;LOGIC&lt;span class="w"&gt;           &lt;/span&gt;picorv32.v:760
&lt;span class="w"&gt;  &lt;/span&gt;picorv32_axi.picorv32_core.dbg_valid_insn&lt;span class="w"&gt; &lt;/span&gt;REG_DST&lt;span class="w"&gt;         &lt;/span&gt;picorv32.v:751

Path&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;picorv32_axi.picorv32_core.instr_lui&lt;span class="w"&gt;       &lt;/span&gt;REG_SRC&lt;span class="w"&gt;         &lt;/span&gt;picorv32.v:630
&lt;span class="w"&gt;  &lt;/span&gt;ALWAYS&lt;span class="w"&gt;                                     &lt;/span&gt;LOGIC&lt;span class="w"&gt;           &lt;/span&gt;picorv32.v:684
&lt;span class="w"&gt;  &lt;/span&gt;ASSIGN&lt;span class="w"&gt;                                     &lt;/span&gt;LOGIC&lt;span class="w"&gt;           &lt;/span&gt;picorv32.v:685
&lt;span class="w"&gt;  &lt;/span&gt;picorv32_axi.picorv32_core.new_ascii_instr&lt;span class="w"&gt; &lt;/span&gt;VAR&lt;span class="w"&gt;             &lt;/span&gt;picorv32.v:673
&lt;span class="w"&gt;  &lt;/span&gt;ALWAYS&lt;span class="w"&gt;                                     &lt;/span&gt;LOGIC&lt;span class="w"&gt;           &lt;/span&gt;picorv32.v:760
&lt;span class="w"&gt;  &lt;/span&gt;picorv32_axi.picorv32_core.dbg_valid_insn&lt;span class="w"&gt;  &lt;/span&gt;REG_DST&lt;span class="w"&gt;         &lt;/span&gt;picorv32.v:751

Path&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;picorv32_axi.picorv32_core.instr_auipc&lt;span class="w"&gt;     &lt;/span&gt;REG_SRC&lt;span class="w"&gt;         &lt;/span&gt;picorv32.v:630
&lt;span class="w"&gt;  &lt;/span&gt;ALWAYS&lt;span class="w"&gt;                                     &lt;/span&gt;LOGIC&lt;span class="w"&gt;           &lt;/span&gt;picorv32.v:684
&lt;span class="w"&gt;  &lt;/span&gt;ASSIGN&lt;span class="w"&gt;                                     &lt;/span&gt;LOGIC&lt;span class="w"&gt;           &lt;/span&gt;picorv32.v:685
&lt;span class="w"&gt;  &lt;/span&gt;picorv32_axi.picorv32_core.new_ascii_instr&lt;span class="w"&gt; &lt;/span&gt;VAR&lt;span class="w"&gt;             &lt;/span&gt;picorv32.v:673
&lt;span class="w"&gt;  &lt;/span&gt;ALWAYS&lt;span class="w"&gt;                                     &lt;/span&gt;LOGIC&lt;span class="w"&gt;           &lt;/span&gt;picorv32.v:760
&lt;span class="w"&gt;  &lt;/span&gt;picorv32_axi.picorv32_core.dbg_valid_insn&lt;span class="w"&gt;  &lt;/span&gt;REG_DST&lt;span class="w"&gt;         &lt;/span&gt;picorv32.v:751
...
Found&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;74&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;paths
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since the number of paths between any two points in an arbitrary graph grows
exponentially with the size of the graph, it infeasible to report all paths
between two points, so this tool simply looks for any path that satisfies those
constraints. (An option is provided to enumerate all paths, but it can only be
used on small&amp;nbsp;netlists.)&lt;/p&gt;
&lt;p&gt;When trying to match a particular path in a physical build it it useful to
further constrain the search to force it to match the same path. This can be
done by specifying through points with the &lt;code&gt;--through&lt;/code&gt; option. Each through
argument is taken in order as an intermediate point in the path. The same
search algorithm is used on each pair of points to build up a composite report.
For&amp;nbsp;example:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;netlist-paths&lt;span class="w"&gt; &lt;/span&gt;netlist.graph&lt;span class="w"&gt; &lt;/span&gt;--start&lt;span class="w"&gt; &lt;/span&gt;picorv32_axi.axi_adapter.ack_wvalid&lt;span class="w"&gt; &lt;/span&gt;--through&lt;span class="w"&gt; &lt;/span&gt;picorv32_axi.axi_adapter.mem_axi_wvalid&lt;span class="w"&gt; &lt;/span&gt;--end&lt;span class="w"&gt; &lt;/span&gt;mem_axi_wvalid
&lt;span class="w"&gt;  &lt;/span&gt;picorv32_axi.axi_adapter.ack_wvalid&lt;span class="w"&gt;     &lt;/span&gt;REG_SRC&lt;span class="w"&gt;         &lt;/span&gt;picorv32.v:2700
&lt;span class="w"&gt;  &lt;/span&gt;ASSIGNW&lt;span class="w"&gt;                                 &lt;/span&gt;LOGIC&lt;span class="w"&gt;           &lt;/span&gt;picorv32.v:2711
&lt;span class="w"&gt;  &lt;/span&gt;picorv32_axi.axi_adapter.mem_axi_wvalid&lt;span class="w"&gt; &lt;/span&gt;PORT&lt;span class="w"&gt;            &lt;/span&gt;picorv32.v:2671
&lt;span class="w"&gt;  &lt;/span&gt;ASSIGNW&lt;span class="w"&gt;                                 &lt;/span&gt;LOGIC&lt;span class="w"&gt;           &lt;/span&gt;picorv32.v:2556
&lt;span class="w"&gt;  &lt;/span&gt;picorv32_axi.mem_axi_wvalid&lt;span class="w"&gt;             &lt;/span&gt;PORT&lt;span class="w"&gt;            &lt;/span&gt;picorv32.v:2484
&lt;span class="w"&gt;  &lt;/span&gt;ASSIGNW&lt;span class="w"&gt;                                 &lt;/span&gt;LOGIC&lt;span class="w"&gt;           &lt;/span&gt;picorv32.v:2484
&lt;span class="w"&gt;  &lt;/span&gt;mem_axi_wvalid&lt;span class="w"&gt;                          &lt;/span&gt;PORT&lt;span class="w"&gt;            &lt;/span&gt;picorv32.v:2484
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Implementation&lt;/h2&gt;
&lt;p&gt;To avoid writing a preprocessor and parser for Verilog, I modified
&lt;a href="https://www.veripool.org/wiki/verilator"&gt;Verilator&lt;/a&gt; to obtain the netlist of a
Verilog design. (I would have liked to use
&lt;a href="http://www.clifford.at/yosys/"&gt;Yosys&lt;/a&gt; to do this because it provides a neat
interface to adding custom &lt;span class="caps"&gt;AST&lt;/span&gt; passes, but unfortunately it does not currently
support enough of the SystemVerilog standard.) The Verilator modifications add
a new &lt;span class="caps"&gt;AST&lt;/span&gt; visitor, which walks the tree after it has been processed, for
example to propagate constants and inline tasks and&amp;nbsp;modules.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;netlist-paths&lt;/code&gt; tool is implemented in C++ and makes use of the Boost Graph
Library. Paths are identified using the &lt;code&gt;boost::depth_first_search&lt;/code&gt; algorithm.
The all-fan-out report enumerates paths to all the end points in a depth-first
traversal of the graph, the fan-in variant uses the &lt;code&gt;boost::reverse_graph&lt;/code&gt;
adaptor and performs the same algorithm. Properties are associated with
vertices in the graph using a &lt;code&gt;boost::dynamic_property_map&lt;/code&gt;. I put together a
&lt;a href="https://github.com/jameshanlon/boost_graph_example"&gt;simple example program&lt;/a&gt; to
illustrate how to use these maps (plus some other library features) since I
found there were some subtleties in getting this to&amp;nbsp;work.&lt;/p&gt;
&lt;h2&gt;Improvements&lt;/h2&gt;
&lt;p&gt;There are many ways this tool could be extended and improved. Here are a few&amp;nbsp;ideas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Provide additional flexibility to allow a choice between multiple matching start, through or end&amp;nbsp;points.&lt;/li&gt;
&lt;li&gt;Provide a mechanism to search for high fan-out&amp;nbsp;variables.&lt;/li&gt;
&lt;li&gt;Provide a mechanism to seach for the longest paths in the&amp;nbsp;graph.&lt;/li&gt;
&lt;li&gt;Provide a mechanism to assert there is no logical path between two sub&amp;nbsp;modules.&lt;/li&gt;
&lt;li&gt;Detect and report timing&amp;nbsp;loops.&lt;/li&gt;
&lt;li&gt;Add options to &lt;code&gt;dumpnames&lt;/code&gt; to filter by type or&amp;nbsp;direction.&lt;/li&gt;
&lt;li&gt;Add options to the querys to select only internal paths or only input/output&amp;nbsp;paths.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jameshanlon/netlist-paths"&gt;Netlist paths tool on&amp;nbsp;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jameshanlon/verilator"&gt;Modified Verilator on&amp;nbsp;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jameshanlon/boost_graph_example"&gt;Boost Graph Library&amp;nbsp;example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="notes"></category><category term="computing"></category><category term="microelectronics"></category><category term="verilog"></category></entry><entry><title>Vim commandÂ composition</title><link href="http://jameswhanlon.com/vim-command-composition.html" rel="alternate"></link><published>2018-08-23T00:00:00+02:00</published><updated>2018-08-23T00:00:00+02:00</updated><author><name>James W. Hanlon</name></author><id>tag:jameswhanlon.com,2018-08-23:/vim-command-composition.html</id><summary type="html">&lt;p&gt;The rules for composing Vim&amp;#8217;s motions and&amp;nbsp;operators.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;ve been using Vim for a long time and I&amp;#8217;m familiar with many of its commands
but I&amp;#8217;ve never had a good understanding of the underlying components of
commands and their composition. Although there are many good Vim
&lt;a href="#references"&gt;references&lt;/a&gt;, I felt that I was still not seeing the full picture.
So, to try and dig a little deeper and educate myself, I&amp;#8217;ve put together this
reference, which details a subset of the command language. The approach I&amp;#8217;ve
taken was inspired by the grammar rules outlined in &lt;a href="https://takac.github.io/2013/01/30/vim-grammar/"&gt;this blog
post&lt;/a&gt;, and should be useful
for anyone who is familiar with&amp;nbsp;Vim.&lt;/p&gt;
&lt;p&gt;A Vim command can be constructed from different rules, and below each rule is
specified with a &lt;a href="https://en.wikipedia.org/wiki/Extended_Backus-Naur_form"&gt;&lt;span class="caps"&gt;EBNF&lt;/span&gt;-style
syntax&lt;/a&gt;, where &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt; is
another rule. &lt;code&gt;{...}&lt;/code&gt; represents some key presses, &lt;code&gt;|&lt;/code&gt; is an alternative and
&lt;code&gt;[...]&lt;/code&gt; is an optional component. Be warned that
since there are many special cases to Vim commands and I&amp;#8217;ve not checked all the
combinations, some of the rules below may yield invalid compositions! As such,
these rules are better viewed as a way of remembering commands. For an
exhaustive treatment of the command language, please check the &lt;a href="https://www.vim.org/docs.php"&gt;Vim
documentation&lt;/a&gt;, or use the &lt;code&gt;:help&lt;/code&gt; tags that I&amp;#8217;ve&amp;nbsp;given.&lt;/p&gt;
&lt;h2&gt;Motions&lt;/h2&gt;
&lt;p&gt;Motions change the position of the cursor and can be combined with a count to
repeat the&amp;nbsp;motion.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;motion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;motion&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nv"&gt;command&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;motion&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;2fx&lt;/code&gt; - move to the second right-hand occurrence of &lt;code&gt;x&lt;/code&gt; in the line&amp;nbsp;(inclusive)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2Tx&lt;/code&gt; - move to the second left-hand occurrence of &lt;code&gt;x&lt;/code&gt; in the line&amp;nbsp;(exclusive)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;w&lt;/code&gt; - move to the next&amp;nbsp;word&lt;/li&gt;
&lt;li&gt;&lt;code&gt;10j&lt;/code&gt; or &lt;code&gt;10_&lt;/code&gt; - move down 10&amp;nbsp;lines&lt;/li&gt;
&lt;li&gt;&lt;code&gt;10k&lt;/code&gt; - move up 10&amp;nbsp;lines&lt;/li&gt;
&lt;li&gt;&lt;code&gt;6w&lt;/code&gt; - move to start of the sixth word&amp;nbsp;forwards&lt;/li&gt;
&lt;li&gt;&lt;code&gt;6E&lt;/code&gt; - move to end of sixth word&amp;nbsp;forwards&lt;/li&gt;
&lt;li&gt;&lt;code&gt;4b&lt;/code&gt; - move to start of the fourth word&amp;nbsp;backwards&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2{&lt;/code&gt; - move two paragraphs&amp;nbsp;down&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3/foo&lt;/code&gt; - move to the third occurrence of &lt;code&gt;foo&lt;/code&gt; later in the&amp;nbsp;buffer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3?foo&lt;/code&gt; - move to the third occurrence of &lt;code&gt;foo&lt;/code&gt; earlier in the&amp;nbsp;buffer&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Text&amp;nbsp;objects&lt;/h2&gt;
&lt;p&gt;Text objects are a collection of characters relative to the position of the
cursor. Compared to motions, text objects on a whole object, regardless of the
specific cursor position. The &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;i&lt;/code&gt; modifiers augment text objects,
specifying whether the surrounding context should be included. The context may
be whitespace or delimiting&amp;nbsp;characters.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;object&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;modifier&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;object&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;aw&lt;/code&gt; - around word (includes surrounding&amp;nbsp;whitespace)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iw&lt;/code&gt; - inner word (excludes surrounding&amp;nbsp;whitespace)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aW&lt;/code&gt; - around &lt;span class="caps"&gt;WORD&lt;/span&gt; (where word is delimited by&amp;nbsp;whitespace)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;as&lt;/code&gt; - around&amp;nbsp;sentence&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is&lt;/code&gt; - inner&amp;nbsp;sentence&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ap&lt;/code&gt; - around&amp;nbsp;paragraph&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip&lt;/code&gt; - inner&amp;nbsp;paragraph&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a'&lt;/code&gt; - a single-quoted&amp;nbsp;string&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i'&lt;/code&gt; - inside a single-quoted&amp;nbsp;string&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a(&lt;/code&gt; = &lt;code&gt;a)&lt;/code&gt;= &lt;code&gt;ab&lt;/code&gt; - a parenthesised block, from &lt;code&gt;(&lt;/code&gt; to &lt;code&gt;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i(&lt;/code&gt; = &lt;code&gt;i)&lt;/code&gt;= &lt;code&gt;ib&lt;/code&gt; - inside a parenthesised block, contents of &lt;code&gt;(...)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a&amp;lt;&lt;/code&gt; = &lt;code&gt;a&amp;gt;&lt;/code&gt; - a tag, from &lt;code&gt;&amp;lt;&lt;/code&gt; to &lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;at&lt;/code&gt; - around tag block, including matching start and end tags &lt;code&gt;&amp;lt;tag&amp;gt;...&amp;lt;/tag&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;it&lt;/code&gt; - inside tag block, excluding&amp;nbsp;tags&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aB&lt;/code&gt; = &lt;code&gt;a{&lt;/code&gt; = &lt;code&gt;a}&lt;/code&gt; - around a &lt;code&gt;{...}&lt;/code&gt; block&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iB&lt;/code&gt; = &lt;code&gt;i{&lt;/code&gt; = &lt;code&gt;i}&lt;/code&gt; - inside a &lt;code&gt;{...}&lt;/code&gt; block&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Operators on text&amp;nbsp;objects&lt;/h2&gt;
&lt;p&gt;Operators can be applied to text objects. In some circumstances, a count can be
applied to the text object to repeat its&amp;nbsp;effect.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;command&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;modifier&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;object&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cw&lt;/code&gt;  - change word from&amp;nbsp;cursor&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ciw&lt;/code&gt; - change word under&amp;nbsp;cursor&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dw&lt;/code&gt; - delete until end of&amp;nbsp;word&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5dw&lt;/code&gt; = &lt;code&gt;d5w&lt;/code&gt; - delete until end of right-hand sixth&amp;nbsp;word&lt;/li&gt;
&lt;li&gt;&lt;code&gt;caw&lt;/code&gt; - change around word under&amp;nbsp;cursor&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2d3w&lt;/code&gt; - delete six&amp;nbsp;words&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5gUw&lt;/code&gt; - make the next five words&amp;nbsp;uppercase&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dgg&lt;/code&gt; - delete lines from cursor to beginning of&amp;nbsp;buffer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dG&lt;/code&gt; - delete lines from cursor to end of&amp;nbsp;buffer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3d_&lt;/code&gt; - delete three&amp;nbsp;lines&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c$&lt;/code&gt; - change until end of&amp;nbsp;line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y_&lt;/code&gt; = &lt;code&gt;yy&lt;/code&gt; = &lt;code&gt;Y&lt;/code&gt; - yank the&amp;nbsp;line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c_&lt;/code&gt; = &lt;code&gt;cc&lt;/code&gt; = &lt;code&gt;C&lt;/code&gt; - change the&amp;nbsp;line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gUap&lt;/code&gt; - make paragraph&amp;nbsp;uppercase&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gqap&lt;/code&gt; - format paragraph text to &lt;code&gt;textwidth&lt;/code&gt; line&amp;nbsp;length&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dit&lt;/code&gt; - delete text between tags &lt;code&gt;&amp;lt;tag&amp;gt;&amp;lt;/tag&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dat&lt;/code&gt; - delete tag&amp;nbsp;block&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yi"&lt;/code&gt; - yank text in &lt;code&gt;"..."&lt;/code&gt; block&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yi&amp;lt;&lt;/code&gt; - yank text in &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt; block&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yiB&lt;/code&gt; - yank text in &lt;code&gt;{...}&lt;/code&gt; block&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yaB&lt;/code&gt; - yank whole &lt;code&gt;{...}&lt;/code&gt; block&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Operators on&amp;nbsp;motions&lt;/h2&gt;
&lt;p&gt;A motion can be applied after an operator to apply the operator on the text
that was moved&amp;nbsp;over.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;command&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;motion&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dl&lt;/code&gt; = &lt;code&gt;x&lt;/code&gt; - delete next&amp;nbsp;character&lt;/li&gt;
&lt;li&gt;&lt;code&gt;db&lt;/code&gt; - delete backwards to the start of a&amp;nbsp;word&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dtx&lt;/code&gt; - delete until &lt;code&gt;x&lt;/code&gt; character in line&amp;nbsp;(exclusive)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dfx&lt;/code&gt; - delete until &lt;code&gt;x&lt;/code&gt; character in line&amp;nbsp;(inclusive)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d/foo&lt;/code&gt; - delete from cursor to next occurrence of &lt;code&gt;foo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d3/foo&lt;/code&gt; - delete from cursor until the third occurrence of &lt;code&gt;foo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c$&lt;/code&gt; = &lt;code&gt;C&lt;/code&gt; - change until end of&amp;nbsp;line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d$&lt;/code&gt; = &lt;code&gt;D&lt;/code&gt; - delete until end of&amp;nbsp;line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d0&lt;/code&gt; - delete until beginning of&amp;nbsp;line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d^&lt;/code&gt; - delete until first non-blank character in&amp;nbsp;line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c{&lt;/code&gt; - change from current line to beginning of&amp;nbsp;paragraph&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gU}&lt;/code&gt; - make paragraph&amp;nbsp;uppercase&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c{&lt;/code&gt; - change paragraph (same as &lt;code&gt;cap&lt;/code&gt; operator-text&amp;nbsp;object)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;}&lt;/code&gt; - indent&amp;nbsp;paragraph&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y%&lt;/code&gt; - yank the entire &lt;code&gt;{...}&lt;/code&gt; block&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cgg&lt;/code&gt; - change lines from cursor to top of&amp;nbsp;buffer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ggdG&lt;/code&gt; - delete contents of&amp;nbsp;buffer&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Duplicate&amp;nbsp;operators&lt;/h2&gt;
&lt;p&gt;Operators applied twice affect the entire line, a synonym for &lt;code&gt;&amp;lt;operator&amp;gt;_&lt;/code&gt;,&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;command&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dd&lt;/code&gt; = &lt;code&gt;d_&lt;/code&gt; - delete&amp;nbsp;line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cc&lt;/code&gt; = &lt;code&gt;c_&lt;/code&gt; - change&amp;nbsp;line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yy&lt;/code&gt; = &lt;code&gt;y_&lt;/code&gt; - yank&amp;nbsp;line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; = &lt;code&gt;&amp;gt;_&lt;/code&gt; = &lt;code&gt;&amp;gt;l&lt;/code&gt; - indent&amp;nbsp;line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; = &lt;code&gt;&amp;lt;_&lt;/code&gt; = &lt;code&gt;&amp;gt;l&lt;/code&gt; - unindent&amp;nbsp;line&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note: duplication does not apply to &lt;code&gt;~&lt;/code&gt; or two-character&amp;nbsp;operators.&lt;/p&gt;
&lt;h2&gt;Aliases&lt;/h2&gt;
&lt;p&gt;Some commonly-used commands have&amp;nbsp;aliases.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; = &lt;code&gt;dl&lt;/code&gt; - delete next&amp;nbsp;character&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C&lt;/code&gt; = &lt;code&gt;c$&lt;/code&gt; - change until the end of the&amp;nbsp;line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;D&lt;/code&gt; = &lt;code&gt;d$&lt;/code&gt; - delete until the end of the&amp;nbsp;line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Y&lt;/code&gt; = &lt;code&gt;yy&lt;/code&gt; - yank the&amp;nbsp;line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;S&lt;/code&gt; = &lt;code&gt;cc&lt;/code&gt; - change the&amp;nbsp;line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A&lt;/code&gt; = &lt;code&gt;$a&lt;/code&gt; - append text to end of the&amp;nbsp;line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; = &lt;code&gt;cl&lt;/code&gt; - substitute character (delete and&amp;nbsp;insert)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;S&lt;/code&gt; = &lt;code&gt;cc&lt;/code&gt; - substitute&amp;nbsp;line&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Filtering&lt;/h2&gt;
&lt;p&gt;Text lines can be filtered through an external program (see &lt;code&gt;:help filter&lt;/code&gt;).&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;command&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;motion&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Examples, using some basic utilities found on Unix&amp;nbsp;platforms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;!8jsort&lt;/code&gt; - sort the next 8&amp;nbsp;lines&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!apsort&lt;/code&gt; - sort lines in&amp;nbsp;paragraph&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!apwc -l&lt;/code&gt; - replace paragraph with word&amp;nbsp;count&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!apfmt -s&lt;/code&gt; - collapse whitespace in paragraph into single&amp;nbsp;spaces&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!apfmt -c&lt;/code&gt; - centre lines in&amp;nbsp;paragraph&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!i(grep foo&lt;/code&gt; - remove all lines in &lt;code&gt;(...)&lt;/code&gt; block that don&amp;#8217;t contain &lt;code&gt;foo&lt;/code&gt;
  (similar to the Ex command &lt;code&gt;:%v/foo/d&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gg!Gsort&lt;/code&gt; - sort all lines in&amp;nbsp;buffer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gg!Guniq -c&lt;/code&gt; - remove all duplicate lines in buffer and prefix remaining with duplicate&amp;nbsp;counts&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Visual&amp;nbsp;selection&lt;/h2&gt;
&lt;p&gt;Visual selection, character-wise &lt;code&gt;v&lt;/code&gt;, line-wise &lt;code&gt;V&lt;/code&gt; or block-wise &lt;code&gt;Ctrl+v&lt;/code&gt; (all
referred to below by &lt;code&gt;{visual}&lt;/code&gt;, see &lt;code&gt;:help visual-start&lt;/code&gt;), followed by a
motion or text object can be used to specify a character range. An operator can
then be used to transform the text. Note the operators &lt;code&gt;gu&lt;/code&gt;, &lt;code&gt;gU&lt;/code&gt; and &lt;code&gt;g@&lt;/code&gt;
can&amp;#8217;t be used in visual mode and text objects in visual mode, however, there
are additional ones that can (see &lt;code&gt;:help visual-operators&lt;/code&gt;). A visual block is
created by entering a visual mode, then providing a motion or text object to
set the selection, or alternatively by any sequence of movement commands
(referred to by &lt;code&gt;{move-around}&lt;/code&gt;).&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;visual&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;block&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;visual&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;move&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;around&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;visual&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;motion&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;visual&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nv"&gt;command&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;visual&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;block&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;visual&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;block&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;visual&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;visual&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;block&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vtxd&lt;/code&gt; = &lt;code&gt;dtx&lt;/code&gt; - delete until &lt;code&gt;x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vt.rx&lt;/code&gt; - replace all characters with &lt;code&gt;x&lt;/code&gt; until &lt;code&gt;.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v3as~&lt;/code&gt; - make next three sentences&amp;nbsp;uppercase&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vapU&lt;/code&gt; - make paragraph&amp;nbsp;uppercase&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vapd&lt;/code&gt; - delete&amp;nbsp;paragraph&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{Ctrl+v}{move-around}sfoo{Esc}&lt;/code&gt; - replace each line of blockwise selection with &lt;code&gt;foo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{Ctrl+v}{move-around}Ifoo{Esc}&lt;/code&gt; - prepend &lt;code&gt;foo&lt;/code&gt; to each line of blockwise&amp;nbsp;selection&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{Ctrl+v}{move-around}Afoo{Esc}&lt;/code&gt; - append &lt;code&gt;foo&lt;/code&gt; to each line of blockwise&amp;nbsp;selection&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vap!sort&lt;/code&gt; - sort the lines of the current&amp;nbsp;paragraph&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vap!fmt&lt;/code&gt; - use the &lt;code&gt;fmt&lt;/code&gt; command-line tool to format selection into
  lines of 75 characters (similar to the &lt;code&gt;gqap&lt;/code&gt; command)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ggvG!indent&lt;/code&gt; - use the &lt;code&gt;indent&lt;/code&gt; command-line tool to apply automatic
  indentation all lines of a C-code&amp;nbsp;buffer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{visual}J&lt;/code&gt; - join the highlighted lines on the current&amp;nbsp;line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{visual}gJ&lt;/code&gt; - join the highlighted lines on the current line (removing&amp;nbsp;whitespace)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other command&amp;nbsp;combinations&lt;/h2&gt;
&lt;p&gt;Beyond the above rules, there are further command keys and more restricted
combination with motions, operators and text&amp;nbsp;objects.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;.&lt;/code&gt; command repeats the last change that was&amp;nbsp;made.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;command&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;db.&lt;/code&gt; - delete the previous two&amp;nbsp;words&lt;/li&gt;
&lt;li&gt;&lt;code&gt;db4.&lt;/code&gt; - delete the previous five&amp;nbsp;words&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{insert text...}&lt;/code&gt; then &lt;code&gt;/{pattern}.&lt;/code&gt; - insert text again before next text matching &lt;code&gt;{pattern}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;gn&lt;/code&gt; and &lt;code&gt;gN&lt;/code&gt; motions can be used with operators to move between matching
search&amp;nbsp;patterns.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;command&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;gn&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;gN&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cgn&lt;/code&gt; - change the next search&amp;nbsp;match&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3cgn&lt;/code&gt; - change the third search&amp;nbsp;match&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cgN&lt;/code&gt; - change the previous search&amp;nbsp;match&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are some other interesting and potentially useful commands that I&amp;#8217;ve found
in the Vim&amp;nbsp;help:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gf&lt;/code&gt; - goto file (when cursor is on a valid filesystem&amp;nbsp;path)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gF&lt;/code&gt; - goto file and line number (line number following&amp;nbsp;path)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;J&lt;/code&gt; - Join the current line with the next one (with space in&amp;nbsp;between)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gJ&lt;/code&gt; - Join the current line with the next one (without space in&amp;nbsp;between)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3J&lt;/code&gt; - join the next three lines on the current line (removing&amp;nbsp;indent)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3gJ&lt;/code&gt; - join the next three lines on the current&amp;nbsp;line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gv&lt;/code&gt; - reselect previous visual&amp;nbsp;area&lt;/li&gt;
&lt;li&gt;&lt;code&gt;g~~&lt;/code&gt; = &lt;code&gt;g~g~&lt;/code&gt; - switch case of&amp;nbsp;line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gUU&lt;/code&gt; = &lt;code&gt;gUgU&lt;/code&gt; - make line&amp;nbsp;uppercase&lt;/li&gt;
&lt;li&gt;&lt;code&gt;guu&lt;/code&gt; = &lt;code&gt;gugu&lt;/code&gt; - make line&amp;nbsp;lowercase&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r{char}&lt;/code&gt; - replace character under cursor with &lt;code&gt;{char}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;10r{char}&lt;/code&gt; - replace the next 10 characters with &lt;code&gt;{char}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Summary of&amp;nbsp;rules&lt;/h2&gt;
&lt;div class="container"&gt;
&lt;div class="row"&gt;
&lt;div class="col-sm"&gt;
  &lt;h2&gt;Motions&lt;/h2&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;motion-keys&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;p&gt;References: &lt;code&gt;:help motion&lt;/code&gt;
    &lt;code&gt;:help various-motions&lt;/code&gt;&lt;/p&gt;
&lt;table class="table table-striped table-sm"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;th&gt;Effect&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;l&lt;/code&gt;,&lt;code&gt;h&lt;/code&gt;,&lt;code&gt;j&lt;/code&gt;,&lt;code&gt;k&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;right, left, down, up&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;w&lt;/code&gt; / &lt;code&gt;W&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;start of next word / start of next &lt;span class="caps"&gt;WORD&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;b&lt;/code&gt; / &lt;code&gt;B&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;start of pevious word / start of previous &lt;span class="caps"&gt;WORD&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;e&lt;/code&gt; / &lt;code&gt;E&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;end of next word / end of next &lt;span class="caps"&gt;WORD&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;0&lt;/code&gt; / &lt;code&gt;$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;start / end of line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;^&lt;/code&gt; / &lt;code&gt;g_&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;first / last non-blank character in line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;{&lt;/code&gt; / &lt;code&gt;}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;start / end of paragraph&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;t{char}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;till - move to next character (inclusive)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;f{char}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;find - move to next character (exclusive)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T{char}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;till - move to previous character (inclusive)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;F{char}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;find - move to previous character (exclusive)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;move to matching character (default pairs: &lt;code&gt;()&lt;/code&gt;, &lt;code&gt;{}&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[(&lt;/code&gt;, &lt;code&gt;[)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;move to matching parenthesis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[{&lt;/code&gt;, &lt;code&gt;[}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;move to matching curly brace&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/{pattern}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;search forward (must be followed by &lt;code&gt;{CR}&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;?{pattern}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;search backwards (must be followed by &lt;code&gt;{CR}&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;gg&lt;/code&gt; / &lt;code&gt;G&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;move to first / last line in buffer&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;div class="col-sm"&gt;
  &lt;h2&gt;Operators&lt;/h2&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;operators&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;p&gt;Reference: &lt;code&gt;:help operator&lt;/code&gt;&lt;/p&gt;
&lt;table class="table table-striped table-sm"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Operator&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;change&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;delete&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;yank&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;~&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;swap case (or &lt;code&gt;g~&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;shift right (always linewise)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;shift left (always linewise)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;gu&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;make lowercase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;gU&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;make uppercase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;gq&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;format text&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;g@&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;apply function (set by &lt;code&gt;operatorfunc&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;  &lt;h2&gt;Visual&amp;nbsp;operators&lt;/h2&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;visual-operators&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;p&gt;References: &lt;code&gt;:help visual-operators&lt;/code&gt;&lt;/p&gt;
&lt;table class="table table-striped table-sm"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Operator&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;r{char}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;replace every character in selection with {char}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;substitute (inserted text replicated on each line for blockwise)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;J&lt;/code&gt; / &lt;code&gt;gJ&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;join / join (remove whitespace)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;put (replace selection with contents of register)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;make uppercase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;u&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;make lowercase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;I&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;insert (prepend, only on blockwise selection)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;A&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;insert (append, only on blockwise selection)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="row"&gt;
&lt;div class="col-sm"&gt;
  &lt;h2&gt;Text&amp;nbsp;objects&lt;/h2&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;text-object-keys&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;p&gt;References: &lt;code&gt;:help text-objects&lt;/code&gt;, &lt;code&gt;:help objects&lt;/code&gt;&lt;/p&gt;
&lt;table class="table table-striped table-sm"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Text object&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;word (delimited by non-keyword characters, see &lt;code&gt;:help iskeyword&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;W&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;WORD&lt;/span&gt; (delimited by whitespace, includes empy line)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;sentence&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;paragraph&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;tag&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;text block between square brackets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;{&lt;/code&gt;, &lt;code&gt;}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;text block between curly braces&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(&lt;/code&gt;, &lt;code&gt;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;text block between parethesises&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;'&lt;/code&gt;, &lt;code&gt;'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;text block between single quotes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;"&lt;/code&gt;, &lt;code&gt;"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;text block between double quotes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;text block between angle braces&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;`&lt;/code&gt;, &lt;code&gt;`&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;text block between back ticks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;text block between &lt;code&gt;(&lt;/code&gt; and &lt;code&gt;)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;B&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;text block between &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;div class="col-sm"&gt;
  &lt;h2&gt;Modifiers&lt;/h2&gt;
  &lt;p&gt;&lt;code&gt;&amp;lt;modifiers&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;p&gt;References: &lt;code&gt;:help text-objects&lt;/code&gt;&lt;/p&gt;
&lt;table class="table table-striped table-sm"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Movement&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;a or around&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;i&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;inner&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;object&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;modifier&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;object&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;modifier&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;object&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nv"&gt;motion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;motion&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nv"&gt;visual&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;block&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;visual&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;move&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;around&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;visual&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;motion&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;visual&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nv"&gt;command&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;motion&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;motion&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;motion&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;visual&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;block&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;visual&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;block&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;visual&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;visual&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;block&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;gn&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;gN&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Some random&amp;nbsp;commands&lt;/h2&gt;
&lt;p&gt;Just for fun, here are some random commands using the above rules to show the
variety of actions you can perform. Some might not make sense or not work, but
they might give you some&amp;nbsp;ideas.&lt;/p&gt;
&lt;div class="container"&gt;
  &lt;div class="row"&gt;
    &lt;div class="col-sm-3"&gt;&lt;h3&gt;Motions&lt;/h3&gt;&lt;/div&gt;
    &lt;div class="col-sm-3"&gt;&lt;h3&gt;Text&amp;nbsp;objects&lt;/h3&gt;&lt;/div&gt;
    &lt;div class="col-sm-3"&gt;&lt;h3&gt;Operators on text&amp;nbsp;objects&lt;/h3&gt;&lt;/div&gt;
    &lt;div class="col-sm-3"&gt;&lt;h3&gt;Operators on&amp;nbsp;motions&lt;/h3&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="row"&gt;
    &lt;div class="col-sm-3"&gt;
      &lt;div class="row"&gt;
    &lt;div class="col-4"&gt;&lt;code&gt;F{ch}&lt;/code&gt;&lt;br&gt;&lt;code&gt;/{pat}&lt;/code&gt;&lt;br&gt;&lt;code&gt;[}&lt;/code&gt;&lt;br&gt;&lt;code&gt;t{ch}&lt;/code&gt;&lt;br&gt;&lt;code&gt;9B&lt;/code&gt;&lt;br&gt;&lt;code&gt;3/{pat}&lt;/code&gt;&lt;br&gt;&lt;code&gt;b&lt;/code&gt;&lt;br&gt;&lt;code&gt;T{ch}&lt;/code&gt;&lt;br&gt;&lt;code&gt;{&lt;/code&gt;&lt;br&gt;&lt;code&gt;j&lt;/code&gt;&lt;br&gt;&lt;code&gt;w&lt;/code&gt;&lt;br&gt;&lt;code&gt;[}&lt;/code&gt;&lt;br&gt;&lt;code&gt;l&lt;/code&gt;&lt;br&gt;&lt;code&gt;g_&lt;/code&gt;&lt;br&gt;&lt;code&gt;5[(&lt;/code&gt;&lt;br&gt;&lt;code&gt;%&lt;/code&gt;&lt;br&gt;&lt;code&gt;{&lt;/code&gt;&lt;br&gt;&lt;code&gt;0F{ch}&lt;/code&gt;&lt;br&gt;&lt;code&gt;w&lt;/code&gt;&lt;br&gt;&lt;code&gt;T{ch}&lt;/code&gt;&lt;br&gt;&lt;code&gt;[}&lt;/code&gt;&lt;br&gt;&lt;code&gt;10&lt;/code&gt;&lt;br&gt;&lt;code&gt;k&lt;/code&gt;&lt;br&gt;&lt;code&gt;[}&lt;/code&gt;&lt;br&gt;&lt;code&gt;%&lt;/code&gt;&lt;br&gt;&lt;code&gt;1G&lt;/code&gt;&lt;br&gt;&lt;code&gt;[{&lt;/code&gt;&lt;br&gt;&lt;code&gt;5k&lt;/code&gt;&lt;br&gt;&lt;code&gt;0&lt;/code&gt;&lt;br&gt;&lt;code&gt;/{pat}&lt;/code&gt;&lt;br&gt;&lt;code&gt;1/{pat}&lt;/code&gt;&lt;br&gt;&lt;code&gt;2l&lt;/code&gt;&lt;/div&gt;
    &lt;div class="col-4"&gt;&lt;code&gt;?{pat}&lt;/code&gt;&lt;br&gt;&lt;code&gt;g_&lt;/code&gt;&lt;br&gt;&lt;code&gt;1h&lt;/code&gt;&lt;br&gt;&lt;code&gt;h&lt;/code&gt;&lt;br&gt;&lt;code&gt;t{ch}&lt;/code&gt;&lt;br&gt;&lt;code&gt;4F{ch}&lt;/code&gt;&lt;br&gt;&lt;code&gt;0$&lt;/code&gt;&lt;br&gt;&lt;code&gt;t{ch}&lt;/code&gt;&lt;br&gt;&lt;code&gt;$&lt;/code&gt;&lt;br&gt;&lt;code&gt;B&lt;/code&gt;&lt;br&gt;&lt;code&gt;l&lt;/code&gt;&lt;br&gt;&lt;code&gt;g_&lt;/code&gt;&lt;br&gt;&lt;code&gt;^&lt;/code&gt;&lt;br&gt;&lt;code&gt;1{&lt;/code&gt;&lt;br&gt;&lt;code&gt;2?{pat}&lt;/code&gt;&lt;br&gt;&lt;code&gt;G&lt;/code&gt;&lt;br&gt;&lt;code&gt;^&lt;/code&gt;&lt;br&gt;&lt;code&gt;k&lt;/code&gt;&lt;br&gt;&lt;code&gt;1[(&lt;/code&gt;&lt;br&gt;&lt;code&gt;$&lt;/code&gt;&lt;br&gt;&lt;code&gt;w&lt;/code&gt;&lt;br&gt;&lt;code&gt;h&lt;/code&gt;&lt;br&gt;&lt;code&gt;^&lt;/code&gt;&lt;br&gt;&lt;code&gt;/{pat}&lt;/code&gt;&lt;br&gt;&lt;code&gt;gg&lt;/code&gt;&lt;br&gt;&lt;code&gt;w&lt;/code&gt;&lt;br&gt;&lt;code&gt;g_&lt;/code&gt;&lt;br&gt;&lt;code&gt;1e&lt;/code&gt;&lt;br&gt;&lt;code&gt;[)&lt;/code&gt;&lt;br&gt;&lt;code&gt;t{ch}&lt;/code&gt;&lt;br&gt;&lt;code&gt;6/{pat}&lt;/code&gt;&lt;br&gt;&lt;code&gt;t{ch}&lt;/code&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="col-sm-3"&gt;
      &lt;div class="row"&gt;
    &lt;div class="col-4"&gt;&lt;code&gt;iw&lt;/code&gt;&lt;br&gt;&lt;code&gt;ab&lt;/code&gt;&lt;br&gt;&lt;code&gt;a}&lt;/code&gt;&lt;br&gt;&lt;code&gt;aw&lt;/code&gt;&lt;br&gt;&lt;code&gt;it&lt;/code&gt;&lt;br&gt;&lt;code&gt;i&amp;lt;&lt;/code&gt;&lt;br&gt;&lt;code&gt;i[&lt;/code&gt;&lt;br&gt;&lt;code&gt;i'&lt;/code&gt;&lt;br&gt;&lt;code&gt;aw&lt;/code&gt;&lt;br&gt;&lt;code&gt;i"&lt;/code&gt;&lt;br&gt;&lt;code&gt;a"&lt;/code&gt;&lt;br&gt;&lt;code&gt;ip&lt;/code&gt;&lt;br&gt;&lt;code&gt;iB&lt;/code&gt;&lt;br&gt;&lt;code&gt;i[&lt;/code&gt;&lt;br&gt;&lt;code&gt;a]&lt;/code&gt;&lt;br&gt;&lt;code&gt;a&amp;gt;&lt;/code&gt;&lt;br&gt;&lt;code&gt;iW&lt;/code&gt;&lt;br&gt;&lt;code&gt;i'&lt;/code&gt;&lt;br&gt;&lt;code&gt;a{&lt;/code&gt;&lt;br&gt;&lt;code&gt;i'&lt;/code&gt;&lt;br&gt;&lt;code&gt;a[&lt;/code&gt;&lt;br&gt;&lt;code&gt;a&amp;gt;&lt;/code&gt;&lt;br&gt;&lt;code&gt;a"&lt;/code&gt;&lt;br&gt;&lt;code&gt;i'&lt;/code&gt;&lt;br&gt;&lt;code&gt;i{&lt;/code&gt;&lt;br&gt;&lt;code&gt;i)&lt;/code&gt;&lt;br&gt;&lt;code&gt;i)&lt;/code&gt;&lt;br&gt;&lt;code&gt;it&lt;/code&gt;&lt;br&gt;&lt;code&gt;ab&lt;/code&gt;&lt;br&gt;&lt;code&gt;i&amp;gt;&lt;/code&gt;&lt;br&gt;&lt;code&gt;iW&lt;/code&gt;&lt;br&gt;&lt;code&gt;a'&lt;/code&gt;&lt;/div&gt;
    &lt;div class="col-4"&gt;&lt;code&gt;at&lt;/code&gt;&lt;br&gt;&lt;code&gt;i{&lt;/code&gt;&lt;br&gt;&lt;code&gt;is&lt;/code&gt;&lt;br&gt;&lt;code&gt;iW&lt;/code&gt;&lt;br&gt;&lt;code&gt;aW&lt;/code&gt;&lt;br&gt;&lt;code&gt;a&amp;gt;&lt;/code&gt;&lt;br&gt;&lt;code&gt;i[&lt;/code&gt;&lt;br&gt;&lt;code&gt;a{&lt;/code&gt;&lt;br&gt;&lt;code&gt;i'&lt;/code&gt;&lt;br&gt;&lt;code&gt;aB&lt;/code&gt;&lt;br&gt;&lt;code&gt;ip&lt;/code&gt;&lt;br&gt;&lt;code&gt;a}&lt;/code&gt;&lt;br&gt;&lt;code&gt;a]&lt;/code&gt;&lt;br&gt;&lt;code&gt;i"&lt;/code&gt;&lt;br&gt;&lt;code&gt;a&amp;lt;&lt;/code&gt;&lt;br&gt;&lt;code&gt;iW&lt;/code&gt;&lt;br&gt;&lt;code&gt;ib&lt;/code&gt;&lt;br&gt;&lt;code&gt;a(&lt;/code&gt;&lt;br&gt;&lt;code&gt;iw&lt;/code&gt;&lt;br&gt;&lt;code&gt;i"&lt;/code&gt;&lt;br&gt;&lt;code&gt;a{&lt;/code&gt;&lt;br&gt;&lt;code&gt;a&amp;lt;&lt;/code&gt;&lt;br&gt;&lt;code&gt;at&lt;/code&gt;&lt;br&gt;&lt;code&gt;a{&lt;/code&gt;&lt;br&gt;&lt;code&gt;ip&lt;/code&gt;&lt;br&gt;&lt;code&gt;a}&lt;/code&gt;&lt;br&gt;&lt;code&gt;a"&lt;/code&gt;&lt;br&gt;&lt;code&gt;as&lt;/code&gt;&lt;br&gt;&lt;code&gt;i)&lt;/code&gt;&lt;br&gt;&lt;code&gt;a{&lt;/code&gt;&lt;br&gt;&lt;code&gt;ap&lt;/code&gt;&lt;br&gt;&lt;code&gt;a&amp;lt;&lt;/code&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="col-sm-3"&gt;
      &lt;div class="row"&gt;
    &lt;div class="col-4"&gt;&lt;code&gt;&amp;lt;aW&lt;/code&gt;&lt;br&gt;&lt;code&gt;5gua{&lt;/code&gt;&lt;br&gt;&lt;code&gt;&amp;gt;4aW&lt;/code&gt;&lt;br&gt;&lt;code&gt;&amp;lt;at&lt;/code&gt;&lt;br&gt;&lt;code&gt;8&amp;gt;iW&lt;/code&gt;&lt;br&gt;&lt;code&gt;gUis&lt;/code&gt;&lt;br&gt;&lt;code&gt;&amp;gt;aW&lt;/code&gt;&lt;br&gt;&lt;code&gt;3g@aw&lt;/code&gt;&lt;br&gt;&lt;code&gt;g@i)&lt;/code&gt;&lt;br&gt;&lt;code&gt;&amp;lt;0ap&lt;/code&gt;&lt;br&gt;&lt;code&gt;~a(&lt;/code&gt;&lt;br&gt;&lt;code&gt;y5a]&lt;/code&gt;&lt;br&gt;&lt;code&gt;&amp;lt;0i)&lt;/code&gt;&lt;br&gt;&lt;code&gt;&amp;gt;3ip&lt;/code&gt;&lt;br&gt;&lt;code&gt;g@a}&lt;/code&gt;&lt;br&gt;&lt;code&gt;da"&lt;/code&gt;&lt;br&gt;&lt;code&gt;gUi[&lt;/code&gt;&lt;br&gt;&lt;code&gt;gq1i{&lt;/code&gt;&lt;br&gt;&lt;code&gt;&amp;lt;i]&lt;/code&gt;&lt;br&gt;&lt;code&gt;2g~ib&lt;/code&gt;&lt;br&gt;&lt;code&gt;g@i]&lt;/code&gt;&lt;br&gt;&lt;code&gt;gua`&lt;/code&gt;&lt;br&gt;&lt;code&gt;gUi(&lt;/code&gt;&lt;br&gt;&lt;code&gt;~8a}&lt;/code&gt;&lt;br&gt;&lt;code&gt;&amp;lt;is&lt;/code&gt;&lt;br&gt;&lt;code&gt;d7a[&lt;/code&gt;&lt;br&gt;&lt;code&gt;g~i(&lt;/code&gt;&lt;br&gt;&lt;code&gt;d5aw&lt;/code&gt;&lt;br&gt;&lt;code&gt;g~a}&lt;/code&gt;&lt;br&gt;&lt;code&gt;4diW&lt;/code&gt;&lt;br&gt;&lt;code&gt;gqiw&lt;/code&gt;&lt;br&gt;&lt;code&gt;&amp;lt;4i{&lt;/code&gt;&lt;/div&gt;
    &lt;div class="col-4"&gt;&lt;code&gt;&amp;lt;is&lt;/code&gt;&lt;br&gt;&lt;code&gt;g~iW&lt;/code&gt;&lt;br&gt;&lt;code&gt;daW&lt;/code&gt;&lt;br&gt;&lt;code&gt;&amp;lt;aB&lt;/code&gt;&lt;br&gt;&lt;code&gt;~a)&lt;/code&gt;&lt;br&gt;&lt;code&gt;c5a&amp;lt;&lt;/code&gt;&lt;br&gt;&lt;code&gt;gUaB&lt;/code&gt;&lt;br&gt;&lt;code&gt;ca}&lt;/code&gt;&lt;br&gt;&lt;code&gt;9g@as&lt;/code&gt;&lt;br&gt;&lt;code&gt;gu0a(&lt;/code&gt;&lt;br&gt;&lt;code&gt;~2a"&lt;/code&gt;&lt;br&gt;&lt;code&gt;ya&amp;lt;&lt;/code&gt;&lt;br&gt;&lt;code&gt;gUa'&lt;/code&gt;&lt;br&gt;&lt;code&gt;~9a`&lt;/code&gt;&lt;br&gt;&lt;code&gt;y2is&lt;/code&gt;&lt;br&gt;&lt;code&gt;gU2i)&lt;/code&gt;&lt;br&gt;&lt;code&gt;c4i'&lt;/code&gt;&lt;br&gt;&lt;code&gt;7ya"&lt;/code&gt;&lt;br&gt;&lt;code&gt;guaB&lt;/code&gt;&lt;br&gt;&lt;code&gt;0&amp;lt;i'&lt;/code&gt;&lt;br&gt;&lt;code&gt;c9i'&lt;/code&gt;&lt;br&gt;&lt;code&gt;guib&lt;/code&gt;&lt;br&gt;&lt;code&gt;g@a`&lt;/code&gt;&lt;br&gt;&lt;code&gt;9g@a&amp;gt;&lt;/code&gt;&lt;br&gt;&lt;code&gt;6c9ip&lt;/code&gt;&lt;br&gt;&lt;code&gt;2g@2ab&lt;/code&gt;&lt;br&gt;&lt;code&gt;yi[&lt;/code&gt;&lt;br&gt;&lt;code&gt;1c3iW&lt;/code&gt;&lt;br&gt;&lt;code&gt;c3ap&lt;/code&gt;&lt;br&gt;&lt;code&gt;8gUi`&lt;/code&gt;&lt;br&gt;&lt;code&gt;gqit&lt;/code&gt;&lt;br&gt;&lt;code&gt;g@i[&lt;/code&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="col-sm-3"&gt;
      &lt;div class="row"&gt;
    &lt;div class="col-4"&gt;&lt;code&gt;0d{&lt;/code&gt;&lt;br&gt;&lt;code&gt;9gu[)&lt;/code&gt;&lt;br&gt;&lt;code&gt;2yT{ch}&lt;/code&gt;&lt;br&gt;&lt;code&gt;8g~?{pat}&lt;/code&gt;&lt;br&gt;&lt;code&gt;2ce&lt;/code&gt;&lt;br&gt;&lt;code&gt;0gUb&lt;/code&gt;&lt;br&gt;&lt;code&gt;8g~j&lt;/code&gt;&lt;br&gt;&lt;code&gt;2c[(&lt;/code&gt;&lt;br&gt;&lt;code&gt;3&amp;gt;}&lt;/code&gt;&lt;br&gt;&lt;code&gt;3&amp;gt;gg&lt;/code&gt;&lt;br&gt;&lt;code&gt;6&amp;gt;G&lt;/code&gt;&lt;br&gt;&lt;code&gt;6~j&lt;/code&gt;&lt;br&gt;&lt;code&gt;0d[{&lt;/code&gt;&lt;br&gt;&lt;code&gt;8gU{&lt;/code&gt;&lt;br&gt;&lt;code&gt;4c[}&lt;/code&gt;&lt;br&gt;&lt;code&gt;4~h&lt;/code&gt;&lt;br&gt;&lt;code&gt;7&amp;lt;l&lt;/code&gt;&lt;br&gt;&lt;code&gt;7g@^&lt;/code&gt;&lt;br&gt;&lt;code&gt;6~/{pat}&lt;/code&gt;&lt;br&gt;&lt;code&gt;7yh&lt;/code&gt;&lt;br&gt;&lt;code&gt;3&amp;lt;}&lt;/code&gt;&lt;br&gt;&lt;code&gt;1&amp;lt;F{ch}&lt;/code&gt;&lt;br&gt;&lt;code&gt;4cw&lt;/code&gt;&lt;br&gt;&lt;code&gt;1gu[)&lt;/code&gt;&lt;br&gt;&lt;code&gt;0cB&lt;/code&gt;&lt;br&gt;&lt;code&gt;7g~[{&lt;/code&gt;&lt;br&gt;&lt;code&gt;3g~[{&lt;/code&gt;&lt;br&gt;&lt;code&gt;7yk&lt;/code&gt;&lt;br&gt;&lt;code&gt;3~k&lt;/code&gt;&lt;br&gt;&lt;code&gt;5g~[)&lt;/code&gt;&lt;br&gt;&lt;code&gt;5g@G&lt;/code&gt;&lt;br&gt;&lt;code&gt;8yt{ch}&lt;/code&gt;&lt;/div&gt;
    &lt;div class="col-4"&gt;&lt;code&gt;0g@e&lt;/code&gt;&lt;br&gt;&lt;code&gt;8&amp;gt;0&lt;/code&gt;&lt;br&gt;&lt;code&gt;6g~[(&lt;/code&gt;&lt;br&gt;&lt;code&gt;5dB&lt;/code&gt;&lt;br&gt;&lt;code&gt;9&amp;gt;T{ch}&lt;/code&gt;&lt;br&gt;&lt;code&gt;0gU{&lt;/code&gt;&lt;br&gt;&lt;code&gt;3&amp;lt;w&lt;/code&gt;&lt;br&gt;&lt;code&gt;1y?{pat}&lt;/code&gt;&lt;br&gt;&lt;code&gt;4g@[{&lt;/code&gt;&lt;br&gt;&lt;code&gt;5~b&lt;/code&gt;&lt;br&gt;&lt;code&gt;2&amp;lt;^&lt;/code&gt;&lt;br&gt;&lt;code&gt;4&amp;gt;w&lt;/code&gt;&lt;br&gt;&lt;code&gt;4y{&lt;/code&gt;&lt;br&gt;&lt;code&gt;1&amp;lt;e&lt;/code&gt;&lt;br&gt;&lt;code&gt;8c[}&lt;/code&gt;&lt;br&gt;&lt;code&gt;6c{&lt;/code&gt;&lt;br&gt;&lt;code&gt;2g~/{pat}&lt;/code&gt;&lt;br&gt;&lt;code&gt;3cj&lt;/code&gt;&lt;br&gt;&lt;code&gt;8cT{ch}&lt;/code&gt;&lt;br&gt;&lt;code&gt;3&amp;gt;%&lt;/code&gt;&lt;br&gt;&lt;code&gt;0&amp;lt;F{ch}&lt;/code&gt;&lt;br&gt;&lt;code&gt;4gqB&lt;/code&gt;&lt;br&gt;&lt;code&gt;3gqT{ch}&lt;/code&gt;&lt;br&gt;&lt;code&gt;3dk&lt;/code&gt;&lt;br&gt;&lt;code&gt;5&amp;gt;[)&lt;/code&gt;&lt;br&gt;&lt;code&gt;2gqh&lt;/code&gt;&lt;br&gt;&lt;code&gt;8ce&lt;/code&gt;&lt;br&gt;&lt;code&gt;7~gg&lt;/code&gt;&lt;br&gt;&lt;code&gt;3cl&lt;/code&gt;&lt;br&gt;&lt;code&gt;4c^&lt;/code&gt;&lt;br&gt;&lt;code&gt;4c%&lt;/code&gt;&lt;br&gt;&lt;code&gt;1gq$&lt;/code&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name="references" class="anchor"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;References/further&amp;nbsp;reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://danielmiessler.com/study/vim/"&gt;A vim Tutorial and&amp;nbsp;Primer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://zzapper.co.uk/vimtips.html"&gt;Best of Vim&amp;nbsp;Tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://yanpritzker.com/learn-to-speak-vim-verbs-nouns-and-modifiers-d7bfed1f6b2d"&gt;Learn to speak vimâââverbs, nouns, and&amp;nbsp;modifiers!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ismail.badawi.io/blog/2014/04/23/the-compositional-nature-of-vim/"&gt;The compositional nature of&amp;nbsp;Vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rc3.org/2012/05/12/the-grammar-of-vim/"&gt;The grammar of&amp;nbsp;Vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://michael.peopleofhonoronly.com/vim/"&gt;Vim Cheat Sheet for&amp;nbsp;Programmers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vim.rtorr.com/"&gt;Vim Cheat&amp;nbsp;Sheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fprintf.net/vimCheatSheet.html"&gt;Vim Commands Cheat&amp;nbsp;Sheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://takac.github.io/2013/01/30/vim-grammar/"&gt;Vim&amp;nbsp;Grammar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.carbonfive.com/2011/10/17/vim-text-objects-the-definitive-guidehttps://blog.carbonfive.com/2011/10/17/vim-text-objects-the-definitive-guide//https://blog.carbonfive.com/2011/10/17/vim-text-objects-the-definitive-guide/"&gt;Vim Text Objects: The Definitive&amp;nbsp;Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.vim.org/docs.php"&gt;Vim&amp;nbsp;documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://zmievski.org/files/talks/codeworks-2009/vim-for-php-programmers.pdf"&gt;Vim for &lt;span class="caps"&gt;PHP&lt;/span&gt;&amp;nbsp;programmers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim/1220118#1220118"&gt;Your problem with Vim is that you don&amp;#8217;t grok&amp;nbsp;vi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="notes"></category><category term="computing"></category><category term="vim"></category></entry><entry><title>Writing synthesizableÂ Verilog</title><link href="http://jameswhanlon.com/writing-synthesizable-verilog.html" rel="alternate"></link><published>2018-05-04T00:00:00+02:00</published><updated>2018-05-04T00:00:00+02:00</updated><author><name>James W. Hanlon</name></author><id>tag:jameswhanlon.com,2018-05-04:/writing-synthesizable-verilog.html</id><summary type="html">&lt;p&gt;Coding style for &lt;span class="caps"&gt;RTL&lt;/span&gt; design using Verilog /&amp;nbsp;SystemVerilog.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the last year, I&amp;#8217;ve started from scratch writing Verilog for hardware
design. Coming from a software background where I was mainly using C/C++ and
Python, it has been interesting to experience the contrasting philosophy and
mindset associated with using a language to describe hardware circuits. Much of
this is because Verilog provides little abstraction of hardware structures, and
only through disciplined/idiomatic use, can efficient designs be implemented. A
compounding issue is that complex hardware designs rely on a complex
ecosystem of proprietary&amp;nbsp;tooling.&lt;/p&gt;
&lt;p&gt;As I see it, there are three aspects to writing synthesizable Verilog code: the
particular features of the language to use, the style and idioms employed in
using those features, and the tooling support for a&amp;nbsp;design.&lt;/p&gt;
&lt;h3&gt;The&amp;nbsp;language&lt;/h3&gt;
&lt;p&gt;A subset of Verilog is used for specifying synthesizable circuits. Verilog
(which subsumed SystemVerilog as of the 2009 standardisation) is a unified
language, serving distinct purposes of modern hardware design. These&amp;nbsp;are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;circuit design/specification at different levels of abstraction:&lt;ul&gt;
&lt;li&gt;behavioural&lt;/li&gt;
&lt;li&gt;structural/register-transfer level (&lt;span class="caps"&gt;RTL&lt;/span&gt;)&lt;/li&gt;
&lt;li&gt;gate&lt;/li&gt;
&lt;li&gt;switch/transistor;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;testbench-based&amp;nbsp;verification;&lt;/li&gt;
&lt;li&gt;specification of formal properties;&amp;nbsp;and&lt;/li&gt;
&lt;li&gt;specification of functional&amp;nbsp;coverage.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The language provides specific features to serve each of these purposes. For
hardware synthesis, each level of abstraction uses a different language subset,
generally with fewer features at lower levels. Behavioural design uses the
procedural features of Verilog (with little regard for the structural
realisation of the circuit). &lt;span class="caps"&gt;RTL&lt;/span&gt; design specifies a circuit in terms of data
flow through registers and logical operations. Gate- and switch-level design
use only primitive operations. Typical modern hardware design uses a mix of
register-transfer- and gate-level&amp;nbsp;design.&lt;/p&gt;
&lt;p&gt;It is interesting to note however that the specification of Verilog does not
specify which features are synthesizable; that depends on the tooling&amp;nbsp;used.&lt;/p&gt;
&lt;h3&gt;Coding&amp;nbsp;style&lt;/h3&gt;
&lt;p&gt;Good coding style can help achieve better results in synthesis and simulation,
as well as producing code that contains less errors and is understandable,
reusable, and easily modifiable. Many of the observations in this note relate
to coding&amp;nbsp;style.&lt;/p&gt;
&lt;h3&gt;Tooling&lt;/h3&gt;
&lt;p&gt;There is a variety of standard tooling that is used with Verilog, and indeed
other hardware description languages (HDLs). This includes simulation, formal
analysis/model checking, formal equivalence checking, coverage analysis,
synthesis and physical layout, known collectively as electronic design
automation tools (&lt;span class="caps"&gt;EDA&lt;/span&gt;). Since standard &lt;span class="caps"&gt;EDA&lt;/span&gt; tooling is developed and maintained
as proprietary and closed-source software by companies like Cadence, Synopsis
and Mentor, the tooling options are&amp;nbsp;multiplied.&lt;/p&gt;
&lt;p&gt;In contrast with the open-source software ecosystems of programming languages
(for example), closed-source &lt;span class="caps"&gt;EDA&lt;/span&gt; tools do not benefit from the scale and
momentum of open projects, in the way that conventional software languages do,
with a one (or perhaps two) compilers and associated tooling such as debuggers
and program analysers. Such a fragmented ecosystem inevitably has a larger
variability in precisely how features of the Verilog language are implemented
and which features are not supported, particularly since there is no standard
synthesizable subset. Consequently, engineers using Verilog/HDLs with
proprietary &lt;span class="caps"&gt;EDA&lt;/span&gt; tools do so conservatively, sticking to a lowest common
denominator of the language features (within their chosen synthesizable
subset), to ensure compatibility and good&amp;nbsp;results.&lt;/p&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;This note records some interesting Verilog approaches and coding styles that
I&amp;#8217;ve observed that are used to interact well with the supporting tooling and to
produce good synthesis results. I&amp;#8217;ve written it as a note to myself, so it has
the caveats that it assumes a familiarity with Verilog programming and that
it&amp;#8217;s not a comprehensive guide to Verilog programming practices; some of the
references at the end will serve those purposes&amp;nbsp;better.&lt;/p&gt;
&lt;p&gt;My observations here are in the context of work on an implementation of a
pipelined processor, as such different approaches may be taken with other types
of electronic design. I also owe many of these insights to the guidance from my&amp;nbsp;colleagues.&lt;/p&gt;
&lt;p&gt;The remaining sections are as&amp;nbsp;follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#comb-logic"&gt;Combinatorial&amp;nbsp;logic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#seq-logic"&gt;Sequential&amp;nbsp;logic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#if-statements"&gt;If&amp;nbsp;statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#case-statements"&gt;Case&amp;nbsp;statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#expressions"&gt;Expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#code-structure"&gt;Code&amp;nbsp;structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#signal-naming"&gt;Signal&amp;nbsp;naming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="comb-logic" class="anchor"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Combinatorial&amp;nbsp;logic&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Use &lt;code&gt;always_comb&lt;/code&gt; instead of &lt;code&gt;always&lt;/code&gt; for combinatorial logic.&lt;/strong&gt; The
&lt;code&gt;always_comb&lt;/code&gt; procedure allows tools to check that it does not contain any
latched state and that no other processes assign to variables appearing on the
left-hand side. (It&amp;#8217;s worth checking the language reference manual (&lt;span class="caps"&gt;LRM&lt;/span&gt;) for
details of of the other differences.) The use of an &lt;code&gt;always_comb&lt;/code&gt; block is also
a much clearer indication of a combinatorial block that the use of &lt;code&gt;=&lt;/code&gt; as
opposed to &lt;code&gt;&amp;lt;=&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Always provide an initial value.&lt;/strong&gt; A latch will be inferred if there exists a
control-flow path in which a value of a signal is not set. Since &lt;code&gt;always_comb&lt;/code&gt;
specifically precludes the creation of latches, doing so will cause a warning
or error in simulation or synthesis. For example, the following code implies a
latch since there is no assignment to &lt;code&gt;foo&lt;/code&gt; when the condition is not&amp;nbsp;true.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;always_comb
  if (condition)
    foo = 1&amp;#39;b1;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Instead, always provide an initial&amp;nbsp;value:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;always_comb
  foo = 1&amp;#39;b0;
  if (condition)
    foo = 1&amp;#39;b1;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Avoid reading and writing a signal in an &lt;code&gt;always_comb&lt;/code&gt; block.&lt;/strong&gt; The
sensitivity list includes variables and expressions
but it excludes variables that occur on the right-hand side of assignments.
According to these restrictions, a variable that is read and written in a block
only causes the block to be reevaluated when the left-hand-side instance
changes. However, this style can cause some tools to warn of a
simulation-synthesis mismatch (presumably because they apply conservative rules
from older versions of the language&amp;nbsp;standard).&lt;/p&gt;
&lt;p&gt;In the following code, the block is triggered only when the the right-hand-side
&lt;code&gt;foo&lt;/code&gt; changes, rather than entering a feedback loop where it shifts&amp;nbsp;continuously:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;always_comb
  foo = foo &amp;lt;&amp;lt; 1;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To avoid reading and writing foo in the same block and possible warnings
from tools, a new signal can be&amp;nbsp;introduced:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;always_comb
  next_foo = foo &amp;lt;&amp;lt; 1;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Where possible extract logic into &lt;code&gt;assign&lt;/code&gt; statements.&lt;/strong&gt; Extract single
assignments to a variable into a separate &lt;code&gt;assign&lt;/code&gt; statement, where it is
possible to do so. This approach uses the features of Verilog consistently,
rather than using two mechanisms to achieve the same effect. This makes it
clear that an &lt;code&gt;always_comb&lt;/code&gt; is used to introduce sequentiality. Another
opportunity to move logic into separate &lt;code&gt;assign&lt;/code&gt; statements is with complex
expressions, such as the Boolean value for a conditional statement. Doing this
makes the control flow structure clearer, potentially provide opportunities for
reuse, and provides a separate signal when inspecting the signals in a waveform&amp;nbsp;viewer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Avoid unnecessary sequentiality.&lt;/strong&gt; It is easy to add statements to an
&lt;code&gt;always_comb&lt;/code&gt; to expand its behaviour, but this should only be done when there
are true sequential dependencies between statements in the block. In general,
parallelism should be exposed where ever possible. In the the following
example, the sequentiality is not necessary since the output &lt;code&gt;set_foo&lt;/code&gt; depends
independently on the various&amp;nbsp;conditions:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;always_comb&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;set_foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b0;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal_a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;signal_b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;set_foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b1;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal_c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;signal_d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;set_foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b1;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal_e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;set_foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b1;&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Clearly the sequencing of the conditions is not necessary, so the block could
be transformed to separate the logic for each condition into separate parallel
processes (extracting into &lt;code&gt;assign&lt;/code&gt; statements as per the rule above) and
explicitly combine them with the implied logical disjunction of the original&amp;nbsp;block:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;condition_a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;signal_a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;signal_b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;condition_b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;signal_c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;signal_d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;always_comb&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;set_foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b0;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;condition_a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;condition_b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;signal_e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;set_foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b1;&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is &lt;a href="https://www.veripool.org/papers/verilator_philips_internals.pdf"&gt;recommended&lt;/a&gt; by the author of Verilator to split up
&lt;code&gt;always&lt;/code&gt; blocks (combinatorial or sequential) so they contain as few
statements as possible. This allows Verilator the most freedom to order the
code to improve execution&amp;nbsp;performance.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Drive one signal per block.&lt;/strong&gt;
With complex control flow statements, it is tempting to use a single
&lt;code&gt;always_comb&lt;/code&gt; block to drive multiple signals. In some circumstances, there may
be good reasons to do this, such as when many output signals are used in a
similar way, but in the general case, splitting each signal into a separate
block makes it clear what logic involved in driving that signal, and as such,
facilitates further&amp;nbsp;simplification.&lt;/p&gt;
&lt;p&gt;An additional reason to avoid driving multiple signals per &lt;code&gt;always_comb&lt;/code&gt; block
is that &lt;a href="https://www.veripool.org/wiki/verilator"&gt;Verilator&lt;/a&gt; can infer a dependence between two signals,
leading to false circular combinatorial loops. In these cases, it issues an
&lt;a href="https://www.embecosm.com/appnotes/ean6/html/ch07s02s07.html"&gt;&lt;code&gt;UPOPTFLAT&lt;/code&gt; warning&lt;/a&gt; and cannot optimise the path, leading to
reduced emulation performance. Generally, fixing warnings pertaning to
unoptimisable constructs can improve Verilator&amp;#8217;s simulation performance by &lt;a href="https://www.veripool.org/papers/verilator_philips_internals.pdf"&gt;up
to a factor of two&lt;/a&gt;.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;always_comb&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;foo_q&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;bar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;bar_q&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;condition_a&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;condition_b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;condition_c&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;bar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;end&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;bar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;endcase&lt;/span&gt;
&lt;span class="nt"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above block could be split into two&amp;nbsp;processes:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;always_comb&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;foo_q&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;condition_a&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;condition_b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;endcase&lt;/span&gt;
&lt;span class="nt"&gt;end&lt;/span&gt;

&lt;span class="nt"&gt;always_comb&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;bar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;bar_q&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;condition_a&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;condition_b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;condition_b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="nt"&gt;bar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;bar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;endcase&lt;/span&gt;
&lt;span class="nt"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a name="seq-logic" class="anchor"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Sequential&amp;nbsp;logic&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Use &lt;code&gt;always_ff&lt;/code&gt; instead of &lt;code&gt;always&lt;/code&gt; for sequential logic&lt;/strong&gt; Similarly to
&lt;code&gt;always_comb&lt;/code&gt;, use of &lt;code&gt;always_ff&lt;/code&gt; permits tools to check that the procedure
only contains sequential logic behaviour (no timing controls and only one event
control) that variables on the left-hand side are not written to by any other
process, and makes clear the intent for sequential logic behaviour with
non-blocking assignments, &lt;code&gt;&amp;lt;=&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Avoid adding logic to non-blocking assignments.&lt;/strong&gt; This is primarily a matter
of taste, but having non-blocking assignments in &lt;code&gt;always_ff&lt;/code&gt; blocks only from a
logic signal name, rather than a logical expression, keeps the block simple and
limits combinatorial logic to &lt;code&gt;always_comb&lt;/code&gt; blocks and &lt;code&gt;assign&lt;/code&gt; statements
elsewhere in the module. Since synthesizable &lt;code&gt;always_ff&lt;/code&gt;s are additionally
restricted in that variables assigned to must have a reset condition of a
constant value, maintaining this clarity aids the programmer. Having separate
combinatorial blocks is also useful since it allows the logic signal driving a
flip-flop as well as the registered value to be apparent in a waveform viewer,
particularly when clock gates are&amp;nbsp;used.&lt;/p&gt;
&lt;p&gt;A typical pattern when implementing combinatorial logic and registers is to
define the set and clear conditions in an &lt;code&gt;always_comb&lt;/code&gt; and register the value
in an accompanying &lt;code&gt;always_ff&lt;/code&gt;, for&amp;nbsp;example:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;logic bit;
logic bit_q;

always_comb begin
  bit &amp;lt;= bit_q;
  if (set_condition)
    bit = 1&amp;#39;b1;
  if (clear_condition)
    bit = 1&amp;#39;b0;
end

always_ff @(posedge i_clk or posedge i_rst)
  if (i_rst)
    bit_q &amp;lt;= 1&amp;#39;b0;
  else
    bit_q &amp;lt;= bit;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a name="if-statements" class="anchor"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;If&amp;nbsp;statements&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Use &lt;code&gt;if&lt;/code&gt; qualifiers&lt;/strong&gt; for single &lt;code&gt;if&lt;/code&gt; and chained &lt;code&gt;if-else&lt;/code&gt;
statements for additional checking and guidance to&amp;nbsp;synthesis:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unique&lt;/code&gt; to ensure exactly one condition is matched and to indicate the
   conditions can be checked in&amp;nbsp;parallel.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unique0&lt;/code&gt; to ensure one or no conditions match and to indicate the
   conditions can be checked in&amp;nbsp;parallel.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;priority&lt;/code&gt; to ensure one condition is matched and to indicate the conditions
   should be evaluated in sequence and only the body of the first matching
   condition is&amp;nbsp;evaluated.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note&amp;nbsp;that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The use of an &lt;code&gt;else&lt;/code&gt; precludes violation reports for non-existing matches in
  &lt;code&gt;unique&lt;/code&gt; and &lt;code&gt;priority&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The default behaviour of a chained &lt;code&gt;if-else&lt;/code&gt; block is &lt;code&gt;priority&lt;/code&gt; but without
  any violation&amp;nbsp;checks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, when the conditions are mutually exclusive, so evaluation order is
not&amp;nbsp;important:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;unique if (condition_a) statement;
else if (condition_b) statement;
else if (condition_c) statement;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A violation warning is given in the above when no condition or multiple conditions are
selected. Changing to &lt;code&gt;unique0&lt;/code&gt; will only check for multiple conditions being&amp;nbsp;selected:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;unique0 if (condition_a) statement;
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And adding an &lt;code&gt;else&lt;/code&gt; will suppress violation warnings all&amp;nbsp;together:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;unique0 if (condition_a) statement;
...
else statement;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a name="case-statements" class="anchor"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Case&amp;nbsp;statements&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Use case qualifiers&lt;/strong&gt; for additional checking and guidance to&amp;nbsp;synthesis:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unique&lt;/code&gt; to ensure exactly one condition is matched and to indicate the
   conditions can be checked in&amp;nbsp;parallel.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unique0&lt;/code&gt; to ensure that one or no conditions are matched and to indicate
   the conditions can be checked in&amp;nbsp;parallel.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;priority&lt;/code&gt; to ensure one condition is matched and to indicate the conditions
   should be evaluated in sequence and only the body of the first matching case
   is&amp;nbsp;evaluated.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note&amp;nbsp;that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The use of a &lt;code&gt;default&lt;/code&gt; case precludes violation reports for non-existing matches in &lt;code&gt;unique&lt;/code&gt; and &lt;code&gt;priority&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The default behaviour of a &lt;code&gt;case&lt;/code&gt; statement is that of &lt;code&gt;priority&lt;/code&gt;, but without violation&amp;nbsp;checks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Use &lt;code&gt;case (...) inside&lt;/code&gt; instead of &lt;code&gt;casex&lt;/code&gt; or &lt;code&gt;casez&lt;/code&gt; for matching don&amp;#8217;t care
bits.&lt;/strong&gt; Since set-membership &lt;code&gt;case (...) inside&lt;/code&gt; matches &lt;code&gt;?&lt;/code&gt; don&amp;#8217;t care bits in
the same way &lt;code&gt;casez&lt;/code&gt; does, it should be used for clarity unless matching &lt;code&gt;x&lt;/code&gt;s
or &lt;code&gt;z&lt;/code&gt;s is specifically required. For&amp;nbsp;example:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;logic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;state_q&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;state_q&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;inside&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;4&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b000?: statement;&lt;/span&gt;
&lt;span class="s1"&gt;  4&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;b01&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;statement&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;4&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;b110&lt;/span&gt;&lt;span class="o"&gt;?:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;statement&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;endcase&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Use &lt;code&gt;case (1'b1)&lt;/code&gt; for one-hot conditions.&lt;/strong&gt; For&amp;nbsp;example:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;logic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;status_q&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;unique&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;b1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;inside&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;status_q&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;statement&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;status_q&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;statement&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;status_q&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;statement&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;endcase&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As an aside, it is convenient to define a one-hot encoding in a union type with
another struct to provide named access to each member. For example, &lt;code&gt;status_q&lt;/code&gt;
above could be redefined&amp;nbsp;as:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;typedef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;enum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;logic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;STATUS_START&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b001,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;STATUS_END&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b010,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;STATUS_ERROR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b100&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;status_enum_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;typedef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;union&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;packed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;status_enum_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;packed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;logic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;status_start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;logic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;status_end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;logic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;status_error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ctrl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;status_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;status_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;status_q&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Minimise the amount of logic inside a case statement.&lt;/strong&gt; The rationale for
this is similar to extracting logic from &lt;code&gt;always_comb&lt;/code&gt; blocks into &lt;code&gt;assign&lt;/code&gt;
statements where possible: to make the control flow structure clearer to the
designer and tooling, and to provide opportunities for reuse or
further simplification. For example, avoid nesting &lt;code&gt;case&lt;/code&gt; statements:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;status_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;status_q&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;status_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;next_status&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;logic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;mode_q&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;always_comb&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;next_status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;state_q&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;unique&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;case&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b1)&lt;/span&gt;
&lt;span class="s1"&gt;    status_q.ctrl.stat_start:&lt;/span&gt;
&lt;span class="s1"&gt;      unique0 case (mode) inside&lt;/span&gt;
&lt;span class="s1"&gt;        4&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;b000&lt;/span&gt;&lt;span class="o"&gt;?,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;4&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;b0&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nt"&gt;00&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;next_status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;STATUS_ERROR&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;next_status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;STATUS_END&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;endcase&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;status_q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ctrl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;status_end&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;status_q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ctrl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;status_error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;endcase&lt;/span&gt;
&lt;span class="nt"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And instead extract a nested &lt;code&gt;case&lt;/code&gt; into a separate process, providing a
result signal to use in the parent&amp;nbsp;case:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;status_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;status_q&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;status_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;next_status&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;status_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;start_next_status&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;logic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;mode_q&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;always_comb&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;start_next_status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;state_q&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;mode_q&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;inside&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;4&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b000?,&lt;/span&gt;
&lt;span class="s1"&gt;    4&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;b0&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nt"&gt;00&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;start_next_status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;STATUS_ERROR&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;start_next_status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;STATUS_END&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;endcase&lt;/span&gt;
&lt;span class="nt"&gt;end&lt;/span&gt;
&lt;span class="nt"&gt;always_comb&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;unique&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;case&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;b1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;status_q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ctrl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;status_start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;next_status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;start_next_status&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;status_q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ctrl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;status_end&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;status_q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ctrl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;status_error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;endcase&lt;/span&gt;
&lt;span class="nt"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Although this example seems simple, the &lt;code&gt;case&lt;/code&gt;-based logic driving a state
machine can quickly become&amp;nbsp;complicated.&lt;/p&gt;
&lt;p&gt;&lt;a name="expressions" class="anchor"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Expressions&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Make operator associativity explicit.&lt;/strong&gt; This is to avoid any ambiguity over
the ordering of operators. In particular, always bracket the condition of a
ternary/conditional expression (&lt;code&gt;?:&lt;/code&gt;), especially if you are nesting them,
since they associate left to right, and all other arithmetic and logical
operators associate right to&amp;nbsp;left.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;...&lt;/span&gt; = (a &amp;amp;&amp;amp; b) ||
      (c &amp;amp;&amp;amp; d)
&lt;span class="k"&gt;...&lt;/span&gt; = |(a[7:0] &amp;amp; b[7:0])
&lt;span class="k"&gt;...&lt;/span&gt; = valid &amp;amp;&amp;amp; (|a[3:0])
&lt;span class="k"&gt;...&lt;/span&gt; = (a == b) ? c : d
&lt;span class="k"&gt;...&lt;/span&gt; = cond_a              ? e1 :
      (cond_b &amp;amp;&amp;amp; !cond_c) ? e2 :
                            e3
&lt;span class="k"&gt;...&lt;/span&gt; = !(a[1:0] inside {2&amp;#39;b00, 2&amp;#39;b01}) &amp;amp;&amp;amp;
      ^(b[31:0])
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Make expression bit lengths explicit.&lt;/strong&gt; Although the Verilog language
specification provides rules for the extension of operands as inputs to binary
operations and assignments, these are complicated and not always obvious. In
particular, the extension is determined either by the operands or by the
context of the expression. Since there may be inconsistencies between tools,
particularly between simulation and synthesis, explicitly specifying expression
bit widths avoids these issues and makes the intent obvious. For example, pad
the result of a narrower expression for&amp;nbsp;assignment:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;logic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;31&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;logic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;7&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mh"&gt;24&lt;/span&gt;&lt;span class="mb"&gt;&amp;#39;b0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;}};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use an explicit type cast to specify the width of an intermediate expression
(note that integer literals are interpreted as 32-bit&amp;nbsp;integers):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;always_ff @(posedge i_clk or posedge i_rst)
  value_q &amp;lt;= i_rst ? value_t&amp;#39;(42) : value;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Special care should be taken with sub expressions, since their result length is
determined automatically by the width of the largest operand. For example,
without an explicit type cast to a 17-bit result around &lt;code&gt;a + b&lt;/code&gt;, the carry out
bit would be&amp;nbsp;lost:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;logic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;typedef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;logic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sum_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sum_t&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Capture carry out bits (even if they are unused) so the left-hand-side
assignment width matches the full width of the right hand side. Using a prefix
like &lt;code&gt;unused_&lt;/code&gt; makes the process of signing off any related warnings with the
downstream synthesis and physical build&amp;nbsp;simpler:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;unused_co&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Exceptions to this rule can be made for the common constants 0, 1 and -1 to be
specified as &lt;code&gt;integer&lt;/code&gt; literals, for&amp;nbsp;example:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Use &lt;code&gt;signed&lt;/code&gt; types for signed arithmetic,&lt;/strong&gt; and avoid implementing signed
arithmetic with manual sign extensions. Verilog uses the signedness of an
expression to determine how to extend its width (as well as inferring
signedness of parent expressions). Since the rules for sign determination is
similar to expression size but not the same, making it explicit avoids errors.
It also facilitates the use of optimised arithmetic implementations in
synthesis, particularly with multipliers. The following example (adapted from
&lt;a href="http://www.sutherland-hdl.com/papers/2006-SNUG-Boston_standard_gotchas_presentation.pdf"&gt;this presentation&lt;/a&gt;)
shows how these rules can be&amp;nbsp;confusing:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;logic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;signed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;logic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;signed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;logic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;ci&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;sum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;ci&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;Unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;addition&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;due&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;ci&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nt"&gt;sum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;signed&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(ci); // Signed addition, but ci == 1&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;b1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;will&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;be&lt;/span&gt;
&lt;span class="w"&gt;                           &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;sign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;extended&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;4&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b1111 or -1.&lt;/span&gt;
&lt;span class="s1"&gt;sum = a + b + signed&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;1&amp;#39;b0,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;ci&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;Safe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;sign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;extension&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that an operation is only considered signed if all of the operands are
signed, and that literal values can be specified as signed, for example:
&lt;code&gt;2'sb11&lt;/code&gt; is -1 in 2&amp;nbsp;bits.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Avoid splitting arithmetic&lt;/strong&gt; between statements or modules. This facilitates
optimisation during synthesis, for example, to choose or generate an optimised
adder implementation for the given set of operands and carry ins/outs. Instead&amp;nbsp;of:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;logic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;c&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;logic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;int_sum&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;int_sum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;unused_co,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;int_sum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;1&amp;#39;b0,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;c&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All of the arithmetic contributing to &lt;code&gt;sum&lt;/code&gt; can be written in a single&amp;nbsp;expression:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{unused_co, sum} = a + b + c;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a name="code-structure" class="anchor"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Code&amp;nbsp;structure&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Place parameters and variables at the top of their containing scope.&lt;/strong&gt; Doing
this gives and overview of the state and complexity of a block, particularly a
module. Declarations of combinatorial and sequential nets should be separated
into different sections for clarity. Note also that variables declared in
unnamed scopes are not accessible via the design hierarchy and will not appear
in wave viewers. To separate a module into sections without making signals
inaccessible, a named scope can be introduced. The following example of a
ripple-carry adder with registered outputs gives an idea of this style of&amp;nbsp;structuring:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ripple_carry_adder&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;parameter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p_WIDTH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;logic&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="n"&gt;i_clk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;logic&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="n"&gt;i_rst&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;logic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p_WIDTH-1:0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i_op1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;logic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p_WIDTH-1:0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i_op2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;logic&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="n"&gt;o_co&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;logic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p_WIDTH-1:0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;o_sum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Wires&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;logic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p_WIDTH-1:0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Registers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;logic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p_WIDTH-1:0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sum_q&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;logic&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="n"&gt;co_q&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Variables&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;genvar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b0;&lt;/span&gt;
&lt;span class="s1"&gt;  assign {o_co, o_sum} = {co_q, sum_q};&lt;/span&gt;

&lt;span class="s1"&gt;  // Named generate block for per-bit continuous assignments.&lt;/span&gt;
&lt;span class="s1"&gt;  for (i = 0; i &amp;lt; p_WIDTH; i = i + 1) begin: bit&lt;/span&gt;
&lt;span class="s1"&gt;    assign {carry[i+1], sum[i]} = i_op1[i] + i_op2[i] + carry[i];&lt;/span&gt;
&lt;span class="s1"&gt;  end&lt;/span&gt;

&lt;span class="s1"&gt;  always_ff @(posedge i_clk or posedge i_rst)&lt;/span&gt;
&lt;span class="s1"&gt;    if (i_rst) begin&lt;/span&gt;
&lt;span class="s1"&gt;      sum_q &amp;lt;= {p_WIDTH{1&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;b0&lt;/span&gt;&lt;span class="err"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;co_q&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;b0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;sum_q&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;co_q&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p_WIDTH-1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;endmodule&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Use &lt;code&gt;.*&lt;/code&gt; and &lt;code&gt;.name()&lt;/code&gt; syntax to simplify port lists in module
instantiations.&lt;/strong&gt; This reduces the amount of boilerplate code and thus the
scope for typing or copy-paste errors. &lt;code&gt;.*&lt;/code&gt; also provides additional checks: it
requires all nets be connected, it requires all nets to be the same size and it
prevents implicit nets from being inferred. Named connections with &lt;code&gt;.name()&lt;/code&gt; can
be used to add specific exceptions. For&amp;nbsp;example:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; (&lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="n"&gt;logic&lt;/span&gt; &lt;span class="n"&gt;i_clk&lt;/span&gt;,
            &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="n"&gt;logic&lt;/span&gt; &lt;span class="n"&gt;i_rst&lt;/span&gt;,
            &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="n"&gt;logic&lt;/span&gt; &lt;span class="nb"&gt;in&lt;/span&gt;,
            &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="n"&gt;logic&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;);
  ...
&lt;span class="n"&gt;endmodule&lt;/span&gt;

&lt;span class="n"&gt;u_module&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; (.*,
              .&lt;span class="nb"&gt;in&lt;/span&gt;(&lt;span class="nb"&gt;in&lt;/span&gt;),
              .&lt;span class="n"&gt;out&lt;/span&gt;(&lt;span class="n"&gt;out&lt;/span&gt;));
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Avoid logic in module instantiations.&lt;/strong&gt; By instantiating a module with a set
of named signals, it is easier to inspect the port hookups and the widths of
the signals for&amp;nbsp;correctness.&lt;/p&gt;
&lt;p&gt;&lt;a name="signal-naming" class="anchor"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Signal&amp;nbsp;naming&lt;/h2&gt;
&lt;p&gt;A strict approach to naming should be taken to make it easier to understand and
navigate a&amp;nbsp;design:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To make clear their relationship to the structure of a module&lt;/strong&gt;. Prefixes and
suffices can denote, for example, whether a signal is an input or output, the
pipeline stage it corresponds to and whether it is driven by logic or directly
from a flip-flop. The exact naming convention will be tailored to a project,
but here are some&amp;nbsp;examples:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;i_p0_operand&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.&lt;/span&gt;
&lt;span class="n"&gt;p1_state&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;machine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;p1_state_ns&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;state_clk&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;m1_sum_co_unused&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;An&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;unused&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;carryout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;an&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;addition&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;m2_result_ff&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;registered&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;driven&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;flip&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;flop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;o_x4_state&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;An&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;signal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;driven&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;To allow simple sorting and searching in wave viewer&lt;/strong&gt;. By using common
prefixes for related signals, sorting will place them together. Similarly,
common substrings are useful to filter a subset of signals over, for example to
select a set of registers or similar signals different in pipeline&amp;nbsp;stages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To be flattened sensibly by downstream tools&lt;/strong&gt;. It is typical for synthesis
to flatten the hierarchical structure of a Verilog design. Consequently
symbols names are derived from their place in the module hierarchy. A suitable
naming scheme really only requires consistency across a design. As an example,
a flip-flop clock pin might be named
&lt;code&gt;u_toplevel_u_submodule_p0_signal_q_reg_17_/CK&lt;/code&gt; corresponding to the register
&lt;code&gt;u_toplevel/u_submodule/p0_signal_q[17]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a name="summary" class="anchor"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Verilog is a large language with features supporting different purposes. It is
used as a standard in hardware design but its specification does not define a
synthesizable subset. Although there is a general consensus on which features
can be used for synthesis, the fine details are determined by the particular
&lt;span class="caps"&gt;EDA&lt;/span&gt; tooling flow used by a design team. Verilog is consequently used in a
conservative way for specifying synthesizable designs. The rules and rationale
given in this note outline some of the important aspects of a coding style for
hardware design. There are many more details of Verilog&amp;#8217;s features that are
relevant; the references below are a good place to find out&amp;nbsp;more.&lt;/p&gt;
&lt;p&gt;&lt;a name="refs" class="anchor"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;References/further&amp;nbsp;reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;IEEE&lt;/span&gt; Standard for SystemVerilog (&lt;span class="caps"&gt;IEEE&lt;/span&gt; 1800-2012 and&amp;nbsp;1800-2017).&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.sutherland-hdl.com/papers.html"&gt;Sutherland &lt;span class="caps"&gt;HDL&lt;/span&gt; papers&lt;/a&gt; on Verilog, in particular:&lt;ul&gt;
&lt;li&gt;Stuart Sutherland and Don Mills, Standard gotchas subtleties in the
  Verilog and SystemVerilog standards that every engineer should know. &lt;span class="caps"&gt;SNUG&lt;/span&gt; 2006.
  (&lt;a href="http://www.sutherland-hdl.com/papers/2006-SNUG-Boston_standard_gotchas_paper.pdf"&gt;&lt;span class="caps"&gt;PDF&lt;/span&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Stuart Sutherland, A Proposal for a Standard Synthesizable SystemVerilog Subset. DVCon 2006.
  (&lt;a href="http://www.sutherland-hdl.com/papers/2006-DVCon_SystemVerilog_synthesis_subset_paper.pdf"&gt;&lt;span class="caps"&gt;PDF&lt;/span&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Stuart Sutherland and Don Mills, Synthesizing SystemVerilog: Busting the
  myth that SystemVerilog is only for verification, &lt;span class="caps"&gt;SNUG&lt;/span&gt; 2013.
  (&lt;a href="http://www.sutherland-hdl.com/papers/2013-SNUG-SV_Synthesizable-SystemVerilog_paper.pdf"&gt;&lt;span class="caps"&gt;PDF&lt;/span&gt;&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Stuart Sutherland and Don Mills, Can my synthesis compiler do that? What &lt;span class="caps"&gt;ASIC&lt;/span&gt;
  and &lt;span class="caps"&gt;FPGA&lt;/span&gt; synthesis compilers support in the SystemVerilog-2012 standard, DVCon 2014
  (&lt;a href="http://www.sutherland-hdl.com/papers/2014-DVCon_ASIC-FPGA_SV_Synthesis_paper.pdf"&gt;&lt;span class="caps"&gt;PDF&lt;/span&gt;&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SystemVerilog&amp;#8217;s priority &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; unique - A Solution to Verilog&amp;#8217;s &amp;#8220;full_case&amp;#8221; &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; &amp;#8220;parallel_case&amp;#8221; Evil Twins!,
  Clifford E. Cummings, &lt;span class="caps"&gt;SNUG&lt;/span&gt; 2005
  (&lt;a href="http://www.sunburst-design.com/papers/CummingsSNUG2005Israel_SystemVerilog_UniquePriority.pdf"&gt;&lt;span class="caps"&gt;PDF&lt;/span&gt;&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Verilog &lt;span class="caps"&gt;HDL&lt;/span&gt; Coding, Semiconductor Reuse Standard, Freescale Semiconductor
  (&lt;a href="https://people.ece.cornell.edu/land/courses/ece5760/Verilog/FreescaleVerilog.pdf"&gt;&lt;span class="caps"&gt;PDF&lt;/span&gt;&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Complex Digital Systems, Synthesis, &lt;span class="caps"&gt;MIT&lt;/span&gt; &lt;span class="caps"&gt;OCW&lt;/span&gt;, 2005 (presentation slides,
  (&lt;a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-884-complex-digital-systems-spring-2005/lecture-notes/l05_synthesis.pdf"&gt;&lt;span class="caps"&gt;PDF&lt;/span&gt;&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;</content><category term="notes"></category><category term="computing"></category><category term="microelectronics"></category><category term="programming-languages"></category><category term="verilog"></category></entry><entry><title>Notes on testing random numberÂ generators</title><link href="http://jameswhanlon.com/notes-on-testing-random-number-generators.html" rel="alternate"></link><published>2017-04-05T00:00:00+02:00</published><updated>2017-04-05T00:00:00+02:00</updated><author><name>James W. Hanlon</name></author><id>tag:jameswhanlon.com,2017-04-05:/notes-on-testing-random-number-generators.html</id><summary type="html">&lt;p&gt;Using empirical statistical tests to determine the quality of&amp;nbsp;PRNGs.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I have been doing some work testing the quality of &lt;a href="https://en.wikipedia.org/wiki/Random_number_generator"&gt;random
number generators&lt;/a&gt;
(RNGs), so I thought I would record things that should be useful as a
reference. I won&amp;#8217;t provide too much background here since there are many good
existing references to the theory and practice of RNGs, the ones of which I
have encountered I have linked&amp;nbsp;to.&lt;/p&gt;
&lt;h1&gt;Properties&lt;/h1&gt;
&lt;p&gt;More specifically, a &lt;a href="https://en.wikipedia.org/wiki/Pseudorandom_number_generator"&gt;pseudorandom number
generator&lt;/a&gt; (&lt;span class="caps"&gt;PRNG&lt;/span&gt;)
is a &lt;strong&gt;repeatable&lt;/strong&gt; process for producing numbers that have good statistical
random properties. A true &lt;span class="caps"&gt;RNG&lt;/span&gt;, in contrast, produces statistically random
numbers in a non-repeatable way, for example in electronics by using a physical
source of entropy. True RNGs have an obvious importance in cryptographic&amp;nbsp;applications.&lt;/p&gt;
&lt;p&gt;A pseudorandom sequence can be repeated by starting with a particular &lt;strong&gt;seed&lt;/strong&gt;
number.  The &lt;strong&gt;period&lt;/strong&gt; of a &lt;span class="caps"&gt;PRNG&lt;/span&gt; is the longest unique sequence of numbers
generated from any seed. The period is bounded by the size of the internal
state of a generator ($n$ bits of state can encode $2^n$ numbers), however a
generator may produce shorter repeated sequences, called &lt;strong&gt;cycles&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The properties of a &amp;#8216;good&amp;#8217; &lt;span class="caps"&gt;PRNG&lt;/span&gt;&amp;nbsp;are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;That the length of its period exceeds the number of values that taken from
   the generator by a program.  &lt;a href="http://xoroshiro.di.unimi.it/#remarks"&gt;As a rule of
   thumb&lt;/a&gt;, the period should be at least
   the square of the numbers&amp;nbsp;used.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For independent uses of a generator concurrently, that the probability is low
   that any two sequences starting at different seeds&amp;nbsp;overlap.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;That successive values are uniformly distributed. In the literature this
   property is also described as
   &lt;a href="https://en.wikipedia.org/wiki/Equidistributed_sequence"&gt;equidistribution&lt;/a&gt;,
   which can be stated as the probability of finding a number in an interval of
   a sequence is proportional to the length of the&amp;nbsp;interval.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;That successive values are&amp;nbsp;uncorrelated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;That each value can be computed&amp;nbsp;efficiently.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first two properties can typically be determined analytically and it is
true that PRNGs are designed in order that they can be.  Uniformity can be
tested by sampling a large number of values and using statistical measures to
analyse the difference from the expected distribution.  The fifth
characteristic is straightforward to determine, whether the generator is
implemented in hardware or software.  Much harder to determine, however, is the
third property. If it were possible to prove whether a generator is free of
correlation, no &lt;span class="caps"&gt;PRNG&lt;/span&gt; would be considered random since by definition there
exists a well-defined relationship between successive&amp;nbsp;numbers.&lt;/p&gt;
&lt;h1&gt;Empirical&amp;nbsp;testing&lt;/h1&gt;
&lt;p&gt;Conventional approaches to testing RNGs subject them to a collection of tests,
exploring different aspects of the generator&amp;#8217;s statistics. They cannot be
exhaustive, but are shown to be effective by their performance in detecting
correlations in existing standard RNGs. This pragmatism is summed up well in
&lt;a href="http://portal.acm.org/citation.cfm?doid=1268776.1268777"&gt;this paper&lt;/a&gt; with the
comment: &amp;#8220;the different between good and bad RNGs, in a nutshell, is that the
bad ones fail very simple tests whereas the good ones fail only very
complicated tests that are hard to figure out or impractical to&amp;nbsp;run.&amp;#8221;&lt;/p&gt;
&lt;p&gt;There are two popular empirical test&amp;nbsp;suites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://simul.iro.umontreal.ca/testu01/tu01.html"&gt;TestU01&lt;/a&gt;, a comprehensive C
  library, containing example PRNGs, utilities and a collection of statistical
  tests drawn from the academic literature of RNGs. The statistical tests can
  be run ggindividually, or as part of test batteries, which have various run
  times and levels of&amp;nbsp;stringency.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://pracrand.sourceforge.net/"&gt;PractRand&lt;/a&gt;, which provides similar
  functionality to TestU01 but implemented in C++, with more modern features
  such as multithreading, flexible interfaces and support for long sequence
  lengths (over 100 terabytes). &lt;a href="http://pracrand.sourceforge.net/PractRand.txt"&gt;According to the
  author&lt;/a&gt;, it&amp;#8217;s tests are not
  drawn from the literature (presumably designed by the author instead) and are
  therefore a good complement to testing with TestU01 or similar. It also
  requires more random bits than TestU01 and therefore takes longer to&amp;nbsp;run.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also worth investigating are the
&lt;a href="https://www.phy.duke.edu/~rgb/General/dieharder.php"&gt;Dieharder&lt;/a&gt; test suite (an
updated version of the original
&lt;a href="https://en.wikipedia.org/wiki/Diehard_tests"&gt;Diehard&lt;/a&gt;) and the
&lt;a href="http://cristianopi.altervista.org/RaBiGeTe/"&gt;RaBiGeTe&lt;/a&gt; test suite. There is
also some interesting discussion from 2010 between the authors of PractRand and
RaBiGete &lt;a href="http://mathforum.org/kb/message.jspa?messageID=7152033"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Testing with&amp;nbsp;TestU01&lt;/h1&gt;
&lt;p&gt;TestU01 provides an interface to test external generators written in C. The
interface requires a method, &lt;code&gt;GetU01&lt;/code&gt;, to generate numbers in the unit interval
$[0, 1)$ as a &lt;code&gt;double&lt;/code&gt; and a method, &lt;code&gt;GetBits&lt;/code&gt;, to return 32 random bits as an
&lt;code&gt;unsigned int&lt;/code&gt;. Some tests will use random bits and some will use random floats.
Just one function can be provided, with the other defined by TestU01 with
the relationship&amp;nbsp;$\texttt{GetU01}=\texttt{GetBits}/2^{32}$.&lt;/p&gt;
&lt;p&gt;Converting 32 random bits to a double-precision float is lossless in that it
has be represented exactly in the 52 bits of mantissa. However, the conversion
biases the higher bits since the lowest bits will be most affected by numerical
errors. For this reason, it is considered good practice to also test the
reversed output of generator, to expose the lowest bits. To test generators
with a larger output, say 64 bits, it is important that all the bits are
exposed to the tests. One way to do this is to alternately use the high and low
bits of a 64-bit value each call to &lt;code&gt;GetBits&lt;/code&gt; or &lt;code&gt;GetU01&lt;/code&gt;. A further reason to
run the reverse of a generator is that the Crush test battery are defined to
ignore the bottom-most bit of the generator&amp;#8217;s output, and most tests also
ignore the second bit (see the &lt;a href="http://simul.iro.umontreal.ca/testu01/guideshorttestu01.pdf"&gt;TestU01
documentation&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In his testing of the &lt;code&gt;xorshift&lt;/code&gt; family of generators, &lt;a href="http://vigna.di.unimi.it/"&gt;Sebastiano
Vigna&lt;/a&gt; takes the following approach to measuring
quality with TestU01: for a particular generator, run it with 100 different
seeds, which are spaced at regular intervals in the state space, i.e.  for a
generator with $n$ bits of state, choose seeds at $1 + i\lfloor 2^n/100\rfloor$
for $0 \leq i &amp;lt; 100$. The quality of a generator is then measured by the total
number of failures over all seeds, with fewer failures meaning higher
quality. If a generator has 100 or more failures, the failure is called
&lt;em&gt;systematic&lt;/em&gt; and the generator is disregarded. Quality is measured with the
BigCrush battery, but since it takes many hours to run (using approximately
$2^{38}$ random values in 106 tests), potential generators can be assessed by
running the smaller test batteries SmallCrush (10 tests) and Crush (96 tests),
continuing based on the number of&amp;nbsp;failures.&lt;/p&gt;
&lt;p&gt;Through my own experiments, I found that the reverse of a generator won&amp;#8217;t
always catch weak lower bits.  &lt;code&gt;xoroshiro128+&lt;/code&gt; is currently the &lt;a href="http://xoroshiro.di.unimi.it/#shootout"&gt;highest
quality and fastest known generator&lt;/a&gt;,
as measured by the above process, with 31 failures and 27 failures when
reversed, but it has a known weak bit 0 that follows a &lt;a href="https://en.wikipedia.org/wiki/Linearity#Boolean_functions"&gt;linear
recurrence&lt;/a&gt; that is
not detected by BigCrush, even when reversed.  However, the weak bit is
detectable with the matrix rank test with parameters $N=1$, $n=80$, $r=15$,
$s=15$, $L=k=5000$, or more simply by swapping the high and low 16-bit portions
of each 32-bit word to move the bottom bit into the middle. I didn&amp;#8217;t discover
anything new about &lt;code&gt;xoroshiro128+&lt;/code&gt; here, but what this does highlight is that
comprehensive test sets like TestU01 are by no means exhaustive, and it
therefore worth testing some of their assumptions, particularly in this case if
you are interested in the quality of bit&amp;nbsp;0.&lt;/p&gt;
&lt;p&gt;Incidentally, TestU01 includes a battery of nine tests called Alphabit, which
is allows specific bits or ranges of bits from a generator to be tested. It was
not stringent enough however to detect the correlation of &lt;code&gt;xoroshirt128+&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s bit&amp;nbsp;0.&lt;/p&gt;
&lt;h1&gt;An&amp;nbsp;example&lt;/h1&gt;
&lt;p&gt;I&amp;#8217;ve put together a simple example, &lt;a href="https://github.com/jameshanlon/prng-testing/tree/2017-blog"&gt;available on
Github&lt;/a&gt;, of using
TestU01 to assess the quality of a &lt;span class="caps"&gt;PRNG&lt;/span&gt;, which replicates Vigna&amp;#8217;s testing of
&lt;code&gt;xoroshiro128+&lt;/code&gt;.  The code includes a C program to test &lt;code&gt;xoroshiro128+&lt;/code&gt; with
the Crush batteries and Python scripts to run the test over different seeds and
to summarise the output of&amp;nbsp;TestU01.&lt;/p&gt;
&lt;h1&gt;Further reading and&amp;nbsp;links&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://xoroshiro.di.unimi.it/"&gt;The &lt;span class="caps"&gt;PRNG&lt;/span&gt; shootout&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Sebastiano Vigna. An experimental exploration of Marsaglia&amp;#8217;s xorshift
  generators, scrambled. &lt;span class="caps"&gt;ACM&lt;/span&gt; Trans. Math. Software, 42(4),&amp;nbsp;2016.&lt;/li&gt;
&lt;li&gt;For a comprehensive general introduction to PRNGs and testing them, see &amp;#8216;The
  art of computer systems performance analysis&amp;#8217; by Raj Jain (1991) Chapters 26
  and&amp;nbsp;27.&lt;/li&gt;
&lt;/ul&gt;</content><category term="notes"></category><category term="computing"></category><category term="PRNGs"></category></entry><entry><title>A convolutional neural network fromÂ scratch</title><link href="http://jameswhanlon.com/a-convolutional-neural-network-from-scratch.html" rel="alternate"></link><published>2017-02-10T00:00:00+01:00</published><updated>2017-02-10T00:00:00+01:00</updated><author><name>James W. Hanlon</name></author><id>tag:jameswhanlon.com,2017-02-10:/a-convolutional-neural-network-from-scratch.html</id><summary type="html">&lt;p&gt;A C++ implementation of a convoluational neural network building on the
explanation in Michael Nielsen&amp;#8217;s book &amp;#8216;Neural Networks and Deep&amp;nbsp;Learning&amp;#8217;.&lt;/p&gt;</summary><content type="html">&lt;p&gt;The online book &amp;#8216;&lt;a href="http://neuralnetworksanddeeplearning.com"&gt;Neural Networks and Deep
Learning&lt;/a&gt;&amp;#8216; by Michael Nielsen is an
excellent introduction to neural networks and the world of deep learning.  As
the book works through the theory, it makes it concrete by explaining how the
concepts are implemented using Python. The complete Python programs are
&lt;a href="https://github.com/mnielsen/neural-networks-and-deep-learning"&gt;available on
Github&lt;/a&gt; for
further inspection and&amp;nbsp;experimentation.&lt;/p&gt;
&lt;p&gt;I decided to write my own implementations of the examples however. Partly to
develop a better understanding but also because I felt that the matrix-based
presentation of the mathematics and use of NumPy operations in the examples
obscured some of the intuition around neurons and their connections, and
because the later examples of convolutional layers are implemented using
&lt;a href="deeplearning.net/software/theano/"&gt;Theano&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, in the hope that it might be interesting as a simple and self-contained
example of a convolutional neural network where nothing is hidden, I&amp;#8217;ve put he
source code for my implementation (written in C++) on
&lt;a href="https://github.com/jameshanlon/convolutional-neural-network"&gt;GitHub&lt;/a&gt;. For
reference I&amp;#8217;ve also written up below the various equations for the
fully-connected and convolutional layers in element-wise notation. I should
thank two particularly useful blog posts by &lt;a href="http://andrew.gibiansky.com/blog/machine-learning/convolutional-neural-networks/"&gt;Andrew
Gibiansky&lt;/a&gt;
and &lt;a href="https://grzegorzgwardys.wordpress.com/2016/04/22/8/"&gt;Grzegorz Gwardys&lt;/a&gt;
which helped me to derive the convolutional equations for back&amp;nbsp;propagation.&lt;/p&gt;
&lt;h1&gt;The source&amp;nbsp;code&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://github.com/jameshanlon/convolutional-neural-network"&gt;repository&lt;/a&gt;
contains several example programs with different network
configurations. They are instantiated from a generic header &lt;code&gt;Network.hpp&lt;/code&gt;,
which contains classes for fully-connected, softmax, convolutional and
max-pooling layer types, and a network class that performs the stochastic
gradient descent, minibatching and training over multiple epochs with
randomly-shuffled training data. The header also contains definitions for
quadratic and cross-entropy cost functions, and sigmoid and rectified-linear
activation functions, which are specified as template parameters to the
network. The code is written primarily primarily to be clear and
understandable, as such there will be many opportunities for optimisations and
other improvements (please let me know if you have any&amp;nbsp;suggestions).&lt;/p&gt;
&lt;p&gt;For instructions on how to build and run the examples, see the &lt;code&gt;README.md&lt;/code&gt;
file. Note that Boost is required for &lt;code&gt;multi_array&lt;/code&gt; and Threading Building
Blocks to parallelise the training over minibatches and accuracy evaluation by
performing inferences in parallel, up to the minibatch size.  It should be
straightforward to build other network configurations or to modify the
implementations or to experiment with new&amp;nbsp;features.&lt;/p&gt;
&lt;p&gt;Included in the &lt;code&gt;extra&lt;/code&gt; folder, are implementations of the example programs
in &lt;a href="https://www.tensorflow.org/"&gt;TensorFlow&lt;/a&gt;, adapted from the &lt;a href="https://www.tensorflow.org/tutorials/mnist/pros/"&gt;&lt;span class="caps"&gt;MNIST&lt;/span&gt;
tutorial&lt;/a&gt;. I found these
useful as a point of comparison to validate the behaviour of the&amp;nbsp;networks.&lt;/p&gt;
&lt;h1&gt;Equations&lt;/h1&gt;
&lt;p&gt;The following notation roughly follows the notation in the Neural Networks and
Deep Learning&amp;nbsp;book:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$l$ is an index of a&amp;nbsp;layer;&lt;/li&gt;
&lt;li&gt;$w$ is a&amp;nbsp;weight;&lt;/li&gt;
&lt;li&gt;$z$ is a weighted&amp;nbsp;input;&lt;/li&gt;
&lt;li&gt;$a$ is an&amp;nbsp;activation;&lt;/li&gt;
&lt;li&gt;$y$ is a&amp;nbsp;label;&lt;/li&gt;
&lt;li&gt;$\delta$ is an&amp;nbsp;error;&lt;/li&gt;
&lt;li&gt;$\sigma$ is the activation function, $\sigma&amp;#8217;$ is the derivative of&amp;nbsp;it;&lt;/li&gt;
&lt;li&gt;$C$ is the cost&amp;nbsp;function.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;For a fully-connected&amp;nbsp;layer&lt;/h2&gt;
&lt;p&gt;In the forward pass, each neuron takes a weighted sum of its inputs, adds the bias
and uses the result as the input to the activation function:
$$z_i^l = \sum_j w_{j,i}^{l-1} a_j^{l-1} + b^l$$
$$a_i^l =&amp;nbsp;\sigma(z_i^l)$$&lt;/p&gt;
&lt;p&gt;The error of a neuron $i$ in the output layer is given by
$\delta_i = (a_i -y_i)\sigma&amp;#8217;(z_i)$
for the sigmoid activation function and by
$\delta_i = a_i - y_i$
for the cross-entropy activation&amp;nbsp;function.&lt;/p&gt;
&lt;p&gt;In the backwards pass, errors are propagated to a neuron from neurons that are
connected as outputs.  The weighted sum of the output neuron&amp;#8217;s errors and
connection weight is calculated and this value is then multiplied by the
derivative of the activation function:
$$\delta_i^l = \sum_j w_{j,i}^{l+1} \delta_j^{l+1}&amp;nbsp;\sigma&amp;#8217;(z_i^l)$$&lt;/p&gt;
&lt;p&gt;The delta for a weight is calculated from the error held by a neuron and the
activation from the neuron connected by the input:
$$\frac{\partial C}{\partial w_i^l} =&amp;nbsp;a_i^{l-1}\delta_i^l$$&lt;/p&gt;
&lt;p&gt;The delta for the bias is equal to the error held by a neuron:
$$\frac{\partial C}{\partial b_i^l} =&amp;nbsp;\delta_i^l$$&lt;/p&gt;
&lt;h2&gt;For a convolutional&amp;nbsp;layer&lt;/h2&gt;
&lt;p&gt;Assuming a two-dimensional input of size $N\times N$ and convolutional mask of
size $m\times&amp;nbsp;m$.&lt;/p&gt;
&lt;p&gt;In the forward pass, each neuron convolves the weights with its receptive field:
$$z_{x,y}^l = \sum_{a=0}^{m-1}\sum_{b=0}^{m-1} w_{a,b}^{l-1}a_{x+a,y+b}^{l-1} + b^l$$
$$a_{x,y}^l =&amp;nbsp;\sigma(z_{x,y}^l)$$&lt;/p&gt;
&lt;p&gt;In the backwards pass, errors are propagated to a neuron from the neurons
connected as outputs in the next layer:
$$\delta_{x,y}^l = \sum_{a=0}^{m-1}\sum_{b=0}^{m-1} w_{a,b}^{l+1}\delta_{x-a,y-b}^{l+1}\sigma&amp;#8217;(z_{x,y}^l)$$
One way to simplify this is to &lt;a href="https://grzegorzgwardys.wordpress.com/2016/04/22/8/"&gt;think of the convolutional layer as one
dimensional&lt;/a&gt; (as with a
fully-connected layer), where each neuron has only $m\times m$ inputs connections.
Then, back propagation operates in the same way as it does with fully-connected
layers. You can in fact use this approach to derive the above&amp;nbsp;equation.&lt;/p&gt;
&lt;p&gt;The delta of a weight is calculated from the activations in the previous layer
that influence that weight and the errors held by the neurons that use it:
$$\frac{\partial C}{\partial w_{a,b}^l} = \sum_{i=0}^{N-m}\sum_{j=0}^{N-m} a_{i+a,&amp;nbsp;j+b}^{l-1}\delta_{i,j}^l$$&lt;/p&gt;
&lt;p&gt;The delta of a bias is calculated from the errors held by the neurons that
use it:
$$\frac{\partial C}{\partial b^l} = \sum_{i=0}^{N-m}\sum_{j=0}^{N-m}&amp;nbsp;\delta_{i,j}^l$$&lt;/p&gt;
&lt;p&gt;With three-dimensional inputs, convolutional layers convolve a
three-dimensional mask into the depth of the input. Convolutional layers can
themselves produce three-dimensional outputs by stacking up separate
convolutional processes in the same layer (called feature maps or channels),
each contributing one element in the depth of the output. In this case, the
backpropagation of the error must sum over the feature maps to get the
contributions of each expression that contribute to the error. The weight and
bias updates must sum errors over the input volume they are applied&amp;nbsp;to.&lt;/p&gt;
&lt;h1&gt;Further&amp;nbsp;reading&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://deeplearning.net/tutorial/lenet.html"&gt;Convolutional neural networks&amp;nbsp;tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cs231n.github.io/"&gt;CS231n Convolutional Neural Networks for Visual&amp;nbsp;Recognition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://russellsstewart.com/notes/0.html"&gt;Introduction to debugging neural&amp;nbsp;networks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="notes"></category><category term="machine-intelligence"></category></entry><entry><title>Reducing memory use in deep neuralÂ networks</title><link href="http://jameswhanlon.com/reducing-memory-use-in-deep-neural-networks.html" rel="alternate"></link><published>2017-02-05T00:00:00+01:00</published><updated>2017-02-05T00:00:00+01:00</updated><author><name>James W. Hanlon</name></author><id>tag:jameswhanlon.com,2017-02-05:/reducing-memory-use-in-deep-neural-networks.html</id><summary type="html">&lt;p&gt;A review of state-of-the-art techniques&amp;nbsp;used.&lt;/p&gt;</summary><content type="html">&lt;p&gt;The memory requirements for modern deep neural networks can be significant,
however memory on-chip is expensive relative to computational resources such as
integer and floating-point units, and access to external &lt;span class="caps"&gt;DRAM&lt;/span&gt; memory is orders
of magnitude slower. This article surveys some recent results that demonstrate
the economy of reducing memory use by reuse and&amp;nbsp;re-computation.&lt;/p&gt;
&lt;p&gt;Memory in neural networks is required to store input data, weight parameters,
and activations as an input propagates through the network. In training,
activations from an forward pass must be retained until they can be used to
calculate the error gradients in the backwards pass. A 50-layer ResNet network,
for example, has 25 million weight parameters and computes 16 million
activations in the forward pass. With a batch of 32, this data alone occupies 5
&lt;span class="caps"&gt;GB&lt;/span&gt;; additional memory is required to store the program&amp;#8217;s instructions, input
data and temporary values, the last of which is multiplied by the level
of parallelism in the execution. Measuring the memory use of ResNet-50 training
on a Maxwell-generation Nvidia TitanX &lt;span class="caps"&gt;GPU&lt;/span&gt; shows that it uses up to 7.5 &lt;span class="caps"&gt;GB&lt;/span&gt; of
the 12 &lt;span class="caps"&gt;GB&lt;/span&gt;&amp;nbsp;available.&lt;/p&gt;
&lt;p&gt;Reducing memory use is beneficial for neural networks for several reasons.
First, it enables deeper networks to be trained, which have been shown to
deliver superior performance for specific tasks and generalisation to new
tasks. Second, it allows larger batch sizes to be used, which improves
throughput and parallelisation. And third, and perhaps most importantly, it
allows data to remain closer to where it is being operated on, reducing the
effects of longer latency and lower bandwidth of larger-capacity off-chip
memory, and consequently improving performance. To illustrate the challenge of
last point with modern &lt;span class="caps"&gt;GPU&lt;/span&gt; architectures, it has been observed that &lt;a href="http://jmlr.org/proceedings/papers/v48/diamos16.pdf"&gt;the
Maxwell TitanX &lt;span class="caps"&gt;GPU&lt;/span&gt; processor cores have only 1 &lt;span class="caps"&gt;KB&lt;/span&gt; of memory that can be read
fast enough to saturate the floating-point
datapath&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Two techniques to reduce memory use draw on the dataflow analysis that has been
developed over decades of work with compilers for sequential programming
languages. First, &lt;a href="http://mxnet.io/architecture/note_memory.html#in-place-operations"&gt;operations such as activation functions can be performed in
place when the input data can be overwritten directly by the output, so the
memory is
reused&lt;/a&gt;.
Second, memory can be reused by &lt;a href="http://mxnet.io/architecture/note_memory.html#standard-memory-sharing"&gt;analysing the data dependencies between
operations in a network and allocating the same memory to operations that do
not use it
concurrently&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The second approach is particularly effective when the entire neural network
can be analysed at compile time to create a fixed allocation of memory since
the runtime overheads of memory management reduce to almost zero. The
combination of these techniques have been shown &lt;a href="https://arxiv.org/pdf/1604.06174v2.pdf"&gt;to reduce memory in neural
networks by a factor of two to three&lt;/a&gt;.
These optimisation techniques are analogous to the dataflow in a sequential
program graph to allow the reuse of registers and stack memory, with their
relatively higher efficiency compared to dynamic memory allocation&amp;nbsp;routines.&lt;/p&gt;
&lt;p&gt;Another approach is to trade reduced memory for an increase in computation.
When the computational resources are underused, as they typically are in GPUs,
an increase in computation wonât necessarily increase runtime, and if it does,
can produce relatively higher savings of memory compared to the additional
computation. A simple technique in this vein is to discard values that are
relatively cheap to compute, such as activation functions, and re-compute them
when necessary. More substantial reductions can be achieved by discarding
retained activations in sets of consecutive layers of a network and re-computing
them when they are required during the backwards pass, from the closest set of
remaining activations. Recomputing activations over sets of layers has been
demonstrated by the &lt;a href="https://mxnet.io"&gt;MXNet team&lt;/a&gt; to deliver a factor-of-four
memory reduction for a ResNet-50 network, but more importantly, results in
memory use that scales sub-linearly with respect to the number of layers. The
team also demonstrated &lt;a href="https://arxiv.org/pdf/1604.06174v2.pdf"&gt;training of a 1000-layer ResNet in under 12 &lt;span class="caps"&gt;GB&lt;/span&gt; on the
same Maxwell TitanX &lt;span class="caps"&gt;GPU&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A similar memory-reuse approach has been developed by researchers ar &lt;a href="https://deepmind.com/"&gt;Google
DeepMind&lt;/a&gt; with recurrent neural networks (RNNs). RNNs
are a special type of &lt;span class="caps"&gt;DNN&lt;/span&gt; that allows cycles in their structure to encode
behaviour over sequences of inputs.  For RNNs, &lt;a href="https://arxiv.org/pdf/1606.03401v1.pdf"&gt;re-computation has been shown
to reduce memory by a factor of 20 for sequences of length 1000 with only a 30%
performance overhead&lt;/a&gt;. The Baidu &lt;a href="http://research.baidu.com/"&gt;Deep
Speech team&lt;/a&gt; recently showed how they applied
various memory-saving techniques obtain a factor of 16 reduction in memory for
activations, enabling them to &lt;a href="http://jmlr.org/proceedings/papers/v48/diamos16.pdf"&gt;train networks with 100 layers on a Maxwell
TitanX, when previously they could only train
9&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Relative to memory, compute resources are cheap. The state-of-the-art results
surveyed show efficient use of memory through reuse and trading increased
computation for reduced memory use can deliver dramatic improvements in the
performance of neural networks. However, these results are for a processor with
very limited on-chip memory, just a few megabytes, and just &lt;span class="caps"&gt;1KB&lt;/span&gt; of fast memory
per core. A processor with a better balance between memory and compute,
allowing more of a neural network to be stored on-chip, may facilitate much
more dramatic&amp;nbsp;improvements.&lt;/p&gt;
&lt;p&gt;[An adapted version of this article first appeared on the &lt;a href="https://www.graphcore.ai/blog/why-is-so-much-memory-needed-for-deep-neural-networks"&gt;Graphcore
blog&lt;/a&gt;
and there was some discussion of it on &lt;a href="https://news.ycombinator.com/item?id=13928523"&gt;Hacker
News&lt;/a&gt;]&lt;/p&gt;</content><category term="notes"></category><category term="computing"></category><category term="machine-intelligence"></category></entry><entry><title>Machine learning challenges for computerÂ architecture</title><link href="http://jameswhanlon.com/machine-learning-challenges-for-computer-architecture.html" rel="alternate"></link><published>2016-11-04T00:00:00+01:00</published><updated>2016-11-04T00:00:00+01:00</updated><author><name>James W. Hanlon</name></author><id>tag:jameswhanlon.com,2016-11-04:/machine-learning-challenges-for-computer-architecture.html</id><summary type="html">&lt;p&gt;Neural networks have become a hot topic in computing and their development is
progressing rapidly. They have a long history with some of the first â¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Neural networks have become a hot topic in computing and their development is
progressing rapidly. They have a long history with some of the first designs
proposed in the 1940s.  But despite being an active area of research since
then, it has not been until the last five to ten years that the field has
started to deliver state-of-the-art results, with deep neural network-based
algorithms displacing conventional machine-learning and programmed ones in many&amp;nbsp;areas.&lt;/p&gt;
&lt;p&gt;The recent developments in neural networks, since around 2010,  has coincided
with the availability of commodity high-performance GPUs. These devices provide
enough memory and compute that networks can be trained with large datasets, in
the order of hours or days, to perform classification tasks for practical and
interesting problems such as image and speech recognition. Although GPUs have
established themselves as the standard way to accelerate neural networks, they
have done this by transitioning relatively quickly from applications in
traditional &lt;span class="caps"&gt;HPC&lt;/span&gt;, but they are already evolving to meet the needs of machine
learning. In this article I want to discuss some of the challenges that neural
networks and their development present to GPUs, and indeed more generally to
the status quo of computer&amp;nbsp;architecture.&lt;/p&gt;
&lt;h2&gt;Compute and&amp;nbsp;memory&lt;/h2&gt;
&lt;p&gt;The fundamental operations of a neural network are floating-point
multiplications and additions. These are used to combine input data with the
parameters of the network that control the influence of connections between
neurons.  Modern networks require considerable resources to store millions of
parameters and perform billions of operations per&amp;nbsp;input.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Artificial_neuron"&gt;Neurons&lt;/a&gt; in &lt;a href="http://neuralnetworksanddeeplearning.com/chap1.html#the_architecture_of_neural_networks"&gt;fully-connected layers&lt;/a&gt; take
weighted sums of their inputs (a multiplication and an accumulation, &lt;span class="caps"&gt;MAC&lt;/span&gt;, for
each input) from every neuron in the previous layer. The number of MACs grows
with the square of the layer size, and the number of layers, so even with
modest numbers of layers and neurons per layer, the number of MACs can be
large. In the &lt;a href="https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf"&gt;AlexNet network&lt;/a&gt;, the last three layers are
fully connected with 4,096, 4,096 and 1,000 neurons respectively, requiring
58.6 million parameters and, for the &lt;a href="http://neuralnetworksanddeeplearning.com/chap2.html"&gt;forward pass&lt;/a&gt; to classify
a single input image with a trained network, the same number of&amp;nbsp;MACs.&lt;/p&gt;
&lt;p&gt;The use of &lt;a href="http://deeplearning.net/tutorial/lenet.html"&gt;convolutional layers&lt;/a&gt; reduces the number of
parameters by sharing a small sets between the neurons. The five
convolutional layers preceding the fully-connected layers in AlexNet contain
just 2.5 million neurons, but require 655.6 million MACs per input. AlexNet was
state of the art in 2009 and networks since then have developed with many more
convolutional layers and a smaller fully connected component, resulting in
relatively slow growth in the number of parameters but significant increases in
the number of MACs. A variant of the &lt;a href="https://arxiv.org/abs/1409.1556"&gt;&lt;span class="caps"&gt;VGG&lt;/span&gt; network&lt;/a&gt;
(2014) with 19 layers (three fully connected) has 143.6 million parameters and
requires a total of 19.6 million MACs in the forward pass. A variant of the
&lt;a href="https://arxiv.org/abs/1512.03385"&gt;ResNet network&lt;/a&gt; (2015) with 50 layers (one fully connected) has
25.5 million parameters and 3.8 billion MACs for the forward pass. More &lt;a href="https://arxiv.org/abs/1603.09382"&gt;recent
work&lt;/a&gt; has demonstrated benefits of networks with more than
1,000&amp;nbsp;layers.&lt;/p&gt;
&lt;p&gt;When a network is being trained, more compute is required by an additional
backwards pass and and memory requirements increase since intermediate values
for each parameter must be maintained from the forward&amp;nbsp;pass.&lt;/p&gt;
&lt;p&gt;The challenge for computer architecture here is to deliver the huge number of
MACs required for training and inference, whilst minimising the movement of
data between fast local memory and slower main memory, or via a communication
link.  This will of course require corresponding developments in the
implementation of neural networks. A &lt;a href="http://jmlr.org/proceedings/papers/v48/diamos16.pdf"&gt;recent result&lt;/a&gt;
demonstrated that when data is kept on chip, much better use of &lt;span class="caps"&gt;GPU&lt;/span&gt; compute
resource can be made to achieve an order of magnitude improvement in the depth
of network that could be trained. Another has &lt;a href="https://arxiv.org/pdf/1604.06174v2.pdf"&gt;demonstrated&lt;/a&gt;
that compute can be traded for a logarithmic reduction of memory in the number
of&amp;nbsp;layers.&lt;/p&gt;
&lt;h2&gt;Precision&lt;/h2&gt;
&lt;p&gt;Reducing the precision of arithmetic reduces the cost of memory and compute
since lower-precision floating-point numbers require less bits of storage and
require smaller more power-efficient structures in silicon to implement
arithmetic operations. Recent research has demonstrated that representations
between 8 and 16 bits can deliver &lt;a href="https://arxiv.org/abs/1412.7024"&gt;similar results&lt;/a&gt; to
32-bit precision for inference and training. This has already has an impact on
architecture: Google has claimed a &lt;a href="http://www.tomshardware.com/news/google-tensor-processing-unit-machine-learning,31834.html"&gt;10x increase in efficiency&lt;/a&gt; with
it&amp;#8217;s Tensor Processing Unit (&lt;span class="caps"&gt;TPU&lt;/span&gt;) using &lt;a href="https://petewarden.com/2016/05/03/how-to-quantize-neural-networks-with-tensorflow/"&gt;8-bit precision&lt;/a&gt;, and
Nvidia&amp;#8217;s new Pascal architecture supports &lt;a href="https://blogs.nvidia.com/blog/2015/03/17/pascal/"&gt;16-bit floating-point
arithmetic&lt;/a&gt; at twice the rate of single precision, and &lt;a href="https://www.hpcwire.com/2016/09/12/nvidia-aims-gpus-deep-learning-inferencing/"&gt;8-bit
integer arithmetic&lt;/a&gt; at four times the rate. Intel have also
&lt;a href="http://www.anandtech.com/show/10575/intel-announces-knights-mill-a-xeon-phi-for-deep-learning"&gt;recently announced&lt;/a&gt; a variant of their Xeon Phi processor,
code named Knights Mill, that will be optimised for deep learning with variable
precision floating-point&amp;nbsp;arithmetic.&lt;/p&gt;
&lt;h2&gt;Structure&lt;/h2&gt;
&lt;p&gt;There is no single structure for data movement in deep neural networks. The
simplest networks have connections between adjacent layers, which are evaluated
in sequence, but many &lt;a href="https://culurciello.github.io/tech/2016/06/04/nets.html"&gt;more complex structures have been
proposed&lt;/a&gt;. For example, &lt;a href="https://arxiv.org/abs/1512.03385"&gt;residual connections&lt;/a&gt;
provide a pathway between non-adjacent layers, &lt;a href="https://arxiv.org/pdf/1605.07648v1.pdf"&gt;fractal
architectures&lt;/a&gt; have self-similar structures at different
scales and entire neural networks can be &lt;a href="https://arxiv.org/abs/1312.4400"&gt;used as basic building
blocks&lt;/a&gt;. There can also by dynamism in the structure;
&lt;a href="https://www.cs.toronto.edu/~hinton/absps/JMLRdropout.pdf"&gt;dropout&lt;/a&gt; prevents overfitting by randomly removing connections
during training to &amp;#8216;thin&amp;#8217; the network, and networks with &lt;a href="https://arxiv.org/abs/1603.09382v1"&gt;stochastic
depth&lt;/a&gt; randomly exclude subsets of layers during training
to make deep networks more&amp;nbsp;shallow.&lt;/p&gt;
&lt;p&gt;These neural-network structures contrast with traditional &lt;span class="caps"&gt;HPC&lt;/span&gt;-style programs,
which have long been the focus of parallel computing research and development
and are characterised by a &lt;a href="http://view.eecs.berkeley.edu/wiki/Dwarfs"&gt;single structure and algorithm&lt;/a&gt;. The
challenge here is for computing hardware and the programming models targeting
it to support complex, highly-connected and potentially dynamic communication&amp;nbsp;structures.&lt;/p&gt;
&lt;h2&gt;Programming&lt;/h2&gt;
&lt;p&gt;There are &lt;a href="https://github.com/josephmisiti/awesome-machine-learning"&gt;many languages, frameworks and libraries&lt;/a&gt;
available for creating deep-learning applications and they are having to
evolve quickly though to keep up with the pace of research. This is a strong
indication that the means by which we program neural networks need to be
general enough to facilitate experimentation but also deliver reasonable
performance so that it is practical to explore different designs and
hyper&amp;nbsp;parameters.&lt;/p&gt;
&lt;p&gt;However, there is a gulf between the high-level representations of neural
networks used by researchers and their actual implementation on hardware.  For
example, Google&amp;#8217;s &lt;a href="https://www.tensorflow.org/"&gt;TensorFlow&lt;/a&gt; programming framework is written in
C++ and interfaces with GPUs via an abstraction layer that calls &lt;span class="caps"&gt;CUDA&lt;/span&gt; library
routines. On top of this, Google have released a high-level Python wrapper for
TensorFlow, called &lt;a href="https://research.googleblog.com/2016/08/tf-slim-high-level-library-to-define.html"&gt;TensorFlow-Slim&lt;/a&gt;.  But despite the
abstraction and generality of the TensorFlow framework, achieving good
computational efficiency on GPUs depends on a heavily-optimised high-level deep
neural network library, such as &lt;a href="https://developer.nvidia.com/cudnn"&gt;cuDNN&lt;/a&gt; or &lt;a href="https://github.com/NervanaSystems/neon"&gt;&lt;span class="caps"&gt;NEON&lt;/span&gt;&lt;/a&gt;.
The problem for all high-level programming approaches is that the performance
of neural network designs that cannot exploit an underlying optimised library
directly will degrade significantly. Closing the gap between the methods used
to build neural networks and their mapping to a machine architecture would
deliver more performance for a wider range of&amp;nbsp;programs.&lt;/p&gt;
&lt;h2&gt;Deployment and&amp;nbsp;portability&lt;/h2&gt;
&lt;p&gt;Finally, a unique aspect of machine-learning algorithms is the separation
between the phase in which they are trained and their subsequent deployment for
inference.  Since training demands more compute and memory resources and is
typically carried out in a data-centre environment where space, power and, to
some extent, time are not constraining issues.  A trained neural network can be
deployed in more constrained environments, such as mobile or robotics, where
they may be reacting in real time, to a voice user interface or sensor input
for example, with limited memory and power. They may also continue to learn as
they are exposed to more&amp;nbsp;data.&lt;/p&gt;
&lt;p&gt;The result of training is a set of parameter values and portability to another
platform requires the weights to be loaded in an implementation of the same
neural network. The implementation may differ in the numerical precision it
uses since trained networks are known to be robust to low-precision parameter
representations, and doing so takes advantage of the associated memory,
performance and power benefits. A portable neural network might therefore need
separate implementations for training and inference, optimised for the memory
and compute constraints and to be targeted at different machine architectures.
A standardised specification of neural networks, including trained parameters,
would further improve portability between&amp;nbsp;platforms.&lt;/p&gt;
&lt;p&gt;There have been some efforts to try to measure aspects of the implementation,
deployment and performance of deep neural networks. In particular
&lt;a href="https://github.com/DeepMark/deepmark"&gt;Deepmark&lt;/a&gt;, which is based on specific networks, and
&lt;a href="https://github.com/baidu-research/DeepBench"&gt;Deepbench&lt;/a&gt;, which takes a simpler approach by just looking at
important&amp;nbsp;kernels.&lt;/p&gt;
&lt;h2&gt;In&amp;nbsp;summary&lt;/h2&gt;
&lt;p&gt;Modern deep neural networks are now state-of-the-art in many application areas
of computing but with their unique characteristics, they pose a significant
challenge to conventional computer architecture. This challenge however is also
an opportunity to build new machines and programming languages that break away
from the status quo of sequential shared-memory von Neumann&amp;nbsp;machines.&lt;/p&gt;</content><category term="notes"></category><category term="computing"></category><category term="computer-architecture"></category><category term="machine-intelligence"></category></entry><entry><title>The XC ProgrammingÂ Language</title><link href="http://jameswhanlon.com/the-xc-programming-language.html" rel="alternate"></link><published>2014-12-13T00:00:00+01:00</published><updated>2014-12-13T00:00:00+01:00</updated><author><name>James W. Hanlon</name></author><id>tag:jameswhanlon.com,2014-12-13:/the-xc-programming-language.html</id><summary type="html">&lt;p&gt;An overview of the key features of the language, many of which derive
from&amp;nbsp;occam.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;span class="caps"&gt;XC&lt;/span&gt; is a programming language developed by &lt;span class="caps"&gt;XMOS&lt;/span&gt; for real-time embedded parallel
programming of their XCore processor architecture. &lt;span class="caps"&gt;XC&lt;/span&gt; is based on the features
for parallelism and communication in occam, and the syntax and some sequential
features of C. In addition, &lt;span class="caps"&gt;XC&lt;/span&gt; provides primitives to expose hardware
resources: locks, ports and timers. &lt;span class="caps"&gt;XC&lt;/span&gt; programs can be executed with levels of
I/O real-time performance that is usually attributed to &lt;span class="caps"&gt;FPGA&lt;/span&gt; or &lt;span class="caps"&gt;ASIC&lt;/span&gt; devices.
The design of &lt;span class="caps"&gt;XC&lt;/span&gt; was heavily influenced by the occam programming language,
which first introduced channel communication, alternation, ports and timers.
Occam was developed by &lt;a href="https://en.wikipedia.org/wiki/David_May_(computer_scientist)"&gt;David
May&lt;/a&gt; and built on
the &lt;a href=""&gt;Communicating Sequential Processes&lt;/a&gt; formalism, a process algebra
developed by &lt;a href="https://en.wikipedia.org/wiki/Tony_Hoare"&gt;Tony Hoare&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This note was originally written for
&lt;a href="https://en.wikipedia.org/w/index.php?title=XC_(programming_language)"&gt;Wikipedia&lt;/a&gt;,
but the content was removed owing to it being too much like a manual. To save
it from being lost, I&amp;#8217;ve posted it here (December&amp;nbsp;2021).&lt;/p&gt;
&lt;h2&gt;Architectural&amp;nbsp;model&lt;/h2&gt;
&lt;p&gt;An &lt;span class="caps"&gt;XC&lt;/span&gt; program executes on a collection of XCore tiles. Each tile contains one
or more processing cores and resources that can be shared between the cores,
including I/O and memory. All tiles are connected by a communication network
that allows any tile to communicate with any other tile. A given target system
is specified during compilation and the compiler ensures that a sufficient
number of tiles, cores and resources are available to execute the program being&amp;nbsp;compiled.&lt;/p&gt;
&lt;h2&gt;Features&lt;/h2&gt;
&lt;p&gt;The following sections outline the key features of &lt;span class="caps"&gt;XC&lt;/span&gt;.&lt;/p&gt;
&lt;h3&gt;Parallelism&lt;/h3&gt;
&lt;p&gt;Statements in &lt;span class="caps"&gt;XC&lt;/span&gt; are executed in sequence (as they are in C), so that in the
execution&amp;nbsp;of:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;the function &lt;code&gt;g&lt;/code&gt; is only executed once the execution of the function &lt;code&gt;f&lt;/code&gt; has
completed. A set of statements can be made to execute in parallel using a &lt;code&gt;par&lt;/code&gt;
statement, so that the&amp;nbsp;statement&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;par&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;causes &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt; to be executed simultaneously. The execution of parallel
statement only completes when each of the component statements have completed.
The component statements are called tasks in &lt;span class="caps"&gt;XC&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Because the sharing of variables can lead to race conditions and
non-deterministic behaviour, &lt;span class="caps"&gt;XC&lt;/span&gt; enforces parallel disjointness. Disjointness
means that a variable that is changed in one component statement of a par may
not be used in any other&amp;nbsp;statement.&lt;/p&gt;
&lt;p&gt;Parallel statements can be written with a replicator, in a similar fashion to a
for loop, so that many similar instances of a task can be created without
having to write each one separately, so that the&amp;nbsp;statement:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;par&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;is equivalent&amp;nbsp;to:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;par&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The tasks in a parallel statement are executed by creating threads on the
processor executing the statement. Tasks can be placed on different tiles by
using an &lt;code&gt;on&lt;/code&gt; prefix. In following&amp;nbsp;example:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;par&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tile&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;par&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tile&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;the task &lt;code&gt;f&lt;/code&gt; is placed on any available core of tile 0 and instances of the task
g placed on cores 0, 1, 2 and 3 of tile 1. Task placement is restricted to the
main function of an &lt;span class="caps"&gt;XC&lt;/span&gt; program. Conceptually, this is because when an &lt;span class="caps"&gt;XC&lt;/span&gt;
program is compiled, it is divided up at its top level, into separately
executable programs for each&amp;nbsp;tile.&lt;/p&gt;
&lt;h3&gt;Communication&lt;/h3&gt;
&lt;p&gt;Parallel tasks are able to communicate with each other using interfaces or channels.&amp;nbsp;Interfaces&lt;/p&gt;
&lt;p&gt;An interface specifies a set of transaction types, where each type is defined
as a function with parameter and return types. When two tasks are connected via
an interface, one operates as a server and the other as a client. The client is
able to initiate a transaction with the corresponding server, with syntax
similar to a conventional function call. This interaction can be seen as a
remote procedure call. For example, in the parallel&amp;nbsp;statement:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;interface&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;interface&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;par&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// server&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Received %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// client&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;the client initiates the transaction &lt;code&gt;f&lt;/code&gt;, with the parameter value 42, from the
interface &lt;code&gt;i&lt;/code&gt;. The server waits on the transaction (as a case in the select
statement) and responds when the client initiates it by printing out a message
with the received parameter value. Transaction functions can also be used for
two-way communication by using reference parameters, allowing data to be
transferred from a client to a server, and then back&amp;nbsp;again.&lt;/p&gt;
&lt;p&gt;Interfaces can only be used by two tasks; they do not allow multiple clients to
be connected to one server. The types of either end of an interface connection
of type &lt;code&gt;T&lt;/code&gt; are server interface &lt;code&gt;T&lt;/code&gt; and client interface &lt;code&gt;T&lt;/code&gt;. Therefore, when
interface types are passed as parameters, the type of connection must also be
specified, for&amp;nbsp;example:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;interface&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;interface&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;interface&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;par&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Transaction functions in an interface restrict servers to reacting only in
response to client requests, but in some circumstances it is useful for a
server to be able to trigger a response from the client. This can be achieved
by annotating a function in the interface with no parameters and a void return
type, with &lt;code&gt;[[notification]]&lt;/code&gt; slave. The client waits on the notification
transaction in a select statement for the server to initiate it. A
corresponding function can be annotated with &lt;code&gt;[[clears_notification]]&lt;/code&gt;, which is
called by the slave to clear the notification. In the following simple&amp;nbsp;example:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;interface&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;[notification&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;slave&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isReady&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;[clears_notification&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;interface&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;par&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;i2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isReady&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isReady&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;i2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;when client 2 initiates the transaction function &lt;code&gt;f&lt;/code&gt;, the server notifies client
1 via the transaction function &lt;code&gt;isReady&lt;/code&gt;. Client 1 waits for the server
notification, and then initiates &lt;code&gt;getValue&lt;/code&gt; when it is&amp;nbsp;received.&lt;/p&gt;
&lt;p&gt;So that it is easier to connect many clients to one server, interfaces can also
be declared as arrays. A server can select over an interface array using an
index&amp;nbsp;variable.&lt;/p&gt;
&lt;p&gt;Interfaces can also be extended, so that basic client interfaces can be
augmented with new functionality. In particular, client interface extensions
can invoke transaction functions in the base interface to provide a layer of
additional&amp;nbsp;complexity.&lt;/p&gt;
&lt;h3&gt;Channels&lt;/h3&gt;
&lt;p&gt;Communication channels provide a more primitive way of communicating between
tasks than interfaces. A channel connects two tasks and allows them to send and
receive data, using the in &lt;code&gt;&amp;lt;:&lt;/code&gt; and out &lt;code&gt;:&amp;gt;&lt;/code&gt; operators respectively. A
communication only occurs when an input is matched with an output, and because
either side waits for the other to be ready, this also causes the tasks to
synchronise. In the&amp;nbsp;following:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;chan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;par&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;the value 42 is sent over the channel &lt;code&gt;c&lt;/code&gt; and assigned to the variable &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Streaming&amp;nbsp;channels&lt;/h3&gt;
&lt;p&gt;A streaming channel does not require each input and matching output to
synchronise, so communication can occur&amp;nbsp;asynchronously.&lt;/p&gt;
&lt;h3&gt;Event&amp;nbsp;handling&lt;/h3&gt;
&lt;p&gt;The select statement waits for events to occur. It is similar to the
alternation process in occam. Each component of a select is an event, such as
an interface transaction, channel input or port input (see #&lt;span class="caps"&gt;IO&lt;/span&gt;), and an
associated action. When a select is executed, it waits until the first event is
enabled and then executes that event&amp;#8217;s action. In the following&amp;nbsp;example:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;right&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;the select statement merges data from left and right channels on to an out&amp;nbsp;channel.&lt;/p&gt;
&lt;p&gt;A select case can be guarded, so that the case is only selected if the guard
expression is true at the same time the event is enabled. For example, with a&amp;nbsp;guard:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;the left-hand channel of the above example can only input data when the
variable enable is&amp;nbsp;true.&lt;/p&gt;
&lt;p&gt;The selection of events is arbitrary, but event priority can be enforced with
the &lt;code&gt;[[ordered]]&lt;/code&gt; attribute for selects. The effect is that higher-priority
events occur earlier in the body of the&amp;nbsp;statement.&lt;/p&gt;
&lt;p&gt;To aid in creating reusable components and libraries, select functions can be
used to abstract multiple cases of a select into a single unit. The following
select function encapsulates the cases of the above select&amp;nbsp;statement:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chanend&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;chanend&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;chanend&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;right&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;so that the select statement can be&amp;nbsp;written:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Timing&lt;/h3&gt;
&lt;p&gt;Every tile has a reference clock that can be accessed via timer variables.
Performing an output operation on a timer reads the current time in cycles. For
example, to calculate the elapsed execution time of a function &lt;code&gt;f&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;timer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nl"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Elapsed time %u s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;CYCLES_PER_SEC&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where &lt;code&gt;CYCLES_PER_SEC&lt;/code&gt; is defined to be the number of cycles per&amp;nbsp;second.&lt;/p&gt;
&lt;p&gt;Timers can also be used in select statements to trigger events. For example,
the select&amp;nbsp;statement:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;timer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;timerafter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Action to be performed after the delay&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;waits for the timer &lt;code&gt;t&lt;/code&gt; to exceed the value of time before reacting to it. The
value of &lt;code&gt;t&lt;/code&gt; is discarded with the syntax &lt;code&gt;:&amp;gt; void&lt;/code&gt;, but it can be assigned to a
variable &lt;code&gt;x&lt;/code&gt; with the syntax &lt;code&gt;:&amp;gt; int x&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;span class="caps"&gt;IO&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Variables of the type port provide access to &lt;span class="caps"&gt;IO&lt;/span&gt; pins on an XCore device in &lt;span class="caps"&gt;XC&lt;/span&gt;.
Ports can have power-of-two widths, allowing the same number of bits to be
input or output every cycle. The same channel input and output operators &lt;code&gt;&amp;lt;&lt;/code&gt;
and &lt;code&gt;&amp;gt;&lt;/code&gt; respectively are used for&amp;nbsp;this.&lt;/p&gt;
&lt;p&gt;The following program continuously reads the value on one port and outputs it
on&amp;nbsp;another:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;xs1.h&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;XS1_PORT_1A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;XS1_PORT_1B&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The declaration of ports must have global scope and each port must specify
whether it is inputting or outputting, and is assigned a fixed value to specify
which pins it corresponds to. These values are defined as macros in a system
header file (&lt;code&gt;xs1.h&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;By default, ports are driven at the tile&amp;#8217;s reference clock. However, clock
block resources can be used to provide different clock signals, either by
dividing the reference clock, or based on an external signal. Ports can be
further configured to use buffering and to synchronise with other ports. This
configuration is performed using library functions. Port&amp;nbsp;events&lt;/p&gt;
&lt;p&gt;Ports can generate events, which can be handled in select statements. For
example, the&amp;nbsp;statement:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;pinseq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Received input %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;uses the predicate when &lt;code&gt;pinseq&lt;/code&gt; to wait for the value on the port &lt;code&gt;p&lt;/code&gt; to equal &lt;code&gt;v&lt;/code&gt;
before triggering the response to print a&amp;nbsp;notification.&lt;/p&gt;
&lt;h3&gt;Port&amp;nbsp;timing&lt;/h3&gt;
&lt;p&gt;To be able to control when outputs on a port occur with respect to the port&amp;#8217;s
clock, outputs can be timestamped or timed. The timestamped&amp;nbsp;statement:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;causes the value &lt;code&gt;v&lt;/code&gt; to be output on the port &lt;code&gt;p&lt;/code&gt; and for count to be set to the
value of the port&amp;#8217;s counter (incremented by one each reference clock cycle).
The timed output&amp;nbsp;statement:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;causes the port to wait until its counter reaches the value of count before the
value v is&amp;nbsp;output.&lt;/p&gt;
&lt;h3&gt;Multiplexing tasks onto&amp;nbsp;cores&lt;/h3&gt;
&lt;p&gt;By default, each task maps to one core on a tile. Because the number of cores
is limited (eight in current XCore devices), &lt;span class="caps"&gt;XC&lt;/span&gt; provides two ways to map
multiple tasks to cores and better exploit the available&amp;nbsp;cores.&lt;/p&gt;
&lt;p&gt;Server tasks that are composed of a never-ending loop containing a select
statement can be marked as combinable with the attribute &lt;code&gt;[[combinable]]&lt;/code&gt;. This
allows the compiler to combine two or more combinable tasks to run on the same
core, by merging the cases into a single&amp;nbsp;select.&lt;/p&gt;
&lt;p&gt;Tasks of the same form as combinable ones, except that each case of the select
handles a transaction function, can be marked with the attribute
&lt;code&gt;[[distributable]]&lt;/code&gt;. This allows the compiler to convert the select cases into
local function&amp;nbsp;calls.&lt;/p&gt;
&lt;h3&gt;Memory&amp;nbsp;access&lt;/h3&gt;
&lt;p&gt;&lt;span class="caps"&gt;XC&lt;/span&gt; has two models of memory access: safe and unsafe. Safe access is the default
in which checks are made to ensure&amp;nbsp;that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;memory accesses do not occur outside of their&amp;nbsp;bounds;&lt;/li&gt;
&lt;li&gt;memory aliases are not&amp;nbsp;created;&lt;/li&gt;
&lt;li&gt;dangling pointers are not&amp;nbsp;created.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These guarantees are achieved through a combination of a different kinds of
pointers (restricted, aliasing, movable), static checking during compilation
and run-time&amp;nbsp;checks.&lt;/p&gt;
&lt;p&gt;Unsafe pointers provide the same behaviour as pointers in C. An unsafe pointer
must be declared with the unsafe keyword, and they can only be used within
&lt;code&gt;unsafe { ... }&lt;/code&gt; regions.&lt;/p&gt;
&lt;h3&gt;Additional&amp;nbsp;features&lt;/h3&gt;
&lt;h4&gt;References&lt;/h4&gt;
&lt;p&gt;&lt;span class="caps"&gt;XC&lt;/span&gt; provides references, that are similar to those in C++ and are specified with
the &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; symbol after the type. A reference provides another name for an existing
variable, such that reading and writing it is the same as reading and writing
the original variable. References can refer to elements of an array or
structure and can be used as parameters to regular and transaction&amp;nbsp;functions.&lt;/p&gt;
&lt;h4&gt;Nullable&amp;nbsp;types&lt;/h4&gt;
&lt;p&gt;Resource types such as interfaces, channel ends, ports and clocks must always
have a valid value. The nullable qualifier allows these types to have no value,
which is specified with the &lt;code&gt;?&lt;/code&gt; symbol. For example, a nullable channel is
declared&amp;nbsp;with:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;chan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nullable resource types can also be used to implement optional resource
arguments for functions. The &lt;code&gt;isnull()&lt;/code&gt; builtin function can be used to check
if a resource is&amp;nbsp;null.&lt;/p&gt;
&lt;h4&gt;Multiple&amp;nbsp;returns&lt;/h4&gt;
&lt;p&gt;In &lt;span class="caps"&gt;XC&lt;/span&gt;, functions can return multiple values. For example, the following
function implements the swap&amp;nbsp;operation:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The function swap is called with a multiple&amp;nbsp;assignment:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Multicore Hello&amp;nbsp;World&lt;/h2&gt;
&lt;p&gt;The following program prints &lt;code&gt;Hello World&lt;/code&gt; on four&amp;nbsp;processors:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;platform.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;chanend&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;chanend&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello from core %d!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;chan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;par&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tile&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;References and further&amp;nbsp;reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;David May. The &lt;span class="caps"&gt;XMOS&lt;/span&gt; &lt;span class="caps"&gt;XS1&lt;/span&gt; Architecture
   (&lt;a href="http://www.xmos.com/download/public/The-XMOS-XS1-Architecture(X7879A).pdf"&gt;&lt;span class="caps"&gt;PDF&lt;/span&gt;&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Douglas R. Watt. Programming &lt;span class="caps"&gt;XC&lt;/span&gt; on &lt;span class="caps"&gt;XMOS&lt;/span&gt; Devices
   (&lt;a href="https://www.xmos.com/download/public/XC-Programming-Guide(X1009B).pdf"&gt;&lt;span class="caps"&gt;PDF&lt;/span&gt;&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;The &lt;span class="caps"&gt;XMOS&lt;/span&gt; programming guide
   (&lt;a href="https://web.archive.org/web/20141129060750/https://www.xmos.com/support/xtools/documentation?subcategory=Programming%20in%20C%20and%20XC&amp;amp;component=17653"&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt;&lt;/a&gt;,
   &lt;a href="https://www.xmos.com/download/public/XMOS-Programming-Guide-(documentation)(E).pdf"&gt;&lt;span class="caps"&gt;PDF&lt;/span&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The &lt;span class="caps"&gt;XC&lt;/span&gt; Language Specification
   (&lt;a href="https://web.archive.org/web/20141129060737/https://www.xmos.com/support/xtools/documentation?subcategory=Programming%20in%20C%20and%20XC&amp;amp;component=14805"&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.teigfam.net/oyvind/home/technology/141-xc-is-c-plus-x/"&gt;xC is C plus x&lt;/a&gt;, Ãyvind&amp;nbsp;Teig.&lt;/li&gt;
&lt;/ul&gt;</content><category term="notes"></category><category term="computing"></category><category term="computer-architecture"></category><category term="programming-languages"></category></entry><entry><title>Scalable abstractions for general-purpose parallelÂ computation</title><link href="http://jameswhanlon.com/scalable-abstractions-for-general-purpose-parallel-computation.html" rel="alternate"></link><published>2014-10-01T00:00:00+02:00</published><updated>2014-10-01T00:00:00+02:00</updated><author><name>James W. Hanlon</name></author><id>tag:jameswhanlon.com,2014-10-01:/scalable-abstractions-for-general-purpose-parallel-computation.html</id><summary type="html">&lt;p&gt;An overview of my PhD&amp;nbsp;thesis.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is my Ph.D. thesis that I completed at the University of Bristol in March
2014. I was supervised by &lt;a href="https://www.cs.bris.ac.uk/~dave/"&gt;David May&lt;/a&gt; and
&lt;a href="http://www.cs.bris.ac.uk/staff/simon/"&gt;Simon Hollis&lt;/a&gt;. I have licensed this work
under the
&lt;a href="http://creativecommons.org/licenses/by-nc-nd/4.0/"&gt;Creative Commons &lt;span class="caps"&gt;BY&lt;/span&gt;-&lt;span class="caps"&gt;NC&lt;/span&gt;-&lt;span class="caps"&gt;ND&lt;/span&gt; 4.0 license&lt;/a&gt;,
so that it can be shared but not modified. I was awarded an
&lt;a href="http://www.bristol.ac.uk/engineering/postgraduate/commendations/hanlon.html"&gt;Engineering Faculty commendation&lt;/a&gt;
for the&amp;nbsp;work.&lt;/p&gt;
&lt;h1&gt;Abstract&lt;/h1&gt;
&lt;p&gt;Parallelism has become the principal means of sustaining growth in
computational performance but there has been relatively little development in
general-purpose computer architectures or programming models that can deal
effectively with large amounts of it. A new general-purpose model of parallel
computing would enable standardisation between architectures, high-volume
production and software that is portable between different machines, now and as
they develop with future technology. There is substantial opportunity to
support this in emerging areas of embedded computing, where the problems of
sensing, interaction and decision making can exploit large amounts of&amp;nbsp;parallelism.&lt;/p&gt;
&lt;p&gt;This thesis demonstrates the essential aspects of a scalable general-purpose
model of parallel computation by proposing a Universal Parallel Architecture
(&lt;span class="caps"&gt;UPA&lt;/span&gt;), based on a highly-connected communication network, and a high-level
parallel programming language for it called sire that can be compiled using
simple techniques. The design of sire combines the essential capabilities of
shared-memory programming with the benefits of message passing to support a
range of programming paradigms and to provide powerful capabilities for
abstraction to build and compose subroutines and data structures in a
distributed context. The design also enables program code to be distributed at
run time to reuse memory and for processor allocation to be dealt with during
compilation so that the overheads of using distributed parallelism are&amp;nbsp;minimal.&lt;/p&gt;
&lt;p&gt;To evaluate whether the &lt;span class="caps"&gt;UPA&lt;/span&gt; is practical to build, a high-level implementation
model using current technologies is described. It demonstrates that the cost of
generality is relatively small; for a system with 4,096 processors, an overall
investment of around 25% of the system is required for the communication
network. Executing on specific &lt;span class="caps"&gt;UPA&lt;/span&gt; implementations, sire&amp;#8217;s primitives for
parallelism, communication and abstraction incur minimal overheads,
demonstrating its close correspondence to the &lt;span class="caps"&gt;UPA&lt;/span&gt; and its scalability.
Furthermore, as well as executing highly-parallel programs, the &lt;span class="caps"&gt;UPA&lt;/span&gt; can support
sequential programming techniques by emulating large memories, allowing general
sequential programs to be executed with a factor of 2 to 3 overhead when
compared to contemporary sequential&amp;nbsp;machines.&lt;/p&gt;
&lt;h1&gt;Published&amp;nbsp;as&lt;/h1&gt;
&lt;p&gt;James W. Hanlon, &lt;em&gt;Scalable abstractions for general-purpose parallel
computation&lt;/em&gt;.  Ph.D. thesis, Department of Computer Science, University of
Bristol, March&amp;nbsp;2014.&lt;/p&gt;
&lt;h1&gt;Download&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/files/thesis.pdf"&gt;&lt;span class="caps"&gt;PDF&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/files/thesis-print.pdf"&gt;Print &lt;span class="caps"&gt;PDF&lt;/span&gt;&lt;/a&gt; (no hyperlink&amp;nbsp;colours)&lt;/li&gt;
&lt;/ul&gt;</content><category term="notes"></category><category term="computing"></category><category term="computer-architecture"></category></entry></feed>