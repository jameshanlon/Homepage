<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>James W. Hanlon - projects</title><link href="http://jameswhanlon.com/" rel="alternate"></link><link href="http://jameswhanlon.com/feeds/projects.atom.xml" rel="self"></link><id>http://jameswhanlon.com/</id><updated>2022-11-18T00:00:00+01:00</updated><entry><title>Logic gates to a programming language using the Hex architecture</title><link href="http://jameswhanlon.com/logic-gates-to-a-programming-language-using-the-hex-architecture.html" rel="alternate"></link><published>2022-11-18T00:00:00+01:00</published><updated>2022-11-18T00:00:00+01:00</updated><author><name>James W. Hanlon</name></author><id>tag:jameswhanlon.com,2022-11-18:/logic-gates-to-a-programming-language-using-the-hex-architecture.html</id><summary type="html">&lt;p&gt;This note walks through a hardware implementation of a simple processor and
complete compiler for a programming language targeted at it. The processor
architecture is designed to as simple as possible but provide a sensible target
for the compilation of complex programs using simple strategies. The
implementation of the processor …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This note walks through a hardware implementation of a simple processor and
complete compiler for a programming language targeted at it. The processor
architecture is designed to as simple as possible but provide a sensible target
for the compilation of complex programs using simple strategies. The
implementation of the processor and its supporting tooling is small and self
contained so to be understandable and easily extendable. Besides being an
interesting side project, my motivation was to create a complete example as a
point of reference to explain how programming languages work and correspond to
the underlying hardware of a computer processor, or to provide a useful
reference for compilers and simulators, a starting point for another project or
just a curiosity in&amp;nbsp;itself.&lt;/p&gt;
&lt;p&gt;First, to provide some background. The project is based on the Hex processor
architecture that was designed by &lt;a href="http://people.cs.bris.ac.uk/~dave"&gt;David
May&lt;/a&gt; as a vehicle for teaching about how
computers work at the University of Bristol, whilst being flexible enough to
execute substantial programs and easily extensible. David provided a simulator
written in C and a bootstrapping compiler written in an accompanying simple
imperative programming language called X. The design of Hex draws on the &lt;a href="https://en.wikipedia.org/wiki/Transputer"&gt;Transputer
architecture&lt;/a&gt; and the earlier &lt;a href="http://people.cs.bris.ac.uk/~dave/S42ISA.pdf"&gt;Simple
42&lt;/a&gt;, particularly with the use of
short instruction encodings, a prefixing mechanism for creating larger immediates
and A, B and C registers for expression evaluation. These kind of architectural
features made the silicon implementation of the Simple 42 and Transputers small
enough to fit on a single chip in the technology of the day. X draws on the
basic sequential features of the &lt;a href="https://en.wikipedia.org/wiki/Occam_(programming_language)"&gt;occam programming
language&lt;/a&gt; but it
not dissimilar to a small subset of C, for&amp;nbsp;example.&lt;/p&gt;
&lt;p&gt;In my &lt;a href="https://github.com/jameshanlon/hex-processor"&gt;implementation&lt;/a&gt;, I have
created a simple C++ toolchain with a simulator, Hex assembler and X language
compiler, and a Verilog implementation of Hex. Before describing them, the
next two sections introduce Hex and&amp;nbsp;X.&lt;/p&gt;
&lt;h2&gt;The Hex&amp;nbsp;architecture&lt;/h2&gt;
&lt;p&gt;The Hex architecture is described in detail in &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/hex-processor/hexb.pdf"&gt;a separate
&lt;span class="caps"&gt;PDF&lt;/span&gt;&lt;/a&gt;, but I will give a brief summary here
and focus on several important aspects for reference. Hex has four registers:
program counter &lt;code&gt;pc&lt;/code&gt;, operand register &lt;code&gt;oreg&lt;/code&gt; and the A and B registers
&lt;code&gt;areg&lt;/code&gt; and &lt;code&gt;breg&lt;/code&gt; used for expression evaluation. The architecture is
agnostic of a particular word size, but it has to be a minimum of a byte and
multiples of a byte. In the included implementation the word size is 4 bytes.
Hex has sixteen instructions (hence its name!) that are summarised in the
following table. The instructions are grouped into memory access with absolute
or relative addressing modes, loading of constants, branching, inter-register
operations and supervisor&amp;nbsp;calls.&lt;/p&gt;
&lt;table class="table table-striped table-sm"&gt;
&lt;thead&gt;
  &lt;th scope="col"&gt;Opcode&lt;/th&gt;
  &lt;th scope="col"&gt;Behaviour&lt;/th&gt;
  &lt;th scope="col"&gt;Description&lt;/th&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;code&gt;LDAM&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;&lt;code&gt;areg := mem[oreg]&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;Load from memory with an absolute address into areg&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;code&gt;LDBM&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;&lt;code&gt;breg := mem[oreg]&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;Load from memory with an absolute address into breg&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;code&gt;STAM&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;&lt;code&gt;mem[oreg] := areg&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;Store to absolute address from areg&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;code&gt;LDAC&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;&lt;code&gt;areg := oreg&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;Load constant into areg&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;code&gt;LDBC&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;&lt;code&gt;breg := oreg&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;Load constant into breg&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;code&gt;LDAP&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;&lt;code&gt;areg := pc + oreg&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;Load program counter-relative address into areg&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;code&gt;LDAI&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;&lt;code&gt;areg := mem[areg + oreg]&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;Load from memory with base and offset into areg&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;code&gt;LDBI&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;&lt;code&gt;breg := mem[breg + oreg]&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;Load from memory with base and offset into breg&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;code&gt;STAI&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;&lt;code&gt;mem[breg + oreg] := areg&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;Store to memory with base and offset from areg&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;code&gt;BR&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;&lt;code&gt;pc := pc + oreg&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;Branch relative&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;code&gt;BRZ&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;&lt;code&gt;if areg = 0: pc := pc + oreg&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;Conditional branch relative on areg being zero&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;code&gt;BRN&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;&lt;code&gt;if areg &lt; 0: pc := pc + oreg&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;Conditional branch relative on areg being negative&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;code&gt;BRB&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;&lt;code&gt;pc := breg&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;Absolute branch&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;code&gt;PFIX&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;&lt;code&gt;oreg := oreg &lt;&lt; 4&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;Positive prefix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;code&gt;NFIX&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;&lt;code&gt;oreg = 0xFFFFFF00 | oreg &lt;&lt; 4&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;Negative prefix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;code&gt;OPR&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;-&lt;/td&gt;
  &lt;td&gt;Inter-register operation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;code&gt;ADD&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;&lt;code&gt;areg := areg + breg&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;Add areg and breg and set areg to the result&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;code&gt;SUB&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;&lt;code&gt;areg := areg - breg&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;Subtract areg and breg and set areg to the result&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;code&gt;SVC&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;-&lt;/td&gt;
  &lt;td&gt;Supervisor call&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;h3&gt;Prefixing&lt;/h3&gt;
&lt;p&gt;Prefixing using the &lt;code&gt;PFIX&lt;/code&gt; and &lt;code&gt;NFIX&lt;/code&gt; operations generates operand values
in &lt;code&gt;oreg&lt;/code&gt; larger than the 4-bit instruction immediate. For example, the
following instructions generate the value 16 in &lt;code&gt;oreg&lt;/code&gt; and use &lt;code&gt;LDAC&lt;/code&gt; to
assign it to &lt;code&gt;areg&lt;/code&gt; :&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PFIX&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;oreg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;oreg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="n"&gt;x000010&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;LDAC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;areg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;oreg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;16&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Prefixes can be chained to extend the operand range, for example, generating the
value 496 requires two positive prefixes before a load constant&amp;nbsp;instruction:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PFIX&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;oreg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;oreg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="n"&gt;x000010&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;PFIX&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;15&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;oreg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;oreg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="n"&gt;x0001f0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;LDAC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;areg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;oreg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;496&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Negative values always require a negative prefix to fill the top most &lt;code&gt;oreg&lt;/code&gt;
bits with ones, so to load the value -1 into &lt;code&gt;oreg&lt;/code&gt; then &lt;code&gt;areg&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;NFIX&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;15&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;oreg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="n"&gt;xFFFFFF00&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;oreg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="n"&gt;xfffffff0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;LDAC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;15&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;areg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;oreg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;4294967295&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And to load -512, a positive prefix is required to scale the negative&amp;nbsp;value:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;NFIX&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;14&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;oreg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="n"&gt;xFFFFFF00&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;oreg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="n"&gt;xffffffe0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;PFIX&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;oreg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;oreg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;4294967264&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="n"&gt;xfffffe00&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;LDAC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;areg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;oreg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;4294966784&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Inter-register&amp;nbsp;operations&lt;/h3&gt;
&lt;p&gt;The inter-register operations use the &lt;code&gt;OPR&lt;/code&gt; opcode and consist only of
addition and subtraction. The group can be extended by implementing additional
immediate opcodes to add new operations to the processor (such as other
arithmetic and bitwise operations). The 4-bit immediate supports up to 16
inter-register operations without the need for prefixing, but many more with
prefixing and the according overhead to form larger immediates. The following
instruction sequence adds two numbers from fixed locations in memory, with the
result written to &lt;code&gt;areg&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;LDAM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;areg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mem&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;oreg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="n"&gt;x000001&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;LDBM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;breg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mem&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;oreg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="n"&gt;x000002&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;OPR&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ADD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;areg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;areg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;breg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A special inter-register operation is a supervisor call that transfers
control to the system to complete an action such as read or write from a
file, or to halt the program. The supervisor call type is encoded in the
&lt;code&gt;oreg&lt;/code&gt; and arguments and return values specific to the call type are passed
and returned on the stack using the standard calling convention. An example
code sequence to invoke the exit supervisor call&amp;nbsp;is:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;LDAC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;areg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;opcode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;LDBM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Load&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pointer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;breg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;STAI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Store&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;areg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;two&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;parameter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;LDAC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Load&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;opcode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;OPR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SVC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Perform&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;supervisor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With the following execution trace, noting that the simulator implements the
system call directly rather than being handled by a kernel&amp;nbsp;routine:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;LDAC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;areg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;oreg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;LDBM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;breg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mem&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;oreg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="n"&gt;x000001&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;16383&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;STAI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mem&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;breg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;16383&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;oreg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="n"&gt;x004001&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;areg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;LDAC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;areg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;oreg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;OPR&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mh"&gt;3&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Load-store&amp;nbsp;operations&lt;/h3&gt;
&lt;p&gt;There are two variants of load and store instructions: using absolute addresses
and addresses relative to a base address. Absolute addressing (&lt;code&gt;LDAM&lt;/code&gt;,
&lt;code&gt;LDBM&lt;/code&gt; and &lt;code&gt;STAM&lt;/code&gt;) is intended to access objects in memory that are
allocated at offsets that are fixed with respect to a program, such as constant
values and global variables. Relative-addressing (&lt;code&gt;LDAI&lt;/code&gt;, &lt;code&gt;LDBI&lt;/code&gt; and
&lt;code&gt;STAI&lt;/code&gt;) is typically used to access objects that are relative to a dynamic
position, such as the stack pointer, or index into an array. The particular
variants of load/store instructions is influenced by their targeting from a
compiler. Having pairs of load instructions that can write to &lt;code&gt;areg&lt;/code&gt; or
&lt;code&gt;breg&lt;/code&gt; (such as &lt;code&gt;LDAM&lt;/code&gt; and &lt;code&gt;LDBM&lt;/code&gt;) gives flexibility when generating
operands for binary operations, whereas having only single variants of stores
(&lt;code&gt;STAM&lt;/code&gt; and &lt;code&gt;STAI&lt;/code&gt;) fits most cases where expression results generated into
&lt;code&gt;areg&lt;/code&gt; need to be written to&amp;nbsp;memory.&lt;/p&gt;
&lt;h3&gt;Branching&lt;/h3&gt;
&lt;p&gt;For branching, a relative branch is provided with &lt;code&gt;BR&lt;/code&gt;, which can be used, for
example, to reach a label location. Conditional branch versions &lt;code&gt;BRZ&lt;/code&gt; and
&lt;code&gt;BRN&lt;/code&gt; are used to implement logical binary operations (less than, equal etc)
and &lt;code&gt;BRB&lt;/code&gt; is an absolute branch that is used, for example, to return to
a calling function using an address retrieved from memory (see example in next&amp;nbsp;section).&lt;/p&gt;
&lt;h3&gt;Address&amp;nbsp;generation&lt;/h3&gt;
&lt;p&gt;A special constant-loading instruction &lt;code&gt;LDAP&lt;/code&gt; is used to generate bytewise
program addresses, relative to the program counter, such as for branch targets.
The following instruction sequence performs a call to &lt;code&gt;foo&lt;/code&gt; but first loads
the return (link) address using &lt;code&gt;LDAP&lt;/code&gt; to use with &lt;code&gt;BR&lt;/code&gt;. The callee &lt;code&gt;foo&lt;/code&gt;
returns to the caller using &lt;code&gt;BRB&lt;/code&gt;.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;FUNC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nv"&gt;LDBM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nv"&gt;STAI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;#&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;Save&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;caller&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;address&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
...&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nv"&gt;LDBI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;#&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;Restore&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;caller&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;address&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nv"&gt;OPR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;#&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;caller&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nv"&gt;PROC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
...&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nv"&gt;LDAP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;lab2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nv"&gt;BR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nv"&gt;lab2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These instructions have the following execution&amp;nbsp;trace:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;32&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;LDAP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;areg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;oreg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;62&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;33&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;NFIX&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;13&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;oreg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="n"&gt;xFFFFFF00&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;oreg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="n"&gt;xffffffd0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;34&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;BR&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;oreg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;4294967249&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="n"&gt;x00000f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;LDBM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;breg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mem&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;oreg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="n"&gt;x000001&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;199994&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;STAI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mem&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;breg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;199994&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;oreg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="n"&gt;x030d3a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;areg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;62&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;10&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;LDBI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;breg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mem&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;breg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;199994&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;oreg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="n"&gt;x030d3a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;62&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;11&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;OPR&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BRB&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;breg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="n"&gt;x00003e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;35&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;The X&amp;nbsp;language&lt;/h2&gt;
&lt;p&gt;The X language is defined in &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/hex-processor/xhexnotes.pdf"&gt;a separate
&lt;span class="caps"&gt;PDF&lt;/span&gt;&lt;/a&gt;. X is simple enough that it can
be compiled using simple techniques to the Hex architecture, whilst providing
enough flexibility to express complex programs such as its own compiler (more
on that later). X is an imperative language and has features for procedure
calling, composition of statements, looping and conditional statements,
expressions including function calls, and representation of memory with
variables and arrays. To give an indicative example of X programming, the
following program implements Bubblesort to sort an array of four&amp;nbsp;elements:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;proc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j+1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j+1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j+1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;skip&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;proc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Limitations of X to note that simplify its implementation&amp;nbsp;are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Arrays are limited to one&amp;nbsp;dimension.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No operator precedence to avoid built-in rules so precedence must be
  indicated explicitly with bracketing (apart from associative&amp;nbsp;operators).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Conditional statements (beginning &lt;code&gt;if&lt;/code&gt;) must always have an &lt;code&gt;else&lt;/code&gt; part
  to simplify&amp;nbsp;parsing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Variables can only be passed by value into&amp;nbsp;procedures.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There is no block scoping so variable and array declarations can only be made
  at global and procedure scopes. Similarly, nested definitions of procedures
  are not&amp;nbsp;permitted.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other noteworthy features of X&amp;nbsp;are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There are two types of procedure: &lt;strong&gt;processes&lt;/strong&gt; (using the &lt;code&gt;proc&lt;/code&gt; keyword)
  that execute a sequence of steps with possible side effects, and
  &lt;strong&gt;functions&lt;/strong&gt; (using the &lt;code&gt;func&lt;/code&gt;keyword ) that have no side effects and return
  a&amp;nbsp;value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Names in a program are introduced as &lt;strong&gt;definitions&lt;/strong&gt; of processes or functions,
  &lt;strong&gt;declarations&lt;/strong&gt; that represent memory locations, and &lt;strong&gt;abbreviations&lt;/strong&gt; that
  introduce alternative names for expressions, arrays, processes and&amp;nbsp;functions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The scoping and abbreviation rules are defined so that that actual parameters
  act as abbreviations of the supplied formals. This allows processes and
  functions to be compiled by either as closed subroutines or by substitution of
  the body at the call site, either as a source code transformation or compiler
  optimisation. For example, given the definition &lt;code&gt;proc foo(val a, array b) is B&lt;/code&gt;,
  it can be called as a subroutine: &lt;code&gt;foo(x, y)&lt;/code&gt; or substituted: &lt;code&gt;val a = x; array b = y; B&lt;/code&gt;
  providing the names are unique in the&amp;nbsp;procedure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;valof&lt;/code&gt; element allows processes to be called from expressions to
  generate values, however it is not implemented in &lt;code&gt;xhexb&lt;/code&gt; or &lt;code&gt;xcmp&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Hex processor integrated&amp;nbsp;circuit&lt;/h2&gt;
&lt;p&gt;A hardware implementation of the Hex processor is written in System Verilog,
&lt;a href="https://github.com/jameshanlon/hex-processor/blob/master/verilog/processor.sv"&gt;&lt;code&gt;processor.sv&lt;/code&gt;&lt;/a&gt;,
in just 150 lines. This implementation is single cycle in that all elements of
instruction execution (ie instruction fetch from memory, decode, instruction
memory access and state writeback) are completed in that time. A separate
memory module,
&lt;a href="https://github.com/jameshanlon/hex-processor/blob/master/verilog/memory.sv"&gt;&lt;code&gt;memory.sv&lt;/code&gt;&lt;/a&gt;
implements a single-cycle random-access memory with two ports: one for
instruction fetch and the other for data access so that they can occur
simultaneously in the same cycle. Note that because memory access time
increases with the memory capacity, a implementation of Hex accessing a large
memory (ie more than a few thousand bytes) would add pipelining to hide the
latency to memory. Some degree of pipelining is standard in processor
implementations. The hardware design is simulated using Verilator, with C++
testbench driver code in &lt;a href="https://github.com/jameshanlon/hex-processor/blob/master/hextb.cpp"&gt;&lt;code&gt;hextb.cpp&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Using &lt;a href="https://theopenroadproject.org/"&gt;OpenROAD&lt;/a&gt;, an open-source tool chain
for performing synthesis, optimisation and physical layout of digital circuits,
we can compile Hex into an integrated circuit layout in order that it could be
manufactured into a silicon device. OpenROAD uses the
&lt;a href="https://github.com/google/skywater-pdk"&gt;SkyWater Process Design Kit&lt;/a&gt; (&lt;span class="caps"&gt;PDK&lt;/span&gt;),
for creating designs in 130 nm process technology, which was a technology first
commercialised in 2001. The &lt;span class="caps"&gt;PDK&lt;/span&gt; is a collection of analog and digital cell
libraries, design rules and tooling. Since OpenROAD uses
&lt;a href="https://yosyshq.net/yosys/"&gt;Yosys&lt;/a&gt; for synthesis, and it doesn&amp;#8217;t support
particular SystemVerilog features, I used
&lt;a href="https://github.com/zachjs/sv2v"&gt;sv2v&lt;/a&gt; to convert the implementation to plain
Verilog 2005 (see &lt;a href="https://github.com/jameshanlon/hex-processor/blob/master/verilog/processor.v"&gt;&lt;code&gt;processor.v&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The physical design is based on an OpenROAD &lt;a href="https://openroad.readthedocs.io/en/latest/tutorials/FlowTutorial.html"&gt;default
flow&lt;/a&gt;,
which takes a few minutes to be compiled from the source &lt;span class="caps"&gt;RTL&lt;/span&gt;. The final design
has the following&amp;nbsp;characteristics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A die size of ~280x280&amp;nbsp;microns.&lt;/li&gt;
&lt;li&gt;A total of 9,719 standard&amp;nbsp;cells.&lt;/li&gt;
&lt;li&gt;A cell area of 16,706 square microns at 25%&amp;nbsp;utilisation.&lt;/li&gt;
&lt;li&gt;A clock speed of 229&amp;nbsp;MHz.&lt;/li&gt;
&lt;li&gt;Total switching power of 4.12&amp;nbsp;mW.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The OpenROAD &lt;span class="caps"&gt;GUI&lt;/span&gt; provides many ways to visualise and explore the design. The
following images are some examples of the different&amp;nbsp;views.&lt;/p&gt;
&lt;div class="container"&gt;
  &lt;div class="row align-items-center"&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
&lt;figure class="figure"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/hex-processor/floorplan-stdcells.png" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/floorplan-stdcells_600x600.png" alt="Floorplan showing the standard cells only, with the two lowest metal layers (logic and M1)."&gt;
  &lt;/a&gt;
  &lt;figcaption class="figure-caption text-left"&gt;Floorplan showing the standard cells only, with the two lowest metal layers (logic and M1).&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
&lt;figure class="figure"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/hex-processor/floorplan-closeup.png" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/floorplan-closeup_600x600.png" alt="A zoomed view showing standard cells with logic and M1 layers only."&gt;
  &lt;/a&gt;
  &lt;figcaption class="figure-caption text-left"&gt;A zoomed view showing standard cells with logic and M1 layers only.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class="container"&gt;
  &lt;div class="row align-items-center"&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
&lt;figure class="figure"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/hex-processor/floorplan-clocktree.png" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/floorplan-clocktree_600x600.png" alt="A view showing all nets constituting the clock tree."&gt;
  &lt;/a&gt;
  &lt;figcaption class="figure-caption text-left"&gt;A view showing all nets constituting the clock tree.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
&lt;figure class="figure"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/hex-processor/floorplan-routing-congestion.png" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/floorplan-routing-congestion_600x600.png" alt="A heatmap view representing routing congestion."&gt;
  &lt;/a&gt;
  &lt;figcaption class="figure-caption text-left"&gt;A heatmap view representing routing congestion.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class="container"&gt;
  &lt;div class="row align-items-center"&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
&lt;figure class="figure"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/hex-processor/floorplan-setup-worstpath.png" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/floorplan-setup-worstpath_600x600.png" alt="A visualisation of the worst setup path in the design, including the nets and cells on the path as well as the paths for the launch and capture clocks."&gt;
  &lt;/a&gt;
  &lt;figcaption class="figure-caption text-left"&gt;A visualisation of the worst setup path in the design, including the nets and cells on the path as well as the paths for the launch and capture clocks.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
&lt;figure class="figure"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/hex-processor/floorplan-hold-worstpath.png" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/floorplan-hold-worstpath_600x600.png" alt="The same visualisation for the worst (least slack) hold path in the design."&gt;
  &lt;/a&gt;
  &lt;figcaption class="figure-caption text-left"&gt;The same visualisation for the worst (least slack) hold path in the design.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;Hex&amp;nbsp;tooling&lt;/h2&gt;
&lt;p&gt;There are three tools provided in the Hex toolchain: a Hex instruction set
simulator &lt;code&gt;hexsim&lt;/code&gt;, a Hex assembler &lt;code&gt;hexasm&lt;/code&gt; and an X compiler &lt;code&gt;xcmp&lt;/code&gt;.
Instructions on how to build the tools are included in the
&lt;a href="https://jameshanlon.github.io/hex-processor"&gt;documentation&lt;/a&gt;.
The implementation is provided in a small number of source files (with only one
external dependency on &lt;code&gt;boost::format&lt;/code&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;General Hex definitions are provided in
  &lt;a href="https://github.com/jameshanlon/hex-processor/blob/master/hex.hpp"&gt;&lt;code&gt;hex.hpp&lt;/code&gt;&lt;/a&gt; and
  &lt;a href="https://github.com/jameshanlon/hex-processor/blob/master/hex.cpp"&gt;&lt;code&gt;hex.cpp&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Hex simulator is implemented in the headers
  &lt;a href="https://github.com/jameshanlon/hex-processor/blob/master/hexsim.hpp"&gt;&lt;code&gt;hexsim.hpp&lt;/code&gt;&lt;/a&gt; and
  &lt;a href="https://github.com/jameshanlon/hex-processor/blob/master/hexsimio.hpp"&gt;&lt;code&gt;hexsimio.hpp&lt;/code&gt;&lt;/a&gt;.
  (Note that listings for a complete simulator in C are given in the &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/hex-processor/hexb.pdf"&gt;Hex definition (&lt;span class="caps"&gt;PDF&lt;/span&gt;)&lt;/a&gt;.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Hex assembler is implemented in the header
  &lt;a href="https://github.com/jameshanlon/hex-processor/blob/master/hexasm.hpp"&gt;&lt;code&gt;hexasm.hpp&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The X compiler is implemented in the header
  &lt;a href="https://github.com/jameshanlon/hex-processor/blob/master/xcmp.hpp"&gt;&lt;code&gt;xcmp.hpp&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Driver code for the respective command-line tools &lt;code&gt;hexsim&lt;/code&gt;, &lt;code&gt;hexasm&lt;/code&gt; and
  &lt;code&gt;xcmp&lt;/code&gt; is implemented in
  &lt;a href="https://github.com/jameshanlon/hex-processor/blob/master/hexsim.cpp"&gt;&lt;code&gt;hexsim.cpp&lt;/code&gt;&lt;/a&gt;,
  &lt;a href="https://github.com/jameshanlon/hex-processor/blob/master/hexasm.cpp"&gt;&lt;code&gt;hexasm.cpp&lt;/code&gt;&lt;/a&gt; and
  &lt;a href="https://github.com/jameshanlon/hex-processor/blob/master/xcmp.cpp"&gt;&lt;code&gt;xcmp.cpp&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;A simple&amp;nbsp;example&lt;/h3&gt;
&lt;p&gt;Taking a most basic example of an assembly program that simply&amp;nbsp;exits:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜ cat tests/asm/exit0.S
BR start
DATA &lt;span class="m"&gt;16383&lt;/span&gt; &lt;span class="c1"&gt;# sp&lt;/span&gt;
start
LDAC &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="c1"&gt;# areg &amp;lt;- 0&lt;/span&gt;
LDBM &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# breg &amp;lt;- sp&lt;/span&gt;
STAI &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="c1"&gt;# sp[2] &amp;lt;- areg&lt;/span&gt;
LDAC &lt;span class="m"&gt;0&lt;/span&gt;
OPR SVC
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The assembler can display the program layout in memory and computed symbol&amp;nbsp;values:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜ hexasm tests/asm/exit0.S --instrs
&lt;span class="m"&gt;00000000&lt;/span&gt; BR start &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;         &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; bytes&lt;span class="o"&gt;)&lt;/span&gt;
0x000004 DATA &lt;span class="m"&gt;16383&lt;/span&gt;           &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; bytes&lt;span class="o"&gt;)&lt;/span&gt;
0x000008 start                &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; bytes&lt;span class="o"&gt;)&lt;/span&gt;
0x000008 LDAC &lt;span class="m"&gt;0&lt;/span&gt;               &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; bytes&lt;span class="o"&gt;)&lt;/span&gt;
0x000009 LDBM &lt;span class="m"&gt;1&lt;/span&gt;               &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; bytes&lt;span class="o"&gt;)&lt;/span&gt;
0x00000a STAI &lt;span class="m"&gt;2&lt;/span&gt;               &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; bytes&lt;span class="o"&gt;)&lt;/span&gt;
0x00000b LDAC &lt;span class="m"&gt;0&lt;/span&gt;               &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; bytes&lt;span class="o"&gt;)&lt;/span&gt;
0x00000c OPR SVC              &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; bytes&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;00000000&lt;/span&gt; PADDING &lt;span class="m"&gt;3&lt;/span&gt;            &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt; bytes&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;13&lt;/span&gt; bytes
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And create a 13-byte executable&amp;nbsp;binary:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜ hexasm tests/asm/exit0.S
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This binary can then be simulated with tracing to show what&amp;#8217;s going on (the
first column is the cycle count and the second is the &lt;code&gt;pc&lt;/code&gt; value):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜ hexsim a.out -t
&lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;      BR   &lt;span class="m"&gt;7&lt;/span&gt;  &lt;span class="nv"&gt;pc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; pc + oreg &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;0x000008&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;      &lt;span class="m"&gt;8&lt;/span&gt;      LDAC &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="nv"&gt;areg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; oreg &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="m"&gt;2&lt;/span&gt;      &lt;span class="m"&gt;9&lt;/span&gt;      LDBM &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="nv"&gt;breg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; mem&lt;span class="o"&gt;[&lt;/span&gt;oreg &lt;span class="o"&gt;(&lt;/span&gt;0x000001&lt;span class="o"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;16383&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;3&lt;/span&gt;      &lt;span class="m"&gt;10&lt;/span&gt;     STAI &lt;span class="m"&gt;2&lt;/span&gt;  mem&lt;span class="o"&gt;[&lt;/span&gt;breg &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;16383&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; + oreg &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0x004001&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; areg &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;4&lt;/span&gt;      &lt;span class="m"&gt;11&lt;/span&gt;     LDAC &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="nv"&gt;areg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; oreg &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="m"&gt;5&lt;/span&gt;      &lt;span class="m"&gt;12&lt;/span&gt;     OPR  &lt;span class="m"&gt;3&lt;/span&gt;  &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The X compiler can be used to produce more complex Hex programs. Starting with
a similar most basic program  written in&amp;nbsp;X:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;proc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;skip&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This null program is compiled into Hex assembly, where the entry code calls
&lt;code&gt;main&lt;/code&gt; then exits, and &lt;code&gt;main&lt;/code&gt; does nothing (apart from saving and restoring
the link&amp;nbsp;location):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜ xcmp tests/x/exit.x --insts-lowered
BR start
DATA &lt;span class="m"&gt;199999&lt;/span&gt;
start
LDAP _exit
BR main
_exit
LDBM &lt;span class="m"&gt;1&lt;/span&gt;
LDAC &lt;span class="m"&gt;0&lt;/span&gt;
STAI &lt;span class="m"&gt;2&lt;/span&gt;
OPR SVC

PROC main
LDBM &lt;span class="m"&gt;1&lt;/span&gt;
STAI &lt;span class="m"&gt;0&lt;/span&gt;
lab0
LDBM &lt;span class="m"&gt;1&lt;/span&gt;
LDBI &lt;span class="m"&gt;0&lt;/span&gt;
OPR BRB
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And when simulated produces the following trace where execution through
&lt;code&gt;main&lt;/code&gt; can be seen since it is the only labelled portion of the&amp;nbsp;code:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜ hexsim a.out -t
&lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;                   BR   &lt;span class="m"&gt;7&lt;/span&gt;  &lt;span class="nv"&gt;pc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; pc + oreg &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;0x000008&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;      &lt;span class="m"&gt;8&lt;/span&gt;                   LDAP &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="nv"&gt;areg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; pc &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; + oreg &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="m"&gt;2&lt;/span&gt;      &lt;span class="m"&gt;9&lt;/span&gt;                   BR   &lt;span class="m"&gt;4&lt;/span&gt;  &lt;span class="nv"&gt;pc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; pc + oreg &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;0x00000e&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;3&lt;/span&gt;      &lt;span class="m"&gt;14&lt;/span&gt;     main+0       LDBM &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="nv"&gt;breg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; mem&lt;span class="o"&gt;[&lt;/span&gt;oreg &lt;span class="o"&gt;(&lt;/span&gt;0x000001&lt;span class="o"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;199999&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;4&lt;/span&gt;      &lt;span class="m"&gt;15&lt;/span&gt;     main+1       STAI &lt;span class="m"&gt;0&lt;/span&gt;  mem&lt;span class="o"&gt;[&lt;/span&gt;breg &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;199999&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; + oreg &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0x030d3f&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; areg &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;5&lt;/span&gt;      &lt;span class="m"&gt;16&lt;/span&gt;     main+2       LDBM &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="nv"&gt;breg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; mem&lt;span class="o"&gt;[&lt;/span&gt;oreg &lt;span class="o"&gt;(&lt;/span&gt;0x000001&lt;span class="o"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;199999&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;6&lt;/span&gt;      &lt;span class="m"&gt;17&lt;/span&gt;     main+3       LDBI &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="nv"&gt;breg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; mem&lt;span class="o"&gt;[&lt;/span&gt;breg &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;199999&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; + oreg &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0x030d3f&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;7&lt;/span&gt;      &lt;span class="m"&gt;18&lt;/span&gt;     main+4       OPR  &lt;span class="m"&gt;0&lt;/span&gt;  BRB &lt;span class="nv"&gt;pc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; breg &lt;span class="o"&gt;(&lt;/span&gt;0x00000a&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;8&lt;/span&gt;      &lt;span class="m"&gt;10&lt;/span&gt;                  LDBM &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="nv"&gt;breg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; mem&lt;span class="o"&gt;[&lt;/span&gt;oreg &lt;span class="o"&gt;(&lt;/span&gt;0x000001&lt;span class="o"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;199999&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;9&lt;/span&gt;      &lt;span class="m"&gt;11&lt;/span&gt;                  LDAC &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="nv"&gt;areg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; oreg &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;     &lt;span class="m"&gt;12&lt;/span&gt;                  STAI &lt;span class="m"&gt;2&lt;/span&gt;  mem&lt;span class="o"&gt;[&lt;/span&gt;breg &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;199999&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; + oreg &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0x030d41&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; areg &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;11&lt;/span&gt;     &lt;span class="m"&gt;13&lt;/span&gt;                  OPR  &lt;span class="m"&gt;3&lt;/span&gt;  &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The program can also be run on the Verilog Hex implementation using &lt;code&gt;hextb&lt;/code&gt;
(which doesn&amp;#8217;t provide as rich instruction tracing as &lt;code&gt;hexsim&lt;/code&gt;):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜ hextb a.out -t
Wrote &lt;span class="m"&gt;20&lt;/span&gt; bytes to memory
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;      0x51 LDAP
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt;      0x94 BR
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt;     0x11 LDBM
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;17&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;     0x80 STAI
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;19&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;     0x11 LDBM
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;     0x70 LDBI
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;     0xd0 OPR
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;     0x11 LDBM
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;27&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;     0x30 LDAC
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;     0x82 STAI
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;31&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt;     0xd3 OPR
&lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Hello&amp;nbsp;World&lt;/h3&gt;
&lt;p&gt;A more fulsome example is &amp;#8216;Hello World&amp;#8217;, where the main process is&amp;nbsp;simply:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;proc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;prints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hello world\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And &lt;code&gt;prints&lt;/code&gt; unpacks the bytewise string representation by using routines for
performing division and remainder by 265. The full program listing&amp;nbsp;is:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜ cat tests/x/hello_prints.x
val &lt;span class="nv"&gt;put&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
val &lt;span class="nv"&gt;bytesperword&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
var div_x&lt;span class="p"&gt;;&lt;/span&gt;

proc main&lt;span class="o"&gt;()&lt;/span&gt; is prints&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello world\n&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

proc putval&lt;span class="o"&gt;(&lt;/span&gt;val c&lt;span class="o"&gt;)&lt;/span&gt; is put&lt;span class="o"&gt;(&lt;/span&gt;c, &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

func lsu&lt;span class="o"&gt;(&lt;/span&gt;val x, val y&lt;span class="o"&gt;)&lt;/span&gt; is
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;x &amp;lt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;y &amp;lt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; x &amp;lt; y
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; y &amp;lt; &lt;span class="m"&gt;0&lt;/span&gt;

func div_step&lt;span class="o"&gt;(&lt;/span&gt;val b, val y&lt;span class="o"&gt;)&lt;/span&gt; is
  var r&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;y &amp;lt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; or &lt;span class="o"&gt;(&lt;/span&gt;~lsu&lt;span class="o"&gt;(&lt;/span&gt;y, div_x&lt;span class="o"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;then&lt;/span&gt;
    r :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    r :&lt;span class="o"&gt;=&lt;/span&gt; div_step&lt;span class="o"&gt;(&lt;/span&gt;b + b, y + y&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; ~lsu&lt;span class="o"&gt;(&lt;/span&gt;div_x, y&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;then&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt; div_x :&lt;span class="o"&gt;=&lt;/span&gt; div_x - y&lt;span class="p"&gt;;&lt;/span&gt;
    r :&lt;span class="o"&gt;=&lt;/span&gt; r + b
  &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    skip&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; r
&lt;span class="o"&gt;}&lt;/span&gt;

func div&lt;span class="o"&gt;(&lt;/span&gt;val n, val m&lt;span class="o"&gt;)&lt;/span&gt; is
&lt;span class="o"&gt;{&lt;/span&gt; div_x :&lt;span class="o"&gt;=&lt;/span&gt; n&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; lsu&lt;span class="o"&gt;(&lt;/span&gt;n, m&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; div_step&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, m&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

func rem&lt;span class="o"&gt;(&lt;/span&gt;val n, val m&lt;span class="o"&gt;)&lt;/span&gt; is
  var x&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; x :&lt;span class="o"&gt;=&lt;/span&gt; div&lt;span class="o"&gt;(&lt;/span&gt;n, m&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; div_x
&lt;span class="o"&gt;}&lt;/span&gt;

proc prints&lt;span class="o"&gt;(&lt;/span&gt;array s&lt;span class="o"&gt;)&lt;/span&gt; is
  var n&lt;span class="p"&gt;;&lt;/span&gt;
  var p&lt;span class="p"&gt;;&lt;/span&gt;
  var w&lt;span class="p"&gt;;&lt;/span&gt;
  var l&lt;span class="p"&gt;;&lt;/span&gt;
  var b&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; n :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  p :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  w :&lt;span class="o"&gt;=&lt;/span&gt; s&lt;span class="o"&gt;[&lt;/span&gt;p&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  l :&lt;span class="o"&gt;=&lt;/span&gt; rem&lt;span class="o"&gt;(&lt;/span&gt;w, &lt;span class="m"&gt;256&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  w :&lt;span class="o"&gt;=&lt;/span&gt; div&lt;span class="o"&gt;(&lt;/span&gt;w, &lt;span class="m"&gt;256&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  b :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;n &amp;lt;&lt;span class="o"&gt;=&lt;/span&gt; l&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt; putval&lt;span class="o"&gt;(&lt;/span&gt;rem&lt;span class="o"&gt;(&lt;/span&gt;w, &lt;span class="m"&gt;256&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    w :&lt;span class="o"&gt;=&lt;/span&gt; div&lt;span class="o"&gt;(&lt;/span&gt;w, &lt;span class="m"&gt;256&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    n :&lt;span class="o"&gt;=&lt;/span&gt; n + &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    b :&lt;span class="o"&gt;=&lt;/span&gt; b + &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; bytesperword&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt; b :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      p :&lt;span class="o"&gt;=&lt;/span&gt; p + &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      w :&lt;span class="o"&gt;=&lt;/span&gt; s&lt;span class="o"&gt;[&lt;/span&gt;p&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; skip
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Compiling and running this shows that it takes ~50K cycles to execute and
inspecting the trace is clear to see that most time is spent in the arithmetic&amp;nbsp;routines.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜ xcmp tests/x/hello_prints.x
➜ hexsim a.out
hello world
➜ hexsim a.out -t
...
&lt;span class="m"&gt;48902&lt;/span&gt;  &lt;span class="m"&gt;61&lt;/span&gt;                  OPR  &lt;span class="m"&gt;3&lt;/span&gt;  &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Building an X compiler and&amp;nbsp;bootstrapping&lt;/h3&gt;
&lt;p&gt;A third example is a complete compiler for X, written in X:
&lt;a href="https://github.com/jameshanlon/hex-processor/blob/master/tests/x/xhexb.x"&gt;&lt;code&gt;xhexb.x&lt;/code&gt;&lt;/a&gt;
written by David May in ~3,000 lines of X. This serves as a challenging program
to compile, and interesting that it can bootstrap itself. Using the notation
X(Y) to mean compile source Y using binary X, we can first create an &lt;code&gt;xhexb&lt;/code&gt;
binary by running &lt;code&gt;xcmp&lt;/code&gt;(&lt;code&gt;xhexb.x&lt;/code&gt;):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜ xcmp -S tests/x/xhexb.x
...
&lt;span class="m"&gt;20739&lt;/span&gt; bytes
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can then use &lt;code&gt;xcmp&lt;/code&gt;(&lt;code&gt;xhexb.x&lt;/code&gt;) to compile Hello World as
&lt;code&gt;xcmp&lt;/code&gt;(&lt;code&gt;xhexb.x&lt;/code&gt;)(&lt;code&gt;hello_prints.x&lt;/code&gt;):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Create an xhexb compiler binary.&lt;/span&gt;
➜ xcmp tests/x/xhexb.x

&lt;span class="c1"&gt;# Compile Hello World.&lt;/span&gt;
➜ hexsim a.out &amp;lt; tests/x/hello_prints.x
tree size: &lt;span class="m"&gt;602&lt;/span&gt;
program size: &lt;span class="m"&gt;414&lt;/span&gt;
size: &lt;span class="m"&gt;414&lt;/span&gt;

&lt;span class="c1"&gt;# Run it.&lt;/span&gt;
➜ hexsim simout2
hello world
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Similarly, we can use &lt;code&gt;xcmp&lt;/code&gt;(&lt;code&gt;xhexb.x&lt;/code&gt;) to bootstrap itself by running
&lt;code&gt;xcmp&lt;/code&gt;(&lt;code&gt;xhexb.x&lt;/code&gt;)(&lt;code&gt;xhexb.x&lt;/code&gt;):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Create an xhexb compiler binary.&lt;/span&gt;
➜ xcmp tests/x/xhexb.x

&lt;span class="c1"&gt;# Use xhexb binary to compile xhexb.x.&lt;/span&gt;
➜ hexsim a.out &amp;lt; tests/x/xhexb.x
tree size: &lt;span class="m"&gt;18631&lt;/span&gt;
program size: &lt;span class="m"&gt;17093&lt;/span&gt;
size: &lt;span class="m"&gt;177097&lt;/span&gt;

&lt;span class="c1"&gt;# Use the bootstrapped xhexb binary to compile Hello World.&lt;/span&gt;
➜ hexsim simout2 &amp;lt; tests/x/hello_prints.x
tree size: &lt;span class="m"&gt;602&lt;/span&gt;
program size: &lt;span class="m"&gt;414&lt;/span&gt;
size: &lt;span class="m"&gt;414&lt;/span&gt;

&lt;span class="c1"&gt;# Run it.&lt;/span&gt;
➜ hexsim simout2
hello world
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Implementation&amp;nbsp;details&lt;/h3&gt;
&lt;p&gt;Both the assembler and compiler are based on the &lt;code&gt;xhexb.x&lt;/code&gt; bootstrapping
compiler for X discussed&amp;nbsp;above.&lt;/p&gt;
&lt;p&gt;The assembler works in two main&amp;nbsp;phases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Parsing the program to form a list of directives (instructions, labels, data&amp;nbsp;etc).&lt;/li&gt;
&lt;li&gt;Code generation to iterate through the directives and emit binary&amp;nbsp;output.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before emission, the value of labels must be determined, which involves solving two
problems. The first is that for a given relative reference, the length of the
encoding (ie number of prefixes) depends on the value of the reference and vice
versa. This is solved by iteratively increasing the encoding length until it
meets the required range (see &lt;code&gt;instrLen()&lt;/code&gt;). The second problem is that the
value of a relative reference depends on the length of any relative encodings
contained within the range. This is solved by iteratively updating label values
until they reach a stable state (see &lt;code&gt;resolveLabels()&lt;/code&gt;). The assembler adds
additional rudimentary debug information to the binary, with a mapping of
instruction ranges to symbol values. This allows the simulator to display the
current symbol and&amp;nbsp;offset.&lt;/p&gt;
&lt;p&gt;The compiler works a traditional way, structured as a sequence of phases, first
creating a parse tree, then performing passes on the tree to optimise it and
then lowering the tree to machine&amp;nbsp;instructions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Parse the program to form an abstract syntax&amp;nbsp;tree.&lt;/li&gt;
&lt;li&gt;Walk the tree to populate a symbol table with names occurring in the&amp;nbsp;program.&lt;/li&gt;
&lt;li&gt;Walk the tree to propagate constant values within&amp;nbsp;expressions.&lt;/li&gt;
&lt;li&gt;Walk the tree to transform expressions into a canonical&amp;nbsp;form.&lt;/li&gt;
&lt;li&gt;Walk the tree to generate a sequence of intermediate machine&amp;nbsp;instructions.&lt;/li&gt;
&lt;li&gt;Lower the intermediate instructions to machine&amp;nbsp;instructions.&lt;/li&gt;
&lt;li&gt;Optimise the machine instruction&amp;nbsp;sequence.&lt;/li&gt;
&lt;li&gt;Assemble and emit the machine instruction&amp;nbsp;sequence.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Command line options such as &lt;code&gt;--tree&lt;/code&gt; are available to inspect the internal
representation of the program in between these&amp;nbsp;stages.&lt;/p&gt;
&lt;p&gt;Compared with a more sophisticated compiler, Hex and X afford two significant
simplifications. First, the small set of features in X make it straightforward
to map to directly to machine instructions rather than an intermediate
machine-independent representation. Secondly, the register architecture of Hex
means that allocation of registers can be handled easily during mapping to
machine instructions, rather than having to allocate physical registers to a
virtual set as is typical in machines with more&amp;nbsp;registers.&lt;/p&gt;
&lt;p&gt;More details of the &lt;code&gt;xhexb&lt;/code&gt; compiler implementation are included in the &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/hex-processor/xhexnotes.pdf"&gt;X
and Hex notes &lt;span class="caps"&gt;PDF&lt;/span&gt;&lt;/a&gt;, with aspects such as the
calling convention, handling of operators and arithmetic and memory layout
being shared in &lt;code&gt;xcmp&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Modern processors, languages, compilers, and tooling are complex and difficult
to understand. This note walks through possibly the simplest processor
architecture that allows a compact implementation of rudimentary tooling and a
complete high-level programming language to be targeted at it. The definitions
and implementations are contained in a single repository and just a small set
of source files, making it an excellent project to use to explore processors
and&amp;nbsp;compilers.&lt;/p&gt;
&lt;h2&gt;Similar&amp;nbsp;projects&lt;/h2&gt;
&lt;p&gt;The following are some similar projects that include simple implementations of
processor&amp;nbsp;toolchains.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.cl.cam.ac.uk/~mr10/VSPL.html"&gt;&lt;span class="caps"&gt;VSPL&lt;/span&gt;&lt;/a&gt;, is a very simple
  programming language designed by Martin Richards to be used as a case study
  for comparing compiler implementations. The provided source distribution
  includes several implementations of &lt;span class="caps"&gt;VSPL&lt;/span&gt; in different&amp;nbsp;languages.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://people.inf.ethz.ch/wirth/FPGA-relatedWork/ComputerSystemDesign.pdf"&gt;Experiments in Computer System
  Design&lt;/a&gt;
  is a walk through of an implementation of a Tiny Register Machine (&lt;span class="caps"&gt;TRM&lt;/span&gt;) in
  Verilog with serial communication, &lt;span class="caps"&gt;DRAM&lt;/span&gt; access and multiprocessing (Niklaus
  Wirth,&amp;nbsp;2010).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/eliben/luz-cpu"&gt;Luz &lt;span class="caps"&gt;CPU&lt;/span&gt;&lt;/a&gt;, a simulator, assembler and
  linker for the Luz processor architecture written by Eli&amp;nbsp;Bendersky.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Further&amp;nbsp;reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.gamezero.com/team-0/articles/math_magic/micro/"&gt;Processor Design: An
  Introduction&lt;/a&gt; a
  ground-up explanation of how processors&amp;nbsp;work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://releases.llvm.org/9.0.0/docs/tutorial/LangImpl01.html"&gt;&lt;span class="caps"&gt;LLVM&lt;/span&gt; Kaleidoscope
  Tutorial&lt;/a&gt;
  which walks through an implementation of a simple programming language using
  &lt;span class="caps"&gt;LLVM&lt;/span&gt; as a backend for code generation and just-in-time&amp;nbsp;compilation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="projects"></category><category term="computing"></category><category term="computer architecture"></category><category term="microelectronics"></category></entry><entry><title>Recycled allotment shed</title><link href="http://jameswhanlon.com/recycled-allotment-shed.html" rel="alternate"></link><published>2019-11-10T00:00:00+01:00</published><updated>2019-11-10T00:00:00+01:00</updated><author><name>James W. Hanlon</name></author><id>tag:jameswhanlon.com,2019-11-10:/recycled-allotment-shed.html</id><summary type="html">&lt;p&gt;A friend was in need of a shed on her allotment to store tools and as a place
to shelter in the rain, so I helped her to build one. The aim was to build
something solid that would stand up to the elements (unlike most allotment
sheds), to use …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A friend was in need of a shed on her allotment to store tools and as a place
to shelter in the rain, so I helped her to build one. The aim was to build
something solid that would stand up to the elements (unlike most allotment
sheds), to use recycled materials as far as possible, and ideally to fit within
a £100&amp;nbsp;budget.&lt;/p&gt;
&lt;p&gt;The main costs were the structural timber, which was sourced from the &lt;a href="https://www.bwrp.org.uk/"&gt;Bristol Wood Recycling
Project&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;~15m of 2x3&amp;#8221; softwood&amp;nbsp;timber;&lt;/li&gt;
&lt;li&gt;~60m of 1.5x2.5&amp;#8221; softwood&amp;nbsp;timber.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also from the &lt;span class="caps"&gt;BWRP&lt;/span&gt; were: sheets of 12mm ply for the floor and roof, solid wood
planks for the door, an odd piece of shelving which worked brilliantly as a big
window sill, baton for the window frame. Other costs were: two boxes of screws
and roofing nails (Screwfix), acrylic sheet for the window (Wickes). Everything
else was sourced for free, from friends or found on the streets of Bristol:
breeze blocks for the base, pallet wood for the cladding, miscellaneous timber
for the frame, roof felt and felt glue and hinges and shackles for the&amp;nbsp;door.&lt;/p&gt;
&lt;p&gt;I didn&amp;#8217;t keep details of all the money spent, but the final cost was
approximately £150 and the end result was a sturdy shed that should last quite a
few&amp;nbsp;years.&lt;/p&gt;
&lt;figure class="figure"&gt;
&lt;div class="container"&gt;
  &lt;div class="row align-items-center"&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/allotment-shed/previous.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/previous_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/allotment-shed/previous-side.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/previous-side_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;figcaption class="figure-caption"&gt;The existing structure that was intended to become a shed but never did.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;div class="container"&gt;
  &lt;div class="row align-items-center"&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
&lt;figure class="figure"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/allotment-shed/cleared.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/cleared_600x600.jpg" alt="The site with the old shed cleared."&gt;
  &lt;/a&gt;
  &lt;figcaption class="figure-caption text-left"&gt;The site with the old shed cleared.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
&lt;figure class="figure"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/allotment-shed/footings.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/footings_600x600.jpg" alt="Breeze blocks in position for a base."&gt;
  &lt;/a&gt;
  &lt;figcaption class="figure-caption text-left"&gt;Breeze blocks in position for a base.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
&lt;figure class="figure"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/allotment-shed/base-1.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/base-1_600x600.jpg" alt="The floor in position."&gt;
  &lt;/a&gt;
  &lt;figcaption class="figure-caption text-left"&gt;The floor in position.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;figure class="figure"&gt;
&lt;div class="container"&gt;
  &lt;div class="row align-items-center"&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/allotment-shed/frame-1.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/frame-1_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/allotment-shed/frame-2.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/frame-2_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/allotment-shed/frame-3.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/frame-3_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;figcaption class="figure-caption"&gt;Progress of the frame construction, finally with the roof in place.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure class="figure"&gt;
&lt;div class="container"&gt;
  &lt;div class="row align-items-center"&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/allotment-shed/roof-detail-1.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/roof-detail-1_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/allotment-shed/roof-detail-2.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/roof-detail-2_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;figcaption class="figure-caption"&gt;Details of the roof notches to sit level on the frame.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure class="figure"&gt;
&lt;div class="container"&gt;
  &lt;div class="row align-items-center"&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/allotment-shed/cladding-1.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/cladding-1_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/allotment-shed/cladding-3.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/cladding-3_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/allotment-shed/cladding-side.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/cladding-side_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;figcaption class="figure-caption"&gt;Details of the pallet-wood cladding.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure class="figure"&gt;
&lt;div class="container"&gt;
  &lt;div class="row align-items-center"&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/allotment-shed/window-frame.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/window-frame_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/allotment-shed/window-frame-inside.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/window-frame-inside_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;figcaption class="figure-caption"&gt;With the window frame installed (now looking more like a shed, rather than a ticket office).&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure class="figure"&gt;
&lt;div class="container"&gt;
  &lt;div class="row align-items-center"&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/allotment-shed/back.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/back_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/allotment-shed/complete-door-and-window.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/complete-door-and-window_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;figcaption class="figure-caption"&gt;The completed shed, with window and door installed. One final job is to install guttering on the back edge of the roof, which can feed a water butt.&lt;/figcaption&gt;
&lt;/figure&gt;</content><category term="projects"></category><category term="sheds"></category><category term="construction"></category></entry><entry><title>RGB lightbox stacks</title><link href="http://jameswhanlon.com/rgb-lightbox-stacks.html" rel="alternate"></link><published>2018-12-31T00:00:00+01:00</published><updated>2018-12-31T00:00:00+01:00</updated><author><name>James W. Hanlon</name></author><id>tag:jameswhanlon.com,2018-12-31:/rgb-lightbox-stacks.html</id><summary type="html">&lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/RGB-stacks/completed-boxes-3.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/completed-boxes-3_800x800.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;The &amp;#8216;&lt;span class="caps"&gt;RGB&lt;/span&gt; stacks&amp;#8217; lightboxes are an experiment with using high-power LEDs,
generous volumes and translucent acrylic plastic to create big blocks of
colour. They are constructed from 12 mm birch ply and each pixel measures 300 x
300 (outer dimensions). They are built as three columns of three pixels to …&lt;/p&gt;</summary><content type="html">&lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/RGB-stacks/completed-boxes-3.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/completed-boxes-3_800x800.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;The &amp;#8216;&lt;span class="caps"&gt;RGB&lt;/span&gt; stacks&amp;#8217; lightboxes are an experiment with using high-power LEDs,
generous volumes and translucent acrylic plastic to create big blocks of
colour. They are constructed from 12 mm birch ply and each pixel measures 300 x
300 (outer dimensions). They are built as three columns of three pixels to
allow them to be arranged in a square, a line, or in different locations. This
note records some of the details of their construction. Although they are now
functional, refinement of their controls and modulation continues to be a work
in progress. This note records some of the details of how they were built (I
will it updated with any new&amp;nbsp;developments).&lt;/p&gt;
&lt;p&gt;The project was inspired by a similar light box project (that unfortunately I
can no longer find on the internet), but which was a single 3 x 3 cabinet
achieving a similar block-colour effect. My motivation was to build something
similar but that could also be used as subtle/ambient lighting, making use of
the amazing colours and ability to accurately modulate LEDs to create smooth
transitions between rich colours and interesting&amp;nbsp;combinations.&lt;/p&gt;
&lt;figure class="figure"&gt;
&lt;div class="container"&gt;
  &lt;div class="row align-items-center"&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/RGB-stacks/colour-experiment-blue.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/colour-experiment-blue_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/RGB-stacks/colour-experiment-red.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/colour-experiment-red_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;figcaption class="figure-caption"&gt;An early experiment to see how the &lt;span class="caps"&gt;LED&lt;/span&gt; light diffuses through the acrylic in a plywood volume.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Construction of the stacks was straightforward: all panel dimensions are
multiples of 300 and all joints biscuited and glued to avoid any visible
fixings. (I unfortunately don&amp;#8217;t have any pictures of the construction of the&amp;nbsp;stacks.)&lt;/p&gt;
&lt;figure class="figure"&gt;
&lt;div class="container"&gt;
  &lt;div class="row align-items-center"&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/RGB-stacks/bead-detail-1.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/bead-detail-1_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/RGB-stacks/bead-detail-2.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/bead-detail-2_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/RGB-stacks/tape.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/tape_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;figcaption class="figure-caption"&gt;Detail of the lip added to seat the acrylic panels and the narrow double-sided tape to fix them in place.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The acrylic panels were cut to fit the inner box dimensions exactly, but with
small variations in the dimensions of the boxes. Getting them all to fit was a
long process of sanding down each one to fit a particular opening. A secure fit
of the panels was achieved with tight tolerances and narrow double-sided sticky
tape (pictured above&amp;nbsp;right).&lt;/p&gt;
&lt;div class="text-center"&gt;
&lt;figure class="figure"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/RGB-stacks/completed-boxes-1.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/completed-boxes-1_600x600.jpg" alt="The boxes with all acrylic panels in place."&gt;
  &lt;/a&gt;
  &lt;figcaption class="figure-caption text-left"&gt;The boxes with all acrylic panels in place.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Pairs of white and &lt;span class="caps"&gt;RGB&lt;/span&gt; LEDs were mounted on aluminium bar in each pixel. The
&lt;span class="caps"&gt;LED&lt;/span&gt; were fixed in place with small bolts. I made small plastic washers to avoid
shorting any of the contacts with the bolt heads. Although the aluminium bar
probably provides a sufficient heat sink, I added additional heatsink blocks on
the rear side, fixed with thermal glue (these were cut up from larger &lt;span class="caps"&gt;IC&lt;/span&gt;
heatsinks). All of the &lt;span class="caps"&gt;LED&lt;/span&gt; wiring was conveniently done with &lt;span class="caps"&gt;CAT6&lt;/span&gt; cable, using
all of the eight cores to wire the four channels. Each channel draws about
1 W at 5 V (200 mA), which is within the specification of the &lt;span class="caps"&gt;CAT6&lt;/span&gt;.&lt;/p&gt;
&lt;figure class="figure"&gt;
&lt;div class="container"&gt;
  &lt;div class="row align-items-center"&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/RGB-stacks/led-bar-2.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/led-bar-2_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/RGB-stacks/led-heatsinks.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/led-heatsinks_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;figcaption class="figure-caption"&gt;The system used to mount the LEDs in the middle of each box.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure class="figure"&gt;
&lt;div class="container"&gt;
  &lt;div class="row align-items-center"&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/RGB-stacks/skeleton-boxes-with-leds.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/skeleton-boxes-with-leds_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/RGB-stacks/boxes-in-workshop.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/boxes-in-workshop_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;figcaption class="figure-caption"&gt;The boxes with all of the LEDs and their cabling installed.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Each box has a rear plug panel. The central box acts as a master and has
connections for power, Ethernet, and provides serial data and power to the
other outer&amp;nbsp;boxes.&lt;/p&gt;
&lt;figure class="figure"&gt;
&lt;div class="container"&gt;
  &lt;div class="row align-items-center"&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/RGB-stacks/power-supply.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/power-supply_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/RGB-stacks/plug-panel.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/plug-panel_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/RGB-stacks/slave-box-control-boards.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/slave-box-control-boards_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;figcaption class="figure-caption"&gt;The master and slave plug panels for each stack.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The inter-box wiring uses 5-pin &lt;span class="caps"&gt;XLR&lt;/span&gt; sockets, to carry power, ground and the
differential pair for the serial signal. The wires were made with a dual-core
power wire (sufficient to carry the required power at 5V) with a another
dual-core wire for the serial, wrapped in a heatshrink&amp;nbsp;coat.&lt;/p&gt;
&lt;div class="text-center"&gt;
&lt;figure class="figure"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/RGB-stacks/cables.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/cables_600x600.jpg" alt="Custom cabling to connect the left and right hand boxes, containing a dual-core wire for power and two CAT-6 cores for serial data."&gt;
  &lt;/a&gt;
  &lt;figcaption class="figure-caption text-left"&gt;Custom cabling to connect the left and right hand boxes, containing a dual-core wire for power and two &lt;span class="caps"&gt;CAT&lt;/span&gt;-6 cores for serial data.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The electronics for the &lt;span class="caps"&gt;LED&lt;/span&gt; drivers is described in a &lt;a href="http://jameswhanlon.com/three-channel-high-power-led-driver.html"&gt;separate
note&lt;/a&gt;. Each of the &lt;span class="caps"&gt;LED&lt;/span&gt; driver boards has three
outputs, so four boards are required to drive a single stack. The Raspberry Pi
microcontroller is used to control all the pixels, and does so with a dual-wire
&lt;span class="caps"&gt;RS&lt;/span&gt;-485 serial bus. This bus connects each of the driver boards in series, and
the outer boxes are wired in parallel. Despite some concerns about this
topology from notes on the &lt;span class="caps"&gt;MAX&lt;/span&gt;-485 driver &lt;span class="caps"&gt;IC&lt;/span&gt; datasheet and that I didn&amp;#8217;t use
terminating resistors, the arrangement performs&amp;nbsp;fine.&lt;/p&gt;
&lt;p&gt;So that I could easily access the electronics, I integrated the drivers and
their wiring on a plywood board that sits in the base of a stack. The master
stack has the power supply, taking mains voltage and providing 5V up to 60W
(12A) for the three stacks. See the table below for calculated power of the
LEDs only. Note that the power supply does not output enough power do drive
the boxes comfortably (80W would be more&amp;nbsp;comfortable).&lt;/p&gt;
&lt;table class="table table-sm"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th scope="col"&gt;Channel&lt;/th&gt;
      &lt;th scope="col"&gt;Voltage (V)&lt;/th&gt;
      &lt;th scope="col"&gt;Current (A)&lt;/th&gt;
      &lt;th scope="col"&gt;&lt;span class="caps"&gt;LED&lt;/span&gt; power (W)&lt;/th&gt;
      &lt;th scope="col"&gt;Driver efficiency&lt;/th&gt;
      &lt;th scope="col"&gt;Driver power (W)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Red&lt;/td&gt;
      &lt;td&gt;2.4&lt;/td&gt;
      &lt;td&gt;0.3&lt;/td&gt;
      &lt;td&gt;0.72&lt;/td&gt;
      &lt;td&gt;0.48&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Green&lt;/td&gt;
      &lt;td&gt;3.4&lt;/td&gt;
      &lt;td&gt;0.3&lt;/td&gt;
      &lt;td&gt;1.02&lt;/td&gt;
      &lt;td&gt;0.68&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Blue&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.3&lt;/td&gt;
      &lt;td&gt;1.05&lt;/td&gt;
      &lt;td&gt;0.7&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;White&lt;/td&gt;
      &lt;td&gt;3.2&lt;/td&gt;
      &lt;td&gt;0.3&lt;/td&gt;
      &lt;td&gt;0.96&lt;/td&gt;
      &lt;td&gt;0.64&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Total (per pixel)&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;3.75&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Total (per stack)&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;11.25&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Total&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;33.75&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;54&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;To check the above power numbers I performed some measurments with a clamp
meter of the central&amp;nbsp;stack:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;With all LEDs off, the quiesence current is 360 mA at 5 V, dissipating 1.8&amp;nbsp;W.&lt;/li&gt;
&lt;li&gt;With all LEDs on at full intensity, the current is 4.75 A at 5 V, dissipating
  23.75&amp;nbsp;W.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These numbers are slightly higher than expected, due to the &lt;span class="caps"&gt;LED&lt;/span&gt; driver current
ranging between 0.357 mA (blue) and 0.370 mA&amp;nbsp;(green).&lt;/p&gt;
&lt;figure class="figure"&gt;
&lt;div class="container"&gt;
  &lt;div class="row align-items-center"&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/RGB-stacks/control-board-and-psu.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/control-board-and-psu_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/RGB-stacks/control-board-1.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/control-board-1_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/RGB-stacks/one-stack-test-with-board.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/one-stack-test-with-board_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;figcaption class="figure-caption"&gt;Integration of the electronics into the master stack (similar for the outer stacks).&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The back panels fasten with M8 bolts into&amp;nbsp;T-nuts.&lt;/p&gt;
&lt;figure class="figure"&gt;
&lt;div class="container"&gt;
  &lt;div class="row align-items-center"&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
&lt;figure class="figure"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/RGB-stacks/back-panels.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/back-panels_600x600.jpg" alt="Details of the back plates, fastened by M8 Allen key bolts."&gt;
  &lt;/a&gt;
  &lt;figcaption class="figure-caption text-left"&gt;Details of the back plates, fastened by M8 Allen key bolts.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
&lt;figure class="figure"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/RGB-stacks/completed-boxes-2.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/completed-boxes-2_600x600.jpg" alt="The boxes in a complete state"&gt;
  &lt;/a&gt;
  &lt;figcaption class="figure-caption text-left"&gt;The boxes in a complete state&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;figcaption class="figure-caption"&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;It&amp;#8217;s hard to capture the quality of the effect of the light boxes on camera.
The images below are two early tests: left just using a lamp in one of the
pixels, right with no blending of the &lt;span class="caps"&gt;RGB&lt;/span&gt;&amp;nbsp;channels.&lt;/p&gt;
&lt;figure class="figure"&gt;
&lt;div class="container"&gt;
  &lt;div class="row align-items-center"&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
&lt;figure class="figure"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/RGB-stacks/one-cell-illuminated.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/one-cell-illuminated_600x600.jpg" alt="Seeing the effect of the acrylic diffusion with just a lamp in one of the cells."&gt;
  &lt;/a&gt;
  &lt;figcaption class="figure-caption text-left"&gt;Seeing the effect of the acrylic diffusion with just a lamp in one of the cells.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
&lt;figure class="figure"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/RGB-stacks/rgb-test.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/rgb-test_600x600.jpg" alt="The first RGB test of a stack."&gt;
  &lt;/a&gt;
  &lt;figcaption class="figure-caption text-left"&gt;The first &lt;span class="caps"&gt;RGB&lt;/span&gt; test of a stack.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;figcaption class="figure-caption"&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The behaviour of the boxes is determined by the &lt;span class="caps"&gt;PIC&lt;/span&gt; programs and the Raspberry
Pi. Since changes to the &lt;span class="caps"&gt;PIC&lt;/span&gt; program requires each of the boards to be
programmed individually and for each program to be compiled with a unique
identifier, this is not an easy way to experiment with modulating schemes.
Instead, each &lt;span class="caps"&gt;PIC&lt;/span&gt; is programmed only to change the output intensity, and
experimentation can be done using Python on the Raspberry Pi over &lt;span class="caps"&gt;SSH&lt;/span&gt;. In these
scheme, updates are sent to the &lt;span class="caps"&gt;LED&lt;/span&gt; drivers synchronously, as a frame. At
115,200 bps baud rate over &lt;span class="caps"&gt;RS485&lt;/span&gt;, this is sufficient to deliver up to 389
updates per second. In practice there are overheads that will reduce this. If,
for smooth graduations between colours the frame rate was not adequate, an
optimisation could be to expand the capability of the &lt;span class="caps"&gt;PIC&lt;/span&gt; driver code to
perform more complex actions like sweeps over intensity ranges, thereby
reducing the number of updates&amp;nbsp;required.&lt;/p&gt;
&lt;p&gt;As I mentioned, these boxes are not yet complete. To finish them, I want to add
a button panel to switch them on off and control the lighting&amp;nbsp;patterns.&lt;/p&gt;</content><category term="projects"></category><category term="making"></category><category term="lighting"></category><category term="electronics"></category></entry><entry><title>Three-channel high-power LED driver</title><link href="http://jameswhanlon.com/three-channel-high-power-led-driver.html" rel="alternate"></link><published>2018-12-30T00:00:00+01:00</published><updated>2018-12-30T00:00:00+01:00</updated><author><name>James W. Hanlon</name></author><id>tag:jameswhanlon.com,2018-12-30:/three-channel-high-power-led-driver.html</id><summary type="html">&lt;div class="float-right"&gt;
&lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/LED-driver/board-layers.png" data-lightbox="led-driver"&gt;
  &lt;img class="thumbnail rounded" src="thumbs/board-layers_400x400.png" alt="Board silk screen"&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;This note describes an &lt;span class="caps"&gt;LED&lt;/span&gt; driver I designed for a lighting project. I decided
on a custom solution because I couldn&amp;#8217;t find any suitable boards available to
buy at a reasonable price. The intended application (which I will describe in
another note) requires 12 high-power (~1W) LEDs to be …&lt;/p&gt;</summary><content type="html">&lt;div class="float-right"&gt;
&lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/LED-driver/board-layers.png" data-lightbox="led-driver"&gt;
  &lt;img class="thumbnail rounded" src="thumbs/board-layers_400x400.png" alt="Board silk screen"&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;This note describes an &lt;span class="caps"&gt;LED&lt;/span&gt; driver I designed for a lighting project. I decided
on a custom solution because I couldn&amp;#8217;t find any suitable boards available to
buy at a reasonable price. The intended application (which I will describe in
another note) requires 12 high-power (~1W) LEDs to be driven individually a 3 by 3
grid measuring approximately 1 metre square, with each of the nine cell
containing a red, green, blue and white &lt;span class="caps"&gt;LED&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I embarked on this project without any experience of designing PCBs, and with
relatively little knowledge of electronics, so it was a steep but fantastic
learning experience. I wanted to record some of the details of this project for
others who may find them useful, as I did with some of the resources I&amp;#8217;ve
linked to at the end. All of the &lt;span class="caps"&gt;PCB&lt;/span&gt; design files and processor firmware are
&lt;a href="https://github.com/jameshanlon/3C-HP-LED-driver"&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Design&lt;/h1&gt;
&lt;p&gt;The board is designed around the following main &lt;span class="caps"&gt;IC&lt;/span&gt;&amp;nbsp;components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Microchip &lt;span class="caps"&gt;PIC12F1572&lt;/span&gt; for &lt;span class="caps"&gt;PWM&lt;/span&gt; &lt;span class="caps"&gt;LED&lt;/span&gt; control and serial communication. This was
  the simplest &lt;span class="caps"&gt;PIC&lt;/span&gt; I could find that had multiple &lt;span class="caps"&gt;PWM&lt;/span&gt; outputs and &lt;span class="caps"&gt;UART&lt;/span&gt; serial
communication capability. It&amp;#8217;s an 8-bit device with 16-bit PWMs and 3.5 KBs of
program&amp;nbsp;memory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maxim &lt;span class="caps"&gt;MAX485&lt;/span&gt; for communication to multiple of these boards. This &lt;span class="caps"&gt;IC&lt;/span&gt; provides
  half-duplex communication over a 2-wire differential pair using the &lt;span class="caps"&gt;RS485&lt;/span&gt;
protocol, allowing communication over long distances. Importantly it supports
multiple drops, so a number of boards can be wired together with a bus. I chose
this as it is very simple to integrate, with no additional components required,
compared to the capacitors necessary for the &lt;span class="caps"&gt;MAX232&lt;/span&gt;. Talking to the &lt;span class="caps"&gt;PIC&lt;/span&gt;, this
can support a baud rate of 115,200&amp;nbsp;bps.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="caps"&gt;ON&lt;/span&gt; Semiconductor &lt;span class="caps"&gt;CAT4101&lt;/span&gt; for driving LEDs with a constant-current up to 1A
with &lt;span class="caps"&gt;PWM&lt;/span&gt; control. Because the temperature fluctuations of high-power LEDs
affects their forward voltage, driving them with a constant current is
important to avoid damage due to over voltage. These chips neatly integrate
this with the &lt;span class="caps"&gt;PWM&lt;/span&gt; control ability. Their only downsides were their cost (~£2
each - with 36 of them needed for my lighting project, they were the greatest
single expense) and package which isn&amp;#8217;t designed to be hand&amp;nbsp;soldered.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other&amp;nbsp;features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Header for in-circuit &lt;span class="caps"&gt;PIC&lt;/span&gt; programming. To disconnect the &lt;span class="caps"&gt;UART&lt;/span&gt; pins (required
  for programming) and to attach a 10K pull up resistor, I included three
  jumper headers. However, I found connecting the pull up wasn&amp;#8217;t necessary for&amp;nbsp;programming.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Screw terminals for all installation&amp;nbsp;connections.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Indicator LEDs for &lt;span class="caps"&gt;UART&lt;/span&gt; &lt;span class="caps"&gt;TX&lt;/span&gt; and &lt;span class="caps"&gt;RX&lt;/span&gt; directions, and&amp;nbsp;power.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I designed the &lt;span class="caps"&gt;PCB&lt;/span&gt; using the excellent &lt;a href="http://kicad-pcb.org/"&gt;KiCAD&lt;/a&gt; and had
it manufactured very cheaply by &lt;a href="https://www.seeedstudio.com/fusion_pcb.html"&gt;Seeed Studio&lt;/a&gt;
in Shenzhen,&amp;nbsp;China.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s the&amp;nbsp;schematic:&lt;/p&gt;
&lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/LED-driver/schematic.png" data-lightbox="led-driver"&gt;
    &lt;img class="rounded" src="thumbs/schematic_800x800.png" alt="Board circuit schematic"&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;h1&gt;Parts&amp;nbsp;list&lt;/h1&gt;
&lt;table class="table table-sm"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th scope="col"&gt;Quantity&lt;/th&gt;
      &lt;th scope="col"&gt;Package&lt;/th&gt;
      &lt;th scope="col"&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;&lt;span class="caps"&gt;TO&lt;/span&gt;-263&lt;/td&gt;
      &lt;td&gt;&lt;span class="caps"&gt;CAT4101&lt;/span&gt; &lt;span class="caps"&gt;LED&lt;/span&gt; drivers 5.5V&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;&lt;span class="caps"&gt;DIP&lt;/span&gt;-8&lt;/td&gt;
      &lt;td&gt;&lt;span class="caps"&gt;PIC12F1572&lt;/span&gt; microcontroller&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;&lt;span class="caps"&gt;DIP&lt;/span&gt;-8&lt;/td&gt;
      &lt;td&gt;&lt;span class="caps"&gt;MAX485&lt;/span&gt; serial interface&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;0805&lt;/td&gt;
      &lt;td&gt;Green LEDs&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;0805&lt;/td&gt;
      &lt;td&gt;Resistor 10K&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;0805&lt;/td&gt;
      &lt;td&gt;Resistor 1.4K&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;0805&lt;/td&gt;
      &lt;td&gt;Resistor 510&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;0805&lt;/td&gt;
      &lt;td&gt;Capacitor 0.1 uF&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;&lt;span class="caps"&gt;SOT&lt;/span&gt;-23&lt;/td&gt;
      &lt;td&gt;2N7002 N-channel &lt;span class="caps"&gt;MOSFET&lt;/span&gt; 300 mA&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;2 way 5mm pitch terminal blocks&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;3 way 5mm pitch terminal blocks&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;2.54mm pitch pin headers&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;2.54mm pin header jumper caps&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The &lt;span class="caps"&gt;CAT4101&lt;/span&gt; sense resistors are chosen to give a constant current close to 300
mA, at 1.4 KOhms. See the &lt;span class="caps"&gt;CAT4101&lt;/span&gt; &lt;a href="https://www.onsemi.com/pub/Collateral/CAT4101-D.PDF"&gt;datasheet&lt;/a&gt; for more&amp;nbsp;details.&lt;/p&gt;
&lt;p&gt;For reference, I have assumed the following parameters of the LEDs I
used (you should however check the datasheet for a particular &lt;span class="caps"&gt;LED&lt;/span&gt;):&lt;/p&gt;
&lt;table class="table table-sm"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th scope="col"&gt;Colour&lt;/th&gt;
      &lt;th scope="col"&gt;Typical forward voltage&lt;br&gt;(@ 350 mA)&lt;/th&gt;
      &lt;th scope="col"&gt;Part&lt;/th&gt;
      &lt;th scope="col"&gt;Reference&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Red&lt;/td&gt;
      &lt;td&gt;2.4&lt;/td&gt;
      &lt;td&gt;3W &lt;span class="caps"&gt;RGB&lt;/span&gt; module&lt;/td&gt;
      &lt;td&gt;&lt;a href="https://www.sparkfun.com/datasheets/Components/LED/COM-08718-datasheet.pdf"&gt;Datasheet (&lt;span class="caps"&gt;PDF&lt;/span&gt;)&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Green&lt;/td&gt;
      &lt;td&gt;3.4&lt;/td&gt;
      &lt;td&gt;3W &lt;span class="caps"&gt;RGB&lt;/span&gt; module&lt;/td&gt;
      &lt;td&gt;&lt;a href="https://www.sparkfun.com/datasheets/Components/LED/COM-08718-datasheet.pdf"&gt;Datasheet (&lt;span class="caps"&gt;PDF&lt;/span&gt;)&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Blue&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;3W &lt;span class="caps"&gt;RGB&lt;/span&gt; module&lt;/td&gt;
      &lt;td&gt;&lt;a href="https://www.sparkfun.com/datasheets/Components/LED/COM-08718-datasheet.pdf"&gt;Datasheet (&lt;span class="caps"&gt;PDF&lt;/span&gt;)&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;White&lt;/td&gt;
      &lt;td&gt;2.8-3.4&lt;/td&gt;
      &lt;td&gt;1W Ice White &lt;span class="caps"&gt;LED&lt;/span&gt; (Bridgelux 9000-15000k)&lt;/td&gt;
      &lt;td&gt;&lt;a href="https://futureeden.co.uk/collections/ice-white-bridgelux-power-led-9000-15000k/products/1w-ice-white-led-bridgelux-12000k-with-pcb"&gt;Future Eden&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The &lt;span class="caps"&gt;CAT4101&lt;/span&gt; is a &lt;a href="https://electronics.stackexchange.com/questions/344547/how-do-i-calculate-the-efficiency-of-a-linear-constant-current-led-driver"&gt;linear driver&lt;/a&gt;, so it effectively acts as a
variable resistor to deliver constant current, with an efficiency of
$V_{led}/V_{supply}$. A disadvantage of driving each &lt;span class="caps"&gt;LED&lt;/span&gt; individually is that
its efficiency can be low, down to 50%. The power delivered to the &lt;span class="caps"&gt;LED&lt;/span&gt; is
$I_{led} \times V_{led}$ and the power dissipated by the driver is $I_{led}
\times V_{supply}$ (not including quiescent&amp;nbsp;power).&lt;/p&gt;
&lt;table class="table table-sm"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th scope="col"&gt;Channel&lt;/th&gt;
      &lt;th scope="col"&gt;Voltage (V)&lt;/th&gt;
      &lt;th scope="col"&gt;Current (A)&lt;/th&gt;
      &lt;th scope="col"&gt;&lt;span class="caps"&gt;LED&lt;/span&gt; power (W)&lt;/th&gt;
      &lt;th scope="col"&gt;&lt;span class="caps"&gt;CAT4101&lt;/span&gt; efficiency&lt;/th&gt;
      &lt;th scope="col"&gt;Driver power (W)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Red&lt;/td&gt;
      &lt;td&gt;2.4&lt;/td&gt;
      &lt;td&gt;0.3&lt;/td&gt;
      &lt;td&gt;0.72&lt;/td&gt;
      &lt;td&gt;0.48&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Green&lt;/td&gt;
      &lt;td&gt;3.4&lt;/td&gt;
      &lt;td&gt;0.3&lt;/td&gt;
      &lt;td&gt;1.02&lt;/td&gt;
      &lt;td&gt;0.68&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Blue&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;0.3&lt;/td&gt;
      &lt;td&gt;1.05&lt;/td&gt;
      &lt;td&gt;0.7&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;White&lt;/td&gt;
      &lt;td&gt;3.2&lt;/td&gt;
      &lt;td&gt;0.3&lt;/td&gt;
      &lt;td&gt;0.96&lt;/td&gt;
      &lt;td&gt;0.64&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Measurements of each of the &lt;span class="caps"&gt;LED&lt;/span&gt; channels using a current clamp meter showed
that the current drawn ranges from 357 mA to 370&amp;nbsp;mA.&lt;/p&gt;
&lt;h1&gt;Programming&lt;/h1&gt;
&lt;p&gt;The intention of the &lt;span class="caps"&gt;PIC&lt;/span&gt; microcontrollers is to react to a simple set of
commands sent via the serial interface. In deployment, an array of these driver
boards would be controlled by another processor broadcasting on the &lt;span class="caps"&gt;RS485&lt;/span&gt; bus.
I used a Raspberry Pi with an &lt;span class="caps"&gt;RS485&lt;/span&gt; shield to do&amp;nbsp;this.&lt;/p&gt;
&lt;p&gt;At a minimum, the PICs need to set the intensity of each &lt;span class="caps"&gt;LED&lt;/span&gt; they control,
which is the current operation of the firmware. They could however be triggered
to perform more complex modulations. This would reduce the data transmission
requirements on the &lt;span class="caps"&gt;RS485&lt;/span&gt; bus, potentially improving the quality of animations
produced by an&amp;nbsp;array.&lt;/p&gt;
&lt;p&gt;The &lt;span class="caps"&gt;PIC&lt;/span&gt; microcontrollers are programmed in C, which I did using Microchip&amp;#8217;s &lt;span class="caps"&gt;XC&lt;/span&gt;
compiler and MPLab &lt;span class="caps"&gt;IDE&lt;/span&gt; software. In order that each board can uniquely identify
it&amp;#8217;s control data, they are compiled with a unique &lt;span class="caps"&gt;ID&lt;/span&gt;. With a deployment of 12
boards, firmware updates are a little arduous, particularly since the two
jumpers need to be removed as&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;I found that an efficient communication protocol between an array of boards
and the main controller (Raspberry Pi) is a sequence of bytes with the first
uniquely determining the header and the following 36 determining the intensity
of each of the individual LEDs. Each board uses its &lt;span class="caps"&gt;ID&lt;/span&gt; to choose three values
in the payload. At 115,200 bps, this in theory allows up to 389 commands to
be sent per second. Note that the boards do not send an acknowledgement, since
this significantly reduces the throughput. In Python a packet can be sent with
(&lt;a href="https://github.com/jameshanlon/rgb-stacks/blob/master/rgbstacks.py"&gt;snippet from here&lt;/a&gt;):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;set_colour&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;assert&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;usart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bytearray&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;usart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The PICs receive &lt;span class="caps"&gt;UART&lt;/span&gt; data and set the output PWMs thus
(&lt;a href="https://github.com/jameshanlon/rgb-stacks/blob/master/PIC/main.c"&gt;snippet from here&lt;/a&gt;):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Reset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;we&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;see&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;marker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RCREGbits&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RCREG&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;START_PACKET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;uart_count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Packet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;uart_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;uart_count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RCREGbits&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RCREG&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;When&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;we&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ve received the payload, update PWMs and setup for next packet.&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uart_count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PAYLOAD_SIZE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;duty&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cycles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;an&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bits&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;PWM1DC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;uart_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;DRIVER_OFFSET&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;PWM2DC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;uart_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;DRIVER_OFFSET&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;PWM3DC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;uart_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;DRIVER_OFFSET&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Reload&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PWMs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;PWM1LD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;PWM2LD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;PWM3LD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;uart_count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Pictures&lt;/h1&gt;
&lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/LED-driver/unpopulated-boards.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/unpopulated-boards_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;div class="container"&gt;
  &lt;div class="row align-items-center"&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/LED-driver/assembled-1.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/assembled-1_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/LED-driver/assembled-2.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/assembled-2_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/LED-driver/assembled-top.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/assembled-top_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class="container"&gt;
  &lt;div class="row align-items-center"&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/LED-driver/assembled-programmer.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/assembled-programmer_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/LED-driver/8up.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/8up_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class="container"&gt;
  &lt;div class="row align-items-center"&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/LED-driver/array-1.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/array-1_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/LED-driver/array-2.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/array-2_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/LED-driver/4up-1.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/4up-1_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1&gt;Improvements&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Adjust the &lt;span class="caps"&gt;CAT4101&lt;/span&gt; sense resistor to deliver closer to 300 mA (1.5-1.6&amp;nbsp;KOhm).&lt;/li&gt;
&lt;li&gt;Remove the 10K pull up resistor for programming the &lt;span class="caps"&gt;PIC&lt;/span&gt; since it is&amp;nbsp;unnecessary.&lt;/li&gt;
&lt;li&gt;Update the defunct silk screen &lt;span class="caps"&gt;URL&lt;/span&gt; to my new jameswhanlon.com&amp;nbsp;domain.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jameshanlon/3C-HP-LED-driver"&gt;Board design and microcontroller source code on&amp;nbsp;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://thecustomgeek.com/2013/12/28/rgbw31/"&gt;&lt;span class="caps"&gt;RGBW&lt;/span&gt; &lt;span class="caps"&gt;LED&lt;/span&gt; Controller v3.1 (The Custom Geek)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.bigclive.com/newrgb.htm"&gt;Make an &lt;span class="caps"&gt;RGB&lt;/span&gt; lighting controller&amp;nbsp;(Bigclivedotcom)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.instructables.com/id/Easy-CAT4101-LED-Driver/"&gt;Easy &lt;span class="caps"&gt;CAT4101&lt;/span&gt; &lt;span class="caps"&gt;LED&lt;/span&gt; Driver&amp;nbsp;(Instructables)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.instructables.com/id/Circuits-for-using-High-Power-LED-s/"&gt;High power &lt;span class="caps"&gt;LED&lt;/span&gt; driver circuits&amp;nbsp;(Instructables)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.instructables.com/id/Power-LED-s---simplest-light-with-constant-current/"&gt;Power &lt;span class="caps"&gt;LED&lt;/span&gt;&amp;#8217;s - Simplest Light With Constant-current Circuit&amp;nbsp;(Instructables)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://electronics.stackexchange.com/questions/344547/how-do-i-calculate-the-efficiency-of-a-linear-constant-current-led-driver"&gt;Re: Help understanding electrical efficiency of LEDs with &lt;span class="caps"&gt;PWM&lt;/span&gt; dimming (Candle Power&amp;nbsp;Forums)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="projects"></category><category term="lighting"></category><category term="electronics"></category></entry><entry><title>Retrofit shed insulation</title><link href="http://jameswhanlon.com/retrofit-shed-insulation.html" rel="alternate"></link><published>2018-09-30T00:00:00+02:00</published><updated>2018-09-30T00:00:00+02:00</updated><author><name>James W. Hanlon</name></author><id>tag:jameswhanlon.com,2018-09-30:/retrofit-shed-insulation.html</id><summary type="html">&lt;p&gt;To make the shed in my garden (built by the previous owner) a usable space in
cold weather, I decided to insulate it. The construction of it is a stud timber
frame of 2x4&amp;#8221; with a corrugated metal exterior and lined inside with &lt;span class="caps"&gt;OSB&lt;/span&gt; board.
The construction has created voids …&lt;/p&gt;</summary><content type="html">&lt;p&gt;To make the shed in my garden (built by the previous owner) a usable space in
cold weather, I decided to insulate it. The construction of it is a stud timber
frame of 2x4&amp;#8221; with a corrugated metal exterior and lined inside with &lt;span class="caps"&gt;OSB&lt;/span&gt; board.
The construction has created voids in the floor, walls and roof, providing a
convenient space to add&amp;nbsp;insulation.&lt;/p&gt;
&lt;p&gt;I considered using natural wool insulation, as opposed to rigid insulation
board, but felt that it would difficult to secure it in place in a consistent
way, as well as ensuring an air gap remains between the external cladding. I
decided on using Celotex rigid insulation board and used 12 sheets of 75mm
thick standard 2400 mm x 1200 mm size, and two boards of the same size at 50 mm
for the back wall. In total, the insulation cost £512.74 (including &lt;span class="caps"&gt;VAT&lt;/span&gt;). To
prevent draughts as much as possible, I decided to tape the gaps between the
boards and shed timbers. I bought about 8 rolls of foil tape to do&amp;nbsp;this.&lt;/p&gt;
&lt;p&gt;The insulation board turned out to be easy to work with, easy to cut with a
panel saw and fitting snugly in the gaps and leaving plenty of space for
ventilation. I found the dust created by sawing the board irritating to my eyes
and breathing so as much as possible wore eye protection and a mask (although
hard to do getting hot in the small space). Working overhead on the roof was
the worst part as it was difficult to avoid falling dust on my face. The whole
job took three days to complete and has made a substantial difference to the
stability of the temperature in the&amp;nbsp;space.&lt;/p&gt;
&lt;figure class="figure"&gt;
&lt;div class="container"&gt;
  &lt;div class="row align-items-center"&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/shed-insulation/before-left-wall.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/before-left-wall_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/shed-insulation/before-consumer-unit.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/before-consumer-unit_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/shed-insulation/insulation-board.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/insulation-board_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;figcaption class="figure-caption"&gt;The &lt;span class="caps"&gt;OSB&lt;/span&gt; lining before starting (left) and the 75 mm board (right).&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;div class="text-center"&gt;
&lt;figure class="figure"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/shed-insulation/stripped-panorama.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/stripped-panorama_w=1200.jpg" alt="OSB lining removed from the walls and roof."&gt;
  &lt;/a&gt;
  &lt;figcaption class="figure-caption text-left"&gt;&lt;span class="caps"&gt;OSB&lt;/span&gt; lining removed from the walls and roof.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;div class="container"&gt;
  &lt;div class="row align-items-center"&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
&lt;figure class="figure"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/shed-insulation/stripped-floor.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/stripped-floor_h=450.jpg" alt="The remaining OSB removed from the floor."&gt;
  &lt;/a&gt;
  &lt;figcaption class="figure-caption text-left"&gt;The remaining &lt;span class="caps"&gt;OSB&lt;/span&gt; removed from the floor.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
&lt;figure class="figure"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/shed-insulation/floor-1.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/floor-1_600x600.jpg" alt="Complete and taped floor insulation, and half the floor restored."&gt;
  &lt;/a&gt;
  &lt;figcaption class="figure-caption text-left"&gt;Complete and taped floor insulation, and half the floor restored.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class="text-center"&gt;
&lt;figure class="figure"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/shed-insulation/exposed-roof.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/exposed-roof_600x600.jpg" alt="Installation of insulation into the roof apex. The dust falling from the board as they are positioned in place made this an unpleasant job."&gt;
  &lt;/a&gt;
  &lt;figcaption class="figure-caption text-left"&gt;Installation of insulation into the roof apex. The dust falling from the board as they are positioned in place made this an unpleasant job.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;figure class="figure"&gt;
&lt;div class="container"&gt;
  &lt;div class="row align-items-center"&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/shed-insulation/left-wall-done.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/left-wall-done_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/shed-insulation/right-wall-done-2.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/right-wall-done-2_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/shed-insulation/fiddly-bit.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/fiddly-bit_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;figcaption class="figure-caption"&gt;Completed walls and roof, prior to taping.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;div class="container"&gt;
  &lt;div class="row align-items-center"&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
&lt;figure class="figure"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/shed-insulation/back-wall-preparation.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/back-wall-preparation_600x600.jpg" alt="Timer added to provide a space to install the insulation."&gt;
  &lt;/a&gt;
  &lt;figcaption class="figure-caption text-left"&gt;Timer added to provide a space to install the insulation.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
&lt;figure class="figure"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/shed-insulation/back-wall-done.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/back-wall-done_600x600.jpg" alt="...and the insulation in place."&gt;
  &lt;/a&gt;
  &lt;figcaption class="figure-caption text-left"&gt;&amp;#8230;and the insulation in place.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;figure class="figure"&gt;
&lt;div class="container"&gt;
  &lt;div class="row align-items-center"&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/shed-insulation/back-right-2.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/back-right-2_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/shed-insulation/door-left-done.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/door-left-done_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;figcaption class="figure-caption"&gt;Details of more completed areas, before and after taping.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;div class="text-center"&gt;
&lt;figure class="figure"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/shed-insulation/complete-tools-panorama.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/complete-tools-panorama_w=1200.jpg" alt="The scene before tidying up."&gt;
  &lt;/a&gt;
  &lt;figcaption class="figure-caption text-left"&gt;The scene before tidying up.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;div class="text-center"&gt;
&lt;figure class="figure"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/shed-insulation/complete-panorama.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/complete-panorama_w=1200.jpg" alt="...and after tidying."&gt;
  &lt;/a&gt;
  &lt;figcaption class="figure-caption text-left"&gt;&amp;#8230;and after tidying.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;figure class="figure"&gt;
&lt;div class="container"&gt;
  &lt;div class="row align-items-center"&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/shed-insulation/work-bench.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/work-bench_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="col"&gt;
    &lt;div class="text-center"&gt;
  &lt;a href="https://jwh.ams3.digitaloceanspaces.com/homepage/shed-insulation/shelving.jpg" data-lightbox="shed"&gt;
    &lt;img class="figure-img img-fluid thumbnail" src="/thumbs/shelving_600x600.jpg" alt="No alt text"&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;figcaption class="figure-caption"&gt;Almost done: enough &lt;span class="caps"&gt;OSB&lt;/span&gt; lining back in to install the workbench and shelves.&lt;/figcaption&gt;
&lt;/figure&gt;</content><category term="projects"></category><category term="sheds"></category><category term="retrofit"></category><category term="energy-efficiency"></category></entry></feed>